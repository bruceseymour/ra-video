{"ast":null,"code":"'use strict';\n\nvar path = require('path'),\n    fs = require('fs');\n\nvar getContextDirectory = require('./get-context-directory');\n/**\n * Infer the compilation output directory from options.\n * Relative paths are resolved against the compilation context (or process.cwd() where not specified).\n * @this {{options: object}} A loader or compilation\n * @returns {undefined|string} The output path string, where defined\n */\n\n\nfunction getOutputDirectory() {\n  /* jshint validthis:true */\n  var base = this.options && this.options.output ? this.options.output.directory : null,\n      absBase = !!base && path.resolve(getContextDirectory.call(this), base),\n      isValid = !!absBase && fs.existsSync(absBase) && fs.statSync(absBase).isDirectory();\n  return isValid ? absBase : undefined;\n}\n\nmodule.exports = getOutputDirectory;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/next/node_modules/adjust-sourcemap-loader/codec/utility/get-output-directory.js"],"names":["path","require","fs","getContextDirectory","getOutputDirectory","base","options","output","directory","absBase","resolve","call","isValid","existsSync","statSync","isDirectory","undefined","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAD,CAAlB;AAAA,IACIC,EAAE,GAAKD,OAAO,CAAC,IAAD,CADlB;;AAGA,IAAIE,mBAAmB,GAAGF,OAAO,CAAC,yBAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,kBAAT,GAA8B;AAC5B;AACA,MAAIC,IAAI,GAAM,KAAKC,OAAL,IAAgB,KAAKA,OAAL,CAAaC,MAA7B,GAAsC,KAAKD,OAAL,CAAaC,MAAb,CAAoBC,SAA1D,GAAsE,IAApF;AAAA,MACIC,OAAO,GAAG,CAAC,CAACJ,IAAF,IAAUL,IAAI,CAACU,OAAL,CAAaP,mBAAmB,CAACQ,IAApB,CAAyB,IAAzB,CAAb,EAA6CN,IAA7C,CADxB;AAAA,MAEIO,OAAO,GAAG,CAAC,CAACH,OAAF,IAAaP,EAAE,CAACW,UAAH,CAAcJ,OAAd,CAAb,IAAuCP,EAAE,CAACY,QAAH,CAAYL,OAAZ,EAAqBM,WAArB,EAFrD;AAGA,SAAOH,OAAO,GAAGH,OAAH,GAAaO,SAA3B;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiBd,kBAAjB","sourcesContent":["'use strict';\n\nvar path = require('path'),\n    fs   = require('fs');\n\nvar getContextDirectory = require('./get-context-directory');\n\n/**\n * Infer the compilation output directory from options.\n * Relative paths are resolved against the compilation context (or process.cwd() where not specified).\n * @this {{options: object}} A loader or compilation\n * @returns {undefined|string} The output path string, where defined\n */\nfunction getOutputDirectory() {\n  /* jshint validthis:true */\n  var base    = this.options && this.options.output ? this.options.output.directory : null,\n      absBase = !!base && path.resolve(getContextDirectory.call(this), base),\n      isValid = !!absBase && fs.existsSync(absBase) && fs.statSync(absBase).isDirectory();\n  return isValid ? absBase : undefined;\n}\n\nmodule.exports = getOutputDirectory;\n"]},"metadata":{},"sourceType":"script"}