{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.serveStatic = serveStatic;\nexports.getContentType = getContentType;\nexports.getExtension = getExtension;\n\nvar _send = _interopRequireDefault(require(\"next/dist/compiled/send\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction serveStatic(req, res, path) {\n  return new Promise((resolve, reject) => {\n    (0, _send.default)(req, path).on('directory', () => {\n      // We don't allow directories to be read.\n      const err = new Error('No directory access');\n      err.code = 'ENOENT';\n      reject(err);\n    }).on('error', reject).pipe(res).on('finish', resolve);\n  });\n}\n\nfunction getContentType(extWithoutDot) {\n  const {\n    mime\n  } = _send.default;\n\n  if ('getType' in mime) {\n    // 2.0\n    return mime.getType(extWithoutDot);\n  } // 1.0\n\n\n  return mime.lookup(extWithoutDot);\n}\n\nfunction getExtension(contentType) {\n  const {\n    mime\n  } = _send.default;\n\n  if ('getExtension' in mime) {\n    // 2.0\n    return mime.getExtension(contentType);\n  } // 1.0\n\n\n  return mime.extension(contentType);\n}","map":{"version":3,"sources":["../../../next-server/server/serve-static.ts"],"names":["err","reject","send","mime"],"mappings":";;;;;;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,yBAAA,CAAA,CAAA;;;;;;AAEO;;AAAA,SAAA,WAAA,CAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAIU;AACf,SAAO,IAAA,OAAA,CAAY,CAAA,OAAA,EAAA,MAAA,KAAqB;AACtC,KAAA,GAAA,KAAA,CAAA,OAAA,EAAA,GAAA,EAAA,IAAA,EAAA,EAAA,CAAA,WAAA,EACmB,MAAM;AACrB;AACA,YAAMA,GAAQ,GAAG,IAAA,KAAA,CAAjB,qBAAiB,CAAjB;AACAA,MAAAA,GAAG,CAAHA,IAAAA,GAAAA,QAAAA;AACAC,MAAAA,MAAM,CAANA,GAAM,CAANA;AALJ,KAAA,EAAA,EAAA,CAAA,OAAA,EAAA,MAAA,EAAA,IAAA,CAAA,GAAA,EAAA,EAAA,CAAA,QAAA,EAAA,OAAA;AADF,GAAO,CAAP;AAcK;;AAAA,SAAA,cAAA,CAAA,aAAA,EAA8D;AACnE,QAAM;AAAA,IAAA;AAAA,MAAWC,KAAAA,CAAjB,OAAA;;AACA,MAAI,aAAJ,IAAA,EAAuB;AACrB;AACA,WAAOC,IAAI,CAAJA,OAAAA,CAAP,aAAOA,CAAP;AAEF,GANmE,CAMnE;;;AACA,SAAQA,IAAD,CAAA,MAACA,CAAR,aAAQA,CAAR;AAGK;;AAAA,SAAA,YAAA,CAAA,WAAA,EAA0D;AAC/D,QAAM;AAAA,IAAA;AAAA,MAAWD,KAAAA,CAAjB,OAAA;;AACA,MAAI,kBAAJ,IAAA,EAA4B;AAC1B;AACA,WAAOC,IAAI,CAAJA,YAAAA,CAAP,WAAOA,CAAP;AAEF,GAN+D,CAM/D;;;AACA,SAAQA,IAAD,CAAA,SAACA,CAAR,WAAQA,CAAR;AACD","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport send from 'next/dist/compiled/send'\n\nexport function serveStatic(\n  req: IncomingMessage,\n  res: ServerResponse,\n  path: string\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    send(req, path)\n      .on('directory', () => {\n        // We don't allow directories to be read.\n        const err: any = new Error('No directory access')\n        err.code = 'ENOENT'\n        reject(err)\n      })\n      .on('error', reject)\n      .pipe(res)\n      .on('finish', resolve)\n  })\n}\n\nexport function getContentType(extWithoutDot: string): string | null {\n  const { mime } = send\n  if ('getType' in mime) {\n    // 2.0\n    return mime.getType(extWithoutDot)\n  }\n  // 1.0\n  return (mime as any).lookup(extWithoutDot)\n}\n\nexport function getExtension(contentType: string): string | null {\n  const { mime } = send\n  if ('getExtension' in mime) {\n    // 2.0\n    return mime.getExtension(contentType)\n  }\n  // 1.0\n  return (mime as any).extension(contentType)\n}\n"]},"metadata":{},"sourceType":"script"}