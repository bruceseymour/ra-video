{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst pluginName = 'postcss-url-parser';\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction shouldHandleRule(rule, decl, result) {\n  // https://www.w3.org/TR/css-syntax-3/#typedef-url-token\n  if (rule.url.replace(/^[\\s]+|[\\s]+$/g, '').length === 0) {\n    result.warn(`Unable to find uri in '${decl.toString()}'`, {\n      node: decl\n    });\n    return false;\n  }\n\n  if (!(0, _utils.isUrlRequestable)(rule.url)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction walkCss(css, result, options, callback) {\n  const accumulator = [];\n  css.walkDecls(decl => {\n    if (!needParseDecl.test(decl.value)) {\n      return;\n    }\n\n    const parsed = (0, _postcssValueParser.default)(decl.value);\n    parsed.walk(node => {\n      if (node.type !== 'function') {\n        return;\n      }\n\n      if (isUrlFunc.test(node.value)) {\n        const {\n          nodes\n        } = node;\n        const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n        const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n        const rule = {\n          node: getNodeFromUrlFunc(node),\n          url,\n          needQuotes: false,\n          isStringValue\n        };\n\n        if (shouldHandleRule(rule, decl, result)) {\n          accumulator.push({\n            decl,\n            rule,\n            parsed\n          });\n        } // Do not traverse inside `url`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      } else if (isImageSetFunc.test(node.value)) {\n        for (const nNode of node.nodes) {\n          const {\n            type,\n            value\n          } = nNode;\n\n          if (type === 'function' && isUrlFunc.test(value)) {\n            const {\n              nodes\n            } = nNode;\n            const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n            const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n            const rule = {\n              node: getNodeFromUrlFunc(nNode),\n              url,\n              needQuotes: false,\n              isStringValue\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          } else if (type === 'string') {\n            const rule = {\n              node: nNode,\n              url: value,\n              needQuotes: true,\n              isStringValue: true\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          }\n        } // Do not traverse inside `image-set`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      }\n    });\n  });\n  callback(null, accumulator);\n}\n\nconst asyncWalkCss = (0, _util.promisify)(walkCss);\n\nvar _default = _postcss.default.plugin(pluginName, options => async (css, result) => {\n  const parsedResults = await asyncWalkCss(css, result, options);\n\n  if (parsedResults.length === 0) {\n    return Promise.resolve();\n  }\n\n  const tasks = [];\n  const imports = new Map();\n  const replacements = new Map();\n  let hasUrlImportHelper = false;\n\n  for (const parsedResult of parsedResults) {\n    const {\n      url,\n      isStringValue\n    } = parsedResult.rule;\n    let normalizedUrl = url;\n    let prefix = '';\n    const queryParts = normalizedUrl.split('!');\n\n    if (queryParts.length > 1) {\n      normalizedUrl = queryParts.pop();\n      prefix = queryParts.join('!');\n    }\n\n    normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue);\n\n    if (!options.filter(normalizedUrl)) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!hasUrlImportHelper) {\n      options.imports.push({\n        importName: '___CSS_LOADER_GET_URL_IMPORT___',\n        url: options.urlHandler(require.resolve('../runtime/getUrl.js')),\n        index: -1\n      });\n      hasUrlImportHelper = true;\n    }\n\n    const splittedUrl = normalizedUrl.split(/(\\?)?#/);\n    const [pathname, query, hashOrQuery] = splittedUrl;\n    let hash = query ? '?' : '';\n    hash += hashOrQuery ? `#${hashOrQuery}` : '';\n    const request = (0, _utils.requestify)(pathname, options.rootContext);\n    tasks.push((async () => {\n      const {\n        resolver,\n        context\n      } = options;\n      const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, normalizedUrl])]);\n      return {\n        url: resolvedUrl,\n        prefix,\n        hash,\n        parsedResult\n      };\n    })());\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      prefix,\n      hash,\n      parsedResult: {\n        decl,\n        rule,\n        parsed\n      }\n    } = results[index];\n    const newUrl = prefix ? `${prefix}!${url}` : url;\n    const importKey = newUrl;\n    let importName = imports.get(importKey);\n\n    if (!importName) {\n      importName = `___CSS_LOADER_URL_IMPORT_${imports.size}___`;\n      imports.set(importKey, importName);\n      options.imports.push({\n        importName,\n        url: options.urlHandler(newUrl),\n        index\n      });\n    }\n\n    const {\n      needQuotes\n    } = rule;\n    const replacementKey = JSON.stringify({\n      newUrl,\n      hash,\n      needQuotes\n    });\n    let replacementName = replacements.get(replacementKey);\n\n    if (!replacementName) {\n      replacementName = `___CSS_LOADER_URL_REPLACEMENT_${replacements.size}___`;\n      replacements.set(replacementKey, replacementName);\n      options.replacements.push({\n        replacementName,\n        importName,\n        hash,\n        needQuotes\n      });\n    } // eslint-disable-next-line no-param-reassign\n\n\n    rule.node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n    rule.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n    decl.value = parsed.toString();\n  }\n\n  return Promise.resolve();\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/next/node_modules/css-loader/dist/plugins/postcss-url-parser.js"],"names":["Object","defineProperty","exports","value","default","_util","require","_postcss","_interopRequireDefault","_postcssValueParser","_utils","obj","__esModule","pluginName","isUrlFunc","isImageSetFunc","needParseDecl","getNodeFromUrlFunc","node","nodes","shouldHandleRule","rule","decl","result","url","replace","length","warn","toString","isUrlRequestable","walkCss","css","options","callback","accumulator","walkDecls","test","parsed","walk","type","isStringValue","stringify","needQuotes","push","nNode","asyncWalkCss","promisify","_default","plugin","parsedResults","Promise","resolve","tasks","imports","Map","replacements","hasUrlImportHelper","parsedResult","normalizedUrl","prefix","queryParts","split","pop","join","normalizeUrl","filter","importName","urlHandler","index","splittedUrl","pathname","query","hashOrQuery","hash","request","requestify","rootContext","resolver","context","resolvedUrl","resolveRequests","Set","results","all","newUrl","importKey","get","size","set","replacementKey","JSON","replacementName"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pluginName = 'postcss-url-parser';\nconst isUrlFunc = /url/i;\nconst isImageSetFunc = /^(?:-webkit-)?image-set$/i;\nconst needParseDecl = /(?:url|(?:-webkit-)?image-set)\\(/i;\n\nfunction getNodeFromUrlFunc(node) {\n  return node.nodes && node.nodes[0];\n}\n\nfunction shouldHandleRule(rule, decl, result) {\n  // https://www.w3.org/TR/css-syntax-3/#typedef-url-token\n  if (rule.url.replace(/^[\\s]+|[\\s]+$/g, '').length === 0) {\n    result.warn(`Unable to find uri in '${decl.toString()}'`, {\n      node: decl\n    });\n    return false;\n  }\n\n  if (!(0, _utils.isUrlRequestable)(rule.url)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction walkCss(css, result, options, callback) {\n  const accumulator = [];\n  css.walkDecls(decl => {\n    if (!needParseDecl.test(decl.value)) {\n      return;\n    }\n\n    const parsed = (0, _postcssValueParser.default)(decl.value);\n    parsed.walk(node => {\n      if (node.type !== 'function') {\n        return;\n      }\n\n      if (isUrlFunc.test(node.value)) {\n        const {\n          nodes\n        } = node;\n        const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n        const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n        const rule = {\n          node: getNodeFromUrlFunc(node),\n          url,\n          needQuotes: false,\n          isStringValue\n        };\n\n        if (shouldHandleRule(rule, decl, result)) {\n          accumulator.push({\n            decl,\n            rule,\n            parsed\n          });\n        } // Do not traverse inside `url`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      } else if (isImageSetFunc.test(node.value)) {\n        for (const nNode of node.nodes) {\n          const {\n            type,\n            value\n          } = nNode;\n\n          if (type === 'function' && isUrlFunc.test(value)) {\n            const {\n              nodes\n            } = nNode;\n            const isStringValue = nodes.length !== 0 && nodes[0].type === 'string';\n            const url = isStringValue ? nodes[0].value : _postcssValueParser.default.stringify(nodes);\n            const rule = {\n              node: getNodeFromUrlFunc(nNode),\n              url,\n              needQuotes: false,\n              isStringValue\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          } else if (type === 'string') {\n            const rule = {\n              node: nNode,\n              url: value,\n              needQuotes: true,\n              isStringValue: true\n            };\n\n            if (shouldHandleRule(rule, decl, result)) {\n              accumulator.push({\n                decl,\n                rule,\n                parsed\n              });\n            }\n          }\n        } // Do not traverse inside `image-set`\n        // eslint-disable-next-line consistent-return\n\n\n        return false;\n      }\n    });\n  });\n  callback(null, accumulator);\n}\n\nconst asyncWalkCss = (0, _util.promisify)(walkCss);\n\nvar _default = _postcss.default.plugin(pluginName, options => async (css, result) => {\n  const parsedResults = await asyncWalkCss(css, result, options);\n\n  if (parsedResults.length === 0) {\n    return Promise.resolve();\n  }\n\n  const tasks = [];\n  const imports = new Map();\n  const replacements = new Map();\n  let hasUrlImportHelper = false;\n\n  for (const parsedResult of parsedResults) {\n    const {\n      url,\n      isStringValue\n    } = parsedResult.rule;\n    let normalizedUrl = url;\n    let prefix = '';\n    const queryParts = normalizedUrl.split('!');\n\n    if (queryParts.length > 1) {\n      normalizedUrl = queryParts.pop();\n      prefix = queryParts.join('!');\n    }\n\n    normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue);\n\n    if (!options.filter(normalizedUrl)) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!hasUrlImportHelper) {\n      options.imports.push({\n        importName: '___CSS_LOADER_GET_URL_IMPORT___',\n        url: options.urlHandler(require.resolve('../runtime/getUrl.js')),\n        index: -1\n      });\n      hasUrlImportHelper = true;\n    }\n\n    const splittedUrl = normalizedUrl.split(/(\\?)?#/);\n    const [pathname, query, hashOrQuery] = splittedUrl;\n    let hash = query ? '?' : '';\n    hash += hashOrQuery ? `#${hashOrQuery}` : '';\n    const request = (0, _utils.requestify)(pathname, options.rootContext);\n    tasks.push((async () => {\n      const {\n        resolver,\n        context\n      } = options;\n      const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, normalizedUrl])]);\n      return {\n        url: resolvedUrl,\n        prefix,\n        hash,\n        parsedResult\n      };\n    })());\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      prefix,\n      hash,\n      parsedResult: {\n        decl,\n        rule,\n        parsed\n      }\n    } = results[index];\n    const newUrl = prefix ? `${prefix}!${url}` : url;\n    const importKey = newUrl;\n    let importName = imports.get(importKey);\n\n    if (!importName) {\n      importName = `___CSS_LOADER_URL_IMPORT_${imports.size}___`;\n      imports.set(importKey, importName);\n      options.imports.push({\n        importName,\n        url: options.urlHandler(newUrl),\n        index\n      });\n    }\n\n    const {\n      needQuotes\n    } = rule;\n    const replacementKey = JSON.stringify({\n      newUrl,\n      hash,\n      needQuotes\n    });\n    let replacementName = replacements.get(replacementKey);\n\n    if (!replacementName) {\n      replacementName = `___CSS_LOADER_URL_REPLACEMENT_${replacements.size}___`;\n      replacements.set(replacementKey, replacementName);\n      options.replacements.push({\n        replacementName,\n        importName,\n        hash,\n        needQuotes\n      });\n    } // eslint-disable-next-line no-param-reassign\n\n\n    rule.node.type = 'word'; // eslint-disable-next-line no-param-reassign\n\n    rule.node.value = replacementName; // eslint-disable-next-line no-param-reassign\n\n    decl.value = parsed.toString();\n  }\n\n  return Promise.resolve();\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}