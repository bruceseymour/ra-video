{"ast":null,"code":"/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'mode strict';\n\nconst validatorRulesProvider = require('@ampproject/toolbox-validator-rules');\n\nconst {\n  MaxAge\n} = require('@ampproject/toolbox-core');\n\nconst {\n  AMP_CACHE_HOST,\n  AMP_RUNTIME_CSS_PATH,\n  AMP_VALIDATION_RULES_URL,\n  appendRuntimeVersion\n} = require('./AmpConstants.js');\n\nconst KEY_VALIDATOR_RULES = 'validator-rules';\nconst AMP_RUNTIME_MAX_AGE = 10 * 60; // 10 min\n\nconst cache = require('./cache.js');\n/**\n * Initializes the runtime parameters used by the transformers based on given config and parameter values.\n * If missing, the following parameters are fetched from cdn.ampproject.org:\n *\n * - validatorRules: the latest version of the AMP validator rules as served from https://cdn.ampproject.org/v0/validator.json\n * - ampRuntimeVersion: the latest AMP runtime version or the latest lts version if the lts flag is set\n * - ampRuntimeStyles: the latest AMP runtime CSS styles or the latest lts CSS styles if the lts flag is set\n *\n * @param {Object} config - the AMP Optimizer config\n * @param {Object} customRuntimeParameters - user defined runtime parameters\n * @returns {Promise<Object>} - the runtime parameters\n */\n\n\nasync function fetchRuntimeParameters(config, customRuntimeParameters = {}) {\n  const runtimeParameters = Object.assign({}, customRuntimeParameters); // Configure the log level\n\n  runtimeParameters.verbose = customRuntimeParameters.verbose || config.verbose || false; // Validation rules can be downloaded in parallel\n\n  const validationRulePromise = initValidatorRules(runtimeParameters, customRuntimeParameters, config);\n  await initRuntimeVersion(runtimeParameters, customRuntimeParameters, config); // Runtime Styles depend on the Runtime version\n\n  await initRuntimeStyles(runtimeParameters, config); // Make sure validation rules are downloaded\n\n  await validationRulePromise;\n  return runtimeParameters;\n}\n/**\n * Fetches the AMP validator rules if they're not provided.\n *\n * @private\n */\n\n\nasync function initValidatorRules(runtimeParameters, customRuntimeParameters, config) {\n  try {\n    runtimeParameters.validatorRules = customRuntimeParameters.validatorRules || config.validatorRules || (await fetchValidatorRulesFromCache_(config));\n  } catch (error) {\n    config.log.error('Could not fetch validator rules', error);\n  }\n}\n/**\n * @private\n */\n\n\nasync function fetchValidatorRulesFromCache_(config) {\n  if (config.cache === false) {\n    return fetchValidatorRules_(config);\n  }\n\n  let rawRules = await cache.get('validator-rules');\n  let validatorRules;\n\n  if (!rawRules) {\n    validatorRules = await fetchValidatorRules_(config);\n    config.log.debug('Downloaded AMP validation rules'); // We save the raw rules to make the validation rules JSON serializable\n\n    cache.set(KEY_VALIDATOR_RULES, validatorRules.raw);\n  } else {\n    validatorRules = await validatorRulesProvider.fetch({\n      rules: rawRules\n    });\n  }\n\n  return validatorRules;\n}\n\nasync function fetchValidatorRules_(config) {\n  const response = await config.fetch(AMP_VALIDATION_RULES_URL);\n\n  if (!response.ok) {\n    return null;\n  }\n\n  return validatorRulesProvider.fetch({\n    rules: await response.json()\n  });\n}\n/**\n * Fetch runtime styles based on the runtime version\n *\n * @private\n */\n\n\nasync function initRuntimeStyles(runtimeParameters, config) {\n  try {\n    runtimeParameters.ampRuntimeStyles = runtimeParameters.ampRuntimeStyles || (await fetchAmpRuntimeStyles_(config, runtimeParameters.ampUrlPrefix, runtimeParameters.ampRuntimeVersion));\n  } catch (error) {\n    config.log.error('Could not fetch AMP runtime CSS', error);\n  }\n}\n/**\n * Use provided runtime version or fetch latest (lts) version.\n *\n * @private\n */\n\n\nasync function initRuntimeVersion(runtimeParameters, customRuntimeParameters, config) {\n  // Copy lts and rtv runtime flag from custom parameters or the static config. Both are disabled by default.\n  runtimeParameters.lts = customRuntimeParameters.lts || config.lts || false;\n  runtimeParameters.rtv = customRuntimeParameters.rtv || config.rtv || false;\n  let {\n    ampUrlPrefix,\n    ampRuntimeVersion,\n    lts\n  } = runtimeParameters;\n\n  if (lts && ampRuntimeVersion) {\n    config.log.warn('`ampRuntimeVersion` and `lts` cannot be defined at the same time. Using LTS version.');\n    ampRuntimeVersion = '';\n  }\n\n  try {\n    runtimeParameters.ampRuntimeVersion = ampRuntimeVersion || (await fetchAmpRuntimeVersion_({\n      config,\n      ampUrlPrefix,\n      lts\n    }));\n  } catch (error) {\n    config.log.error('Could not fetch latest AMP runtime version', error);\n  }\n}\n/**\n * @private\n */\n\n\nasync function fetchAmpRuntimeVersion_(context) {\n  if (context.config.cache === false) {\n    return (await fetchLatestRuntimeData_(context)).version;\n  }\n\n  const versionKey = context.ampUrlPrefix + '-' + context.lts;\n  let ampRuntimeData = await cache.get(versionKey);\n\n  if (!ampRuntimeData) {\n    ampRuntimeData = await fetchLatestRuntimeData_(context, versionKey);\n    context.config.log.debug('Downloaded AMP runtime v' + ampRuntimeData.version);\n  } else if (MaxAge.fromObject(ampRuntimeData.maxAge).isExpired()) {\n    // return the cached version, but update the cache in the background\n    fetchLatestRuntimeData_(versionKey, context);\n  }\n\n  return ampRuntimeData.version;\n}\n/**\n * @private\n */\n\n\nasync function fetchLatestRuntimeData_({\n  config,\n  ampUrlPrefix,\n  lts\n}, versionKey = null) {\n  let ampRuntimeData;\n  ampRuntimeData = {\n    version: await config.runtimeVersion.currentVersion({\n      ampUrlPrefix,\n      lts\n    }),\n    maxAge: MaxAge.create(AMP_RUNTIME_MAX_AGE).toObject()\n  };\n\n  if (!ampRuntimeData.version && ampUrlPrefix !== AMP_CACHE_HOST) {\n    config.log.error(`Could not download runtime version from ${ampUrlPrefix}. Falling back to ${AMP_CACHE_HOST}`);\n    ampRuntimeData = await fetchLatestRuntimeData_({\n      config,\n      ampUrlPrefix: AMP_CACHE_HOST,\n      lts\n    }, versionKey);\n  } else if (ampRuntimeData.version && versionKey) {\n    cache.set(versionKey, ampRuntimeData);\n  }\n\n  return ampRuntimeData;\n}\n/**\n * @private\n */\n\n\nasync function fetchAmpRuntimeStyles_(config, ampUrlPrefix, ampRuntimeVersion) {\n  if (ampUrlPrefix && !isAbsoluteUrl_(ampUrlPrefix)) {\n    config.log.warn(`AMP runtime styles cannot be fetched from relative ampUrlPrefix, please use the 'ampRuntimeStyles' parameter to provide the correct runtime style. Falling back to latest v0.css on ${AMP_CACHE_HOST}`); // Gracefully fallback to latest runtime version\n\n    ampUrlPrefix = AMP_CACHE_HOST;\n    ampRuntimeVersion = ampRuntimeVersion || (await config.runtimeVersion.currentVersion());\n  } // Construct the AMP runtime CSS download URL, the default is: https://cdn.ampproject.org/rtv/${ampRuntimeVersion}/v0.css\n\n\n  const runtimeCssUrl = appendRuntimeVersion(ampUrlPrefix || AMP_CACHE_HOST, ampRuntimeVersion) + AMP_RUNTIME_CSS_PATH; // Fetch runtime styles\n\n  const styles = await downloadAmpRuntimeStyles_(config, runtimeCssUrl);\n\n  if (!styles) {\n    config.log.error(`Could not download ${runtimeCssUrl}. Falling back to latest v0.css.`);\n\n    if (ampUrlPrefix || ampRuntimeVersion) {\n      // Try to download latest from cdn.ampproject.org instead\n      return fetchAmpRuntimeStyles_(config, AMP_CACHE_HOST, await config.runtimeVersion.currentVersion());\n    } else {\n      return '';\n    }\n  }\n\n  return styles;\n}\n/**\n * @private\n */\n\n\nasync function downloadAmpRuntimeStyles_(config, runtimeCssUrl) {\n  let styles;\n\n  if (config.cache !== false) {\n    styles = await cache.get(runtimeCssUrl);\n  }\n\n  if (!styles) {\n    const response = await config.fetch(runtimeCssUrl);\n\n    if (!response.ok) {\n      return null;\n    }\n\n    styles = await response.text(); // HACK: patch v0.css to support transforming amp-img -> img\n    // TODO remove once v0.css has been updated\n\n    if (!styles.includes('i-amphtml-ssr')) {\n      styles += `amp-img[i-amphtml-ssr]:not(.i-amphtml-element):not([layout=container])>*{display: block;}`;\n    }\n\n    config.log.debug(`Downloaded AMP runtime styles from ${runtimeCssUrl}`);\n\n    if (config.cache !== false) {\n      cache.set(runtimeCssUrl, styles);\n    }\n  }\n\n  return styles;\n}\n/**\n * @private\n */\n\n\nfunction isAbsoluteUrl_(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n}\n\nmodule.exports = fetchRuntimeParameters;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/fetchRuntimeParameters.js"],"names":["validatorRulesProvider","require","MaxAge","AMP_CACHE_HOST","AMP_RUNTIME_CSS_PATH","AMP_VALIDATION_RULES_URL","appendRuntimeVersion","KEY_VALIDATOR_RULES","AMP_RUNTIME_MAX_AGE","cache","fetchRuntimeParameters","config","customRuntimeParameters","runtimeParameters","Object","assign","verbose","validationRulePromise","initValidatorRules","initRuntimeVersion","initRuntimeStyles","validatorRules","fetchValidatorRulesFromCache_","error","log","fetchValidatorRules_","rawRules","get","debug","set","raw","fetch","rules","response","ok","json","ampRuntimeStyles","fetchAmpRuntimeStyles_","ampUrlPrefix","ampRuntimeVersion","lts","rtv","warn","fetchAmpRuntimeVersion_","context","fetchLatestRuntimeData_","version","versionKey","ampRuntimeData","fromObject","maxAge","isExpired","runtimeVersion","currentVersion","create","toObject","isAbsoluteUrl_","runtimeCssUrl","styles","downloadAmpRuntimeStyles_","text","includes","url","URL","ex","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'mode strict';\n\nconst validatorRulesProvider = require('@ampproject/toolbox-validator-rules');\nconst {MaxAge} = require('@ampproject/toolbox-core');\nconst {\n  AMP_CACHE_HOST,\n  AMP_RUNTIME_CSS_PATH,\n  AMP_VALIDATION_RULES_URL,\n  appendRuntimeVersion,\n} = require('./AmpConstants.js');\n\nconst KEY_VALIDATOR_RULES = 'validator-rules';\nconst AMP_RUNTIME_MAX_AGE = 10 * 60; // 10 min\nconst cache = require('./cache.js');\n\n/**\n * Initializes the runtime parameters used by the transformers based on given config and parameter values.\n * If missing, the following parameters are fetched from cdn.ampproject.org:\n *\n * - validatorRules: the latest version of the AMP validator rules as served from https://cdn.ampproject.org/v0/validator.json\n * - ampRuntimeVersion: the latest AMP runtime version or the latest lts version if the lts flag is set\n * - ampRuntimeStyles: the latest AMP runtime CSS styles or the latest lts CSS styles if the lts flag is set\n *\n * @param {Object} config - the AMP Optimizer config\n * @param {Object} customRuntimeParameters - user defined runtime parameters\n * @returns {Promise<Object>} - the runtime parameters\n */\nasync function fetchRuntimeParameters(config, customRuntimeParameters = {}) {\n  const runtimeParameters = Object.assign({}, customRuntimeParameters);\n  // Configure the log level\n  runtimeParameters.verbose = customRuntimeParameters.verbose || config.verbose || false;\n  // Validation rules can be downloaded in parallel\n  const validationRulePromise = initValidatorRules(\n    runtimeParameters,\n    customRuntimeParameters,\n    config\n  );\n  await initRuntimeVersion(runtimeParameters, customRuntimeParameters, config);\n  // Runtime Styles depend on the Runtime version\n  await initRuntimeStyles(runtimeParameters, config);\n  // Make sure validation rules are downloaded\n  await validationRulePromise;\n  return runtimeParameters;\n}\n\n/**\n * Fetches the AMP validator rules if they're not provided.\n *\n * @private\n */\nasync function initValidatorRules(runtimeParameters, customRuntimeParameters, config) {\n  try {\n    runtimeParameters.validatorRules =\n      customRuntimeParameters.validatorRules ||\n      config.validatorRules ||\n      (await fetchValidatorRulesFromCache_(config));\n  } catch (error) {\n    config.log.error('Could not fetch validator rules', error);\n  }\n}\n\n/**\n * @private\n */\nasync function fetchValidatorRulesFromCache_(config) {\n  if (config.cache === false) {\n    return fetchValidatorRules_(config);\n  }\n  let rawRules = await cache.get('validator-rules');\n  let validatorRules;\n  if (!rawRules) {\n    validatorRules = await fetchValidatorRules_(config);\n    config.log.debug('Downloaded AMP validation rules');\n    // We save the raw rules to make the validation rules JSON serializable\n    cache.set(KEY_VALIDATOR_RULES, validatorRules.raw);\n  } else {\n    validatorRules = await validatorRulesProvider.fetch({rules: rawRules});\n  }\n  return validatorRules;\n}\n\nasync function fetchValidatorRules_(config) {\n  const response = await config.fetch(AMP_VALIDATION_RULES_URL);\n  if (!response.ok) {\n    return null;\n  }\n  return validatorRulesProvider.fetch({rules: await response.json()});\n}\n\n/**\n * Fetch runtime styles based on the runtime version\n *\n * @private\n */\nasync function initRuntimeStyles(runtimeParameters, config) {\n  try {\n    runtimeParameters.ampRuntimeStyles =\n      runtimeParameters.ampRuntimeStyles ||\n      (await fetchAmpRuntimeStyles_(\n        config,\n        runtimeParameters.ampUrlPrefix,\n        runtimeParameters.ampRuntimeVersion\n      ));\n  } catch (error) {\n    config.log.error('Could not fetch AMP runtime CSS', error);\n  }\n}\n\n/**\n * Use provided runtime version or fetch latest (lts) version.\n *\n * @private\n */\nasync function initRuntimeVersion(runtimeParameters, customRuntimeParameters, config) {\n  // Copy lts and rtv runtime flag from custom parameters or the static config. Both are disabled by default.\n  runtimeParameters.lts = customRuntimeParameters.lts || config.lts || false;\n  runtimeParameters.rtv = customRuntimeParameters.rtv || config.rtv || false;\n  let {ampUrlPrefix, ampRuntimeVersion, lts} = runtimeParameters;\n  if (lts && ampRuntimeVersion) {\n    config.log.warn(\n      '`ampRuntimeVersion` and `lts` cannot be defined at the same time. Using LTS version.'\n    );\n    ampRuntimeVersion = '';\n  }\n  try {\n    runtimeParameters.ampRuntimeVersion =\n      ampRuntimeVersion || (await fetchAmpRuntimeVersion_({config, ampUrlPrefix, lts}));\n  } catch (error) {\n    config.log.error('Could not fetch latest AMP runtime version', error);\n  }\n}\n\n/**\n * @private\n */\nasync function fetchAmpRuntimeVersion_(context) {\n  if (context.config.cache === false) {\n    return (await fetchLatestRuntimeData_(context)).version;\n  }\n  const versionKey = context.ampUrlPrefix + '-' + context.lts;\n  let ampRuntimeData = await cache.get(versionKey);\n  if (!ampRuntimeData) {\n    ampRuntimeData = await fetchLatestRuntimeData_(context, versionKey);\n    context.config.log.debug('Downloaded AMP runtime v' + ampRuntimeData.version);\n  } else if (MaxAge.fromObject(ampRuntimeData.maxAge).isExpired()) {\n    // return the cached version, but update the cache in the background\n    fetchLatestRuntimeData_(versionKey, context);\n  }\n  return ampRuntimeData.version;\n}\n\n/**\n * @private\n */\nasync function fetchLatestRuntimeData_({config, ampUrlPrefix, lts}, versionKey = null) {\n  let ampRuntimeData;\n  ampRuntimeData = {\n    version: await config.runtimeVersion.currentVersion({ampUrlPrefix, lts}),\n    maxAge: MaxAge.create(AMP_RUNTIME_MAX_AGE).toObject(),\n  };\n  if (!ampRuntimeData.version && ampUrlPrefix !== AMP_CACHE_HOST) {\n    config.log.error(\n      `Could not download runtime version from ${ampUrlPrefix}. Falling back to ${AMP_CACHE_HOST}`\n    );\n    ampRuntimeData = await fetchLatestRuntimeData_(\n      {config, ampUrlPrefix: AMP_CACHE_HOST, lts},\n      versionKey\n    );\n  } else if (ampRuntimeData.version && versionKey) {\n    cache.set(versionKey, ampRuntimeData);\n  }\n  return ampRuntimeData;\n}\n\n/**\n * @private\n */\nasync function fetchAmpRuntimeStyles_(config, ampUrlPrefix, ampRuntimeVersion) {\n  if (ampUrlPrefix && !isAbsoluteUrl_(ampUrlPrefix)) {\n    config.log.warn(\n      `AMP runtime styles cannot be fetched from relative ampUrlPrefix, please use the 'ampRuntimeStyles' parameter to provide the correct runtime style. Falling back to latest v0.css on ${AMP_CACHE_HOST}`\n    );\n    // Gracefully fallback to latest runtime version\n    ampUrlPrefix = AMP_CACHE_HOST;\n    ampRuntimeVersion = ampRuntimeVersion || (await config.runtimeVersion.currentVersion());\n  }\n  // Construct the AMP runtime CSS download URL, the default is: https://cdn.ampproject.org/rtv/${ampRuntimeVersion}/v0.css\n  const runtimeCssUrl =\n    appendRuntimeVersion(ampUrlPrefix || AMP_CACHE_HOST, ampRuntimeVersion) + AMP_RUNTIME_CSS_PATH;\n  // Fetch runtime styles\n  const styles = await downloadAmpRuntimeStyles_(config, runtimeCssUrl);\n  if (!styles) {\n    config.log.error(`Could not download ${runtimeCssUrl}. Falling back to latest v0.css.`);\n    if (ampUrlPrefix || ampRuntimeVersion) {\n      // Try to download latest from cdn.ampproject.org instead\n      return fetchAmpRuntimeStyles_(\n        config,\n        AMP_CACHE_HOST,\n        await config.runtimeVersion.currentVersion()\n      );\n    } else {\n      return '';\n    }\n  }\n  return styles;\n}\n\n/**\n * @private\n */\nasync function downloadAmpRuntimeStyles_(config, runtimeCssUrl) {\n  let styles;\n  if (config.cache !== false) {\n    styles = await cache.get(runtimeCssUrl);\n  }\n  if (!styles) {\n    const response = await config.fetch(runtimeCssUrl);\n    if (!response.ok) {\n      return null;\n    }\n    styles = await response.text();\n    // HACK: patch v0.css to support transforming amp-img -> img\n    // TODO remove once v0.css has been updated\n    if (!styles.includes('i-amphtml-ssr')) {\n      styles += `amp-img[i-amphtml-ssr]:not(.i-amphtml-element):not([layout=container])>*{display: block;}`;\n    }\n    config.log.debug(`Downloaded AMP runtime styles from ${runtimeCssUrl}`);\n    if (config.cache !== false) {\n      cache.set(runtimeCssUrl, styles);\n    }\n  }\n  return styles;\n}\n\n/**\n * @private\n */\nfunction isAbsoluteUrl_(url) {\n  try {\n    new URL(url);\n    return true;\n  } catch (ex) {\n    return false;\n  }\n}\n\nmodule.exports = fetchRuntimeParameters;\n"]},"metadata":{},"sourceType":"script"}