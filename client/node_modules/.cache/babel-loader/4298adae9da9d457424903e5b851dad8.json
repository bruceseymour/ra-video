{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _icssUtils = require(\"icss-utils\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar _default = _postcss.default.plugin('postcss-icss-parser', options => async css => {\n  const importReplacements = Object.create(null);\n  const {\n    icssImports,\n    icssExports\n  } = (0, _icssUtils.extractICSS)(css);\n  const imports = new Map();\n  const tasks = []; // eslint-disable-next-line guard-for-in\n\n  for (const url in icssImports) {\n    const tokens = icssImports[url];\n\n    if (Object.keys(tokens).length === 0) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    let normalizedUrl = url;\n    let prefix = '';\n    const queryParts = normalizedUrl.split('!');\n\n    if (queryParts.length > 1) {\n      normalizedUrl = queryParts.pop();\n      prefix = queryParts.join('!');\n    }\n\n    const request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), options.rootContext);\n\n    const doResolve = async () => {\n      const {\n        resolver,\n        context\n      } = options;\n      const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([normalizedUrl, request])]);\n      return {\n        url: resolvedUrl,\n        prefix,\n        tokens\n      };\n    };\n\n    tasks.push(doResolve());\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      prefix,\n      tokens\n    } = results[index];\n    const newUrl = prefix ? `${prefix}!${url}` : url;\n    const importKey = newUrl;\n    let importName = imports.get(importKey);\n\n    if (!importName) {\n      importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;\n      imports.set(importKey, importName);\n      options.imports.push({\n        importName,\n        url: options.urlHandler(newUrl),\n        icss: true,\n        index\n      });\n      options.api.push({\n        importName,\n        dedupe: true,\n        index\n      });\n    }\n\n    for (const [replacementIndex, token] of Object.keys(tokens).entries()) {\n      const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;\n      const localName = tokens[token];\n      importReplacements[token] = replacementName;\n      options.replacements.push({\n        replacementName,\n        importName,\n        localName\n      });\n    }\n  }\n\n  if (Object.keys(importReplacements).length > 0) {\n    (0, _icssUtils.replaceSymbols)(css, importReplacements);\n  }\n\n  for (const name of Object.keys(icssExports)) {\n    const value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);\n    options.exports.push({\n      name,\n      value\n    });\n  }\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/next/node_modules/css-loader/dist/plugins/postcss-icss-parser.js"],"names":["Object","defineProperty","exports","value","default","_postcss","_interopRequireDefault","require","_icssUtils","_utils","obj","__esModule","_default","plugin","options","css","importReplacements","create","icssImports","icssExports","extractICSS","imports","Map","tasks","url","tokens","keys","length","normalizedUrl","prefix","queryParts","split","pop","join","request","requestify","normalizeUrl","rootContext","doResolve","resolver","context","resolvedUrl","resolveRequests","Set","push","results","Promise","all","index","newUrl","importKey","importName","get","size","set","urlHandler","icss","api","dedupe","replacementIndex","token","entries","replacementName","localName","replacements","replaceSymbols","name","replaceValueSymbols"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _icssUtils = require(\"icss-utils\");\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar _default = _postcss.default.plugin('postcss-icss-parser', options => async css => {\n  const importReplacements = Object.create(null);\n  const {\n    icssImports,\n    icssExports\n  } = (0, _icssUtils.extractICSS)(css);\n  const imports = new Map();\n  const tasks = []; // eslint-disable-next-line guard-for-in\n\n  for (const url in icssImports) {\n    const tokens = icssImports[url];\n\n    if (Object.keys(tokens).length === 0) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    let normalizedUrl = url;\n    let prefix = '';\n    const queryParts = normalizedUrl.split('!');\n\n    if (queryParts.length > 1) {\n      normalizedUrl = queryParts.pop();\n      prefix = queryParts.join('!');\n    }\n\n    const request = (0, _utils.requestify)((0, _utils.normalizeUrl)(normalizedUrl, true), options.rootContext);\n\n    const doResolve = async () => {\n      const {\n        resolver,\n        context\n      } = options;\n      const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([normalizedUrl, request])]);\n      return {\n        url: resolvedUrl,\n        prefix,\n        tokens\n      };\n    };\n\n    tasks.push(doResolve());\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      prefix,\n      tokens\n    } = results[index];\n    const newUrl = prefix ? `${prefix}!${url}` : url;\n    const importKey = newUrl;\n    let importName = imports.get(importKey);\n\n    if (!importName) {\n      importName = `___CSS_LOADER_ICSS_IMPORT_${imports.size}___`;\n      imports.set(importKey, importName);\n      options.imports.push({\n        importName,\n        url: options.urlHandler(newUrl),\n        icss: true,\n        index\n      });\n      options.api.push({\n        importName,\n        dedupe: true,\n        index\n      });\n    }\n\n    for (const [replacementIndex, token] of Object.keys(tokens).entries()) {\n      const replacementName = `___CSS_LOADER_ICSS_IMPORT_${index}_REPLACEMENT_${replacementIndex}___`;\n      const localName = tokens[token];\n      importReplacements[token] = replacementName;\n      options.replacements.push({\n        replacementName,\n        importName,\n        localName\n      });\n    }\n  }\n\n  if (Object.keys(importReplacements).length > 0) {\n    (0, _icssUtils.replaceSymbols)(css, importReplacements);\n  }\n\n  for (const name of Object.keys(icssExports)) {\n    const value = (0, _icssUtils.replaceValueSymbols)(icssExports[name], importReplacements);\n    options.exports.push({\n      name,\n      value\n    });\n  }\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}