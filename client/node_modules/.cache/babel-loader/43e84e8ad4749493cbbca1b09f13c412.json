{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.resolveRequest = resolveRequest;\n\nvar _index = _interopRequireDefault(require(\"next/dist/compiled/resolve/index.js\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction resolveRequest(req, issuer) {\n  // The `resolve` package is prebuilt through ncc, which prevents\n  // PnP from being able to inject itself into it. To circumvent\n  // this, we simply use PnP directly when available.\n  if (process.versions.pnp) {\n    const {\n      resolveRequest: pnpResolveRequest\n    } = require(`pnpapi`);\n\n    return pnpResolveRequest(req, issuer, {\n      considerBuiltins: false\n    });\n  } else {\n    const basedir = issuer.endsWith(_path.default.posix.sep) || issuer.endsWith(_path.default.win32.sep) ? issuer : _path.default.dirname(issuer);\n    return _index.default.sync(req, {\n      basedir\n    });\n  }\n}","map":{"version":3,"sources":["../../lib/resolve-request.ts"],"names":["process","resolveRequest","require","pnpResolveRequest","considerBuiltins","basedir","issuer","path","resolve"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,qCAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;;;;;AAEO;;AAAA,SAAA,cAAA,CAAA,GAAA,EAAA,MAAA,EAA6D;AAClE;AACA;AACA;AACA,MAAIA,OAAO,CAAPA,QAAAA,CAAJ,GAAA,EAA0B;AACxB,UAAM;AAAEC,MAAAA,cAAc,EAAhB;AAAA,QAAwCC,OAAO,CAArD,QAAqD,CAArD;;AACA,WAAOC,iBAAiB,CAAA,GAAA,EAAA,MAAA,EAAc;AAAEC,MAAAA,gBAAgB,EAAxD;AAAsC,KAAd,CAAxB;AAFF,GAAA,MAGO;AACL,UAAMC,OAAO,GACXC,MAAM,CAANA,QAAAA,CAAgBC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAhBD,GAAAA,KAAmCA,MAAM,CAANA,QAAAA,CAAgBC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAnDD,GAAmCA,CAAnCA,GAAAA,MAAAA,GAEIC,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAHN,MAGMA,CAHN;AAIA,WAAOC,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAkB;AAAzB,MAAA;AAAyB,KAAlBA,CAAP;AAEH;AAAA","sourcesContent":["import resolve from 'next/dist/compiled/resolve/index.js'\nimport path from 'path'\n\nexport function resolveRequest(req: string, issuer: string): string {\n  // The `resolve` package is prebuilt through ncc, which prevents\n  // PnP from being able to inject itself into it. To circumvent\n  // this, we simply use PnP directly when available.\n  if (process.versions.pnp) {\n    const { resolveRequest: pnpResolveRequest } = require(`pnpapi`)\n    return pnpResolveRequest(req, issuer, { considerBuiltins: false })\n  } else {\n    const basedir =\n      issuer.endsWith(path.posix.sep) || issuer.endsWith(path.win32.sep)\n        ? issuer\n        : path.dirname(issuer)\n    return resolve.sync(req, { basedir })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}