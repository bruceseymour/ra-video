{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.normalizePagePath = normalizePagePath;\nexports.denormalizePagePath = exports.normalizePathSep = void 0;\n\nvar _path = require(\"path\");\n\nvar _denormalizePagePath = require(\"./denormalize-page-path\");\n\nexports.normalizePathSep = _denormalizePagePath.normalizePathSep;\nexports.denormalizePagePath = _denormalizePagePath.denormalizePagePath;\n\nfunction normalizePagePath(page) {\n  // If the page is `/` we need to append `/index`, otherwise the returned directory root will be bundles instead of pages\n  if (page === '/') {\n    page = '/index';\n  } else if (/^\\/index(\\/|$)/.test(page)) {\n    page = `/index${page}`;\n  } // Resolve on anything that doesn't start with `/`\n\n\n  if (!page.startsWith('/')) {\n    page = `/${page}`;\n  } // Throw when using ../ etc in the pathname\n\n\n  const resolvedPage = _path.posix.normalize(page);\n\n  if (page !== resolvedPage) {\n    throw new Error(`Requested and resolved page mismatch: ${page} ${resolvedPage}`);\n  }\n\n  return page;\n}","map":{"version":3,"sources":["../../../next-server/server/normalize-page-path.ts"],"names":["page","resolvedPage","posix"],"mappings":";;;;;;AAAA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AAEA,IAAA,oBAAA,GAAA,OAAA,CAAA,yBAAA,CAAA;;;;;AAEO,SAAA,iBAAA,CAAA,IAAA,EAAiD;AACtD;AACA,MAAIA,IAAI,KAAR,GAAA,EAAkB;AAChBA,IAAAA,IAAI,GAAJA,QAAAA;AADF,GAAA,MAEO,IAAI,iBAAA,IAAA,CAAJ,IAAI,CAAJ,EAAiC;AACtCA,IAAAA,IAAI,GAAI,SAAQA,IAAhBA,EAAAA;AAEF,GAPsD,CAOtD;;;AACA,MAAI,CAACA,IAAI,CAAJA,UAAAA,CAAL,GAAKA,CAAL,EAA2B;AACzBA,IAAAA,IAAI,GAAI,IAAGA,IAAXA,EAAAA;AAEF,GAXsD,CAWtD;;;AACA,QAAMC,YAAY,GAAGC,KAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CAArB,IAAqBA,CAArB;;AACA,MAAIF,IAAI,KAAR,YAAA,EAA2B;AACzB,UAAM,IAAA,KAAA,CACH,yCAAwCA,IAAK,IAAGC,YADnD,EAAM,CAAN;AAIF;;AAAA,SAAA,IAAA;AACD","sourcesContent":["import { posix } from 'path'\n\nexport { normalizePathSep, denormalizePagePath } from './denormalize-page-path'\n\nexport function normalizePagePath(page: string): string {\n  // If the page is `/` we need to append `/index`, otherwise the returned directory root will be bundles instead of pages\n  if (page === '/') {\n    page = '/index'\n  } else if (/^\\/index(\\/|$)/.test(page)) {\n    page = `/index${page}`\n  }\n  // Resolve on anything that doesn't start with `/`\n  if (!page.startsWith('/')) {\n    page = `/${page}`\n  }\n  // Throw when using ../ etc in the pathname\n  const resolvedPage = posix.normalize(page)\n  if (page !== resolvedPage) {\n    throw new Error(\n      `Requested and resolved page mismatch: ${page} ${resolvedPage}`\n    )\n  }\n  return page\n}\n"]},"metadata":{},"sourceType":"script"}