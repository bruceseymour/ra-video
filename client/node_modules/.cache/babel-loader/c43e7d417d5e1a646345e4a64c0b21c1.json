{"ast":null,"code":"/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst parseSizes = require('../parseSizes');\n\nconst {\n  appendChild,\n  createElement,\n  insertText,\n  hasAttribute\n} = require('../NodeUtils');\n\nconst {\n  isCustomElement\n} = require('../Extensions.js');\n\nconst ID_PREFIX = 'i-amp-';\n/**\n * Transforms a media attribute into CSS by negating the existing media query.\n */\n\nclass MediaTransformer {\n  constructor() {\n    this.media = new Map();\n  }\n\n  transform(node, id) {\n    // normalize whitespace\n    let mediaString = node.attribs.media.replace(/\\s+/g, ' ');\n    mediaString = mediaString.trim();\n\n    if (!mediaString) {\n      return false;\n    }\n\n    if (mediaString[0] === '(') {\n      mediaString = `all and ${mediaString}`;\n    }\n\n    if (mediaString.startsWith('not ')) {\n      mediaString = mediaString.substring(4);\n    } else {\n      mediaString = `not ${mediaString}`;\n    }\n\n    this.addMedia(mediaString, `#${id}`);\n    return true;\n  }\n\n  addMedia(mediaQuery, id) {\n    let ids = this.media.get(mediaQuery);\n\n    if (!ids) {\n      ids = [];\n      this.media.set(mediaQuery, ids);\n    }\n\n    ids.push(id);\n  }\n\n  toString() {\n    let result = '';\n\n    for (const [media, selectors] of this.media.entries()) {\n      result += `@media ${media}{${selectors.join(',')}{display:none}}`;\n    }\n\n    return result;\n  }\n\n}\n/**\n * Transforms a sizes attribute into CSS by creating media queries for each size.\n */\n\n\nclass SizesTransformer {\n  constructor() {\n    this.sizes = [];\n  }\n\n  transform(node, id) {\n    if (!node.attribs.srcset) {\n      // According to the Mozilla docs, a sizes attribute without a valid srcset attribute should have no effect.\n      // Therefore, it should simply be stripped, without producing media queries.\n      // @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes\n      return false;\n    }\n\n    const sizes = parseSizes(node.attribs.sizes);\n\n    if (!sizes.defaultValue) {\n      // remove the sizes attribute as it's invalid anyway\n      return false;\n    }\n\n    this.addSizes(id, sizes);\n    return true;\n  }\n\n  addSizes(id, sizes) {\n    this.sizes.push({\n      id,\n      defaultSize: sizes.defaultValue,\n      // The user agent will pick a width from the sizes attribute, using the first item with a <media-condition> (the part in parentheses) that evaluates to true.\n      // This means, we have to reverse the order the media queries in CSS to emulate this behavior (the last definition has precedence).\n      sizes: sizes.values.reverse()\n    });\n  }\n\n  toString() {\n    let result = '';\n\n    for (const {\n      sizes,\n      defaultSize,\n      id\n    } of this.sizes) {\n      const selector = `#${id}`;\n      result += `${selector}{width:${defaultSize}}`;\n\n      for (const size of sizes) {\n        result += `@media ${size.media}{${selector}{width:${size.size}}}`;\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * Transforms a heights attribute into CSS by creating media queries for each height.\n */\n\n\nclass HeightsTransformer {\n  constructor() {\n    this.heights = [];\n  }\n\n  transform(node, id) {\n    const heights = parseSizes(node.attribs.heights);\n\n    if (!heights.defaultValue) {\n      // remove the sizes attribute as it's invalid anyway\n      return false;\n    }\n\n    this.addHeights(id, heights);\n    return true;\n  }\n\n  addHeights(id, heights) {\n    this.heights.push({\n      id,\n      defaultHeight: heights.defaultValue,\n      // The user agent will pick a width from the sizes attribute, using the first item with a <media-condition> (the part in parentheses) that evaluates to true.\n      // This means, we have to reverse the order the media queries in CSS to emulate this behavior (the last definition has precedence).\n      heights: heights.values.reverse()\n    });\n  }\n\n  toString() {\n    let result = '';\n\n    for (const {\n      heights,\n      defaultHeight,\n      id\n    } of this.heights) {\n      const selector = `#${id}>:first-child`;\n      result += `${selector}{padding-top:${defaultHeight}}`;\n\n      for (const height of heights) {\n        result += `@media ${height.media}{${selector}{padding-top:${height.size}}}`;\n      }\n    }\n\n    return result;\n  }\n\n}\n/**\n * Stateful attribute transformer. Can only be invoked once per page.\n */\n\n\nclass ApplyCommonAttributes {\n  constructor(log) {\n    this.log = log;\n    this.canRemoveBoilerplate = true; // node counter for id generation\n\n    this.counter = 0; // nodes to check for attributes\n\n    this.nodesToTransform = []; // existing ids in the document\n\n    this.ids = new Set(); // nodes that have been transformed\n\n    this.transformedNodes = [];\n    this.attributeTransformations = {\n      media: new MediaTransformer(),\n      sizes: new SizesTransformer(),\n      heights: new HeightsTransformer()\n    };\n  }\n  /**\n   * Adds a body node to potentially be transformed later.\n   *\n   * @param {Node} node\n   */\n\n\n  addNode(node) {\n    if (!node.attribs) {\n      return;\n    } // Record the id to be able to generate ids later\n\n\n    if (hasAttribute(node, 'id')) {\n      this.ids.add(node.attribs.id);\n    }\n\n    if (isCustomElement(node)) {\n      this.nodesToTransform.push(node);\n    }\n  }\n  /**\n   * Applies attribute transformations to the selected node.\n   */\n\n\n  apply() {\n    for (const node of this.nodesToTransform) {\n      for (const [attribute, transformer] of Object.entries(this.attributeTransformations)) {\n        if (hasAttribute(node, attribute)) {\n          try {\n            const id = this.getOrCreateId(node);\n            const nodeHasBeenTransformed = transformer.transform(node, id);\n            this.transformedNodes.push(node);\n\n            if (nodeHasBeenTransformed && !node.attribs.id) {\n              // Only update id if it's needed...\n              node.attribs.id = id;\n            } else {\n              // Decrease counter otherwise\n              this.counter--;\n            }\n          } catch (e) {\n            this.log.debug(`Cannot remove boilerplate. Failed transforming ${attribute}=\"${node.attribs[attribute]}\".`, e);\n            this.canRemoveBoilerplate = false;\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Inject custom CSS resulting for attribute transformation.\n   *\n   * @param {Node} head - the head for injecting a styles node if none exists yet\n   * @param {Node|undefined} customStyles - optional existing styles node\n   */\n\n\n  applyToCustomStyles(head, customStyles) {\n    const styles = Object.values(this.attributeTransformations).join('');\n\n    if (!styles) {\n      return;\n    }\n\n    if (!customStyles) {\n      customStyles = createElement('style', {\n        'amp-custom': ''\n      });\n      appendChild(head, customStyles);\n    }\n\n    if (customStyles.children.length === 0) {\n      insertText(customStyles, '');\n    }\n\n    customStyles.children[0].data += styles;\n\n    for (const node of this.transformedNodes) {\n      for (const attribute of Object.keys(this.attributeTransformations)) {\n        delete node.attribs[attribute];\n      }\n    }\n  }\n  /**\n   * Returns an existing id or generates a new one.\n   *\n   * @param {Node} node\n   */\n\n\n  getOrCreateId(node) {\n    if (hasAttribute(node, 'id')) {\n      return node.attribs.id;\n    }\n\n    node.attribs = node.attribs || [];\n    const id = ID_PREFIX + this.counter;\n    this.counter++;\n\n    if (this.ids.has(id)) {\n      // generate a new id if this one already exists\n      return this.getOrCreateId(node);\n    }\n\n    return id;\n  }\n\n}\n\nmodule.exports = ApplyCommonAttributes;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/ApplyCommonAttributes.js"],"names":["parseSizes","require","appendChild","createElement","insertText","hasAttribute","isCustomElement","ID_PREFIX","MediaTransformer","constructor","media","Map","transform","node","id","mediaString","attribs","replace","trim","startsWith","substring","addMedia","mediaQuery","ids","get","set","push","toString","result","selectors","entries","join","SizesTransformer","sizes","srcset","defaultValue","addSizes","defaultSize","values","reverse","selector","size","HeightsTransformer","heights","addHeights","defaultHeight","height","ApplyCommonAttributes","log","canRemoveBoilerplate","counter","nodesToTransform","Set","transformedNodes","attributeTransformations","addNode","add","apply","attribute","transformer","Object","getOrCreateId","nodeHasBeenTransformed","e","debug","applyToCustomStyles","head","customStyles","styles","children","length","data","keys","has","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,eAAD,CAA1B;;AACA,MAAM;AAACC,EAAAA,WAAD;AAAcC,EAAAA,aAAd;AAA6BC,EAAAA,UAA7B;AAAyCC,EAAAA;AAAzC,IAAyDJ,OAAO,CAAC,cAAD,CAAtE;;AACA,MAAM;AAACK,EAAAA;AAAD,IAAoBL,OAAO,CAAC,kBAAD,CAAjC;;AACA,MAAMM,SAAS,GAAG,QAAlB;AAEA;AACA;AACA;;AACA,MAAMC,gBAAN,CAAuB;AACrBC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AACD;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAOC,EAAP,EAAW;AAClB;AACA,QAAIC,WAAW,GAAGF,IAAI,CAACG,OAAL,CAAaN,KAAb,CAAmBO,OAAnB,CAA2B,MAA3B,EAAmC,GAAnC,CAAlB;AACAF,IAAAA,WAAW,GAAGA,WAAW,CAACG,IAAZ,EAAd;;AACA,QAAI,CAACH,WAAL,EAAkB;AAChB,aAAO,KAAP;AACD;;AAED,QAAIA,WAAW,CAAC,CAAD,CAAX,KAAmB,GAAvB,EAA4B;AAC1BA,MAAAA,WAAW,GAAI,WAAUA,WAAY,EAArC;AACD;;AAED,QAAIA,WAAW,CAACI,UAAZ,CAAuB,MAAvB,CAAJ,EAAoC;AAClCJ,MAAAA,WAAW,GAAGA,WAAW,CAACK,SAAZ,CAAsB,CAAtB,CAAd;AACD,KAFD,MAEO;AACLL,MAAAA,WAAW,GAAI,OAAMA,WAAY,EAAjC;AACD;;AAED,SAAKM,QAAL,CAAcN,WAAd,EAA4B,IAAGD,EAAG,EAAlC;AACA,WAAO,IAAP;AACD;;AAEDO,EAAAA,QAAQ,CAACC,UAAD,EAAaR,EAAb,EAAiB;AACvB,QAAIS,GAAG,GAAG,KAAKb,KAAL,CAAWc,GAAX,CAAeF,UAAf,CAAV;;AACA,QAAI,CAACC,GAAL,EAAU;AACRA,MAAAA,GAAG,GAAG,EAAN;AACA,WAAKb,KAAL,CAAWe,GAAX,CAAeH,UAAf,EAA2BC,GAA3B;AACD;;AACDA,IAAAA,GAAG,CAACG,IAAJ,CAASZ,EAAT;AACD;;AAEDa,EAAAA,QAAQ,GAAG;AACT,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,MAAM,CAAClB,KAAD,EAAQmB,SAAR,CAAX,IAAiC,KAAKnB,KAAL,CAAWoB,OAAX,EAAjC,EAAuD;AACrDF,MAAAA,MAAM,IAAK,UAASlB,KAAM,IAAGmB,SAAS,CAACE,IAAV,CAAe,GAAf,CAAoB,iBAAjD;AACD;;AACD,WAAOH,MAAP;AACD;;AA1CoB;AA6CvB;AACA;AACA;;;AACA,MAAMI,gBAAN,CAAuB;AACrBvB,EAAAA,WAAW,GAAG;AACZ,SAAKwB,KAAL,GAAa,EAAb;AACD;;AAEDrB,EAAAA,SAAS,CAACC,IAAD,EAAOC,EAAP,EAAW;AAClB,QAAI,CAACD,IAAI,CAACG,OAAL,CAAakB,MAAlB,EAA0B;AACxB;AACA;AACA;AACA,aAAO,KAAP;AACD;;AACD,UAAMD,KAAK,GAAGjC,UAAU,CAACa,IAAI,CAACG,OAAL,CAAaiB,KAAd,CAAxB;;AACA,QAAI,CAACA,KAAK,CAACE,YAAX,EAAyB;AACvB;AACA,aAAO,KAAP;AACD;;AACD,SAAKC,QAAL,CAActB,EAAd,EAAkBmB,KAAlB;AACA,WAAO,IAAP;AACD;;AAEDG,EAAAA,QAAQ,CAACtB,EAAD,EAAKmB,KAAL,EAAY;AAClB,SAAKA,KAAL,CAAWP,IAAX,CAAgB;AACdZ,MAAAA,EADc;AAEduB,MAAAA,WAAW,EAAEJ,KAAK,CAACE,YAFL;AAGd;AACA;AACAF,MAAAA,KAAK,EAAEA,KAAK,CAACK,MAAN,CAAaC,OAAb;AALO,KAAhB;AAOD;;AAEDZ,EAAAA,QAAQ,GAAG;AACT,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,MAAM;AAACK,MAAAA,KAAD;AAAQI,MAAAA,WAAR;AAAqBvB,MAAAA;AAArB,KAAX,IAAuC,KAAKmB,KAA5C,EAAmD;AACjD,YAAMO,QAAQ,GAAI,IAAG1B,EAAG,EAAxB;AACAc,MAAAA,MAAM,IAAK,GAAEY,QAAS,UAASH,WAAY,GAA3C;;AACA,WAAK,MAAMI,IAAX,IAAmBR,KAAnB,EAA0B;AACxBL,QAAAA,MAAM,IAAK,UAASa,IAAI,CAAC/B,KAAM,IAAG8B,QAAS,UAASC,IAAI,CAACA,IAAK,IAA9D;AACD;AACF;;AACD,WAAOb,MAAP;AACD;;AAzCoB;AA4CvB;AACA;AACA;;;AACA,MAAMc,kBAAN,CAAyB;AACvBjC,EAAAA,WAAW,GAAG;AACZ,SAAKkC,OAAL,GAAe,EAAf;AACD;;AAED/B,EAAAA,SAAS,CAACC,IAAD,EAAOC,EAAP,EAAW;AAClB,UAAM6B,OAAO,GAAG3C,UAAU,CAACa,IAAI,CAACG,OAAL,CAAa2B,OAAd,CAA1B;;AACA,QAAI,CAACA,OAAO,CAACR,YAAb,EAA2B;AACzB;AACA,aAAO,KAAP;AACD;;AACD,SAAKS,UAAL,CAAgB9B,EAAhB,EAAoB6B,OAApB;AACA,WAAO,IAAP;AACD;;AAEDC,EAAAA,UAAU,CAAC9B,EAAD,EAAK6B,OAAL,EAAc;AACtB,SAAKA,OAAL,CAAajB,IAAb,CAAkB;AAChBZ,MAAAA,EADgB;AAEhB+B,MAAAA,aAAa,EAAEF,OAAO,CAACR,YAFP;AAGhB;AACA;AACAQ,MAAAA,OAAO,EAAEA,OAAO,CAACL,MAAR,CAAeC,OAAf;AALO,KAAlB;AAOD;;AAEDZ,EAAAA,QAAQ,GAAG;AACT,QAAIC,MAAM,GAAG,EAAb;;AACA,SAAK,MAAM;AAACe,MAAAA,OAAD;AAAUE,MAAAA,aAAV;AAAyB/B,MAAAA;AAAzB,KAAX,IAA2C,KAAK6B,OAAhD,EAAyD;AACvD,YAAMH,QAAQ,GAAI,IAAG1B,EAAG,eAAxB;AACAc,MAAAA,MAAM,IAAK,GAAEY,QAAS,gBAAeK,aAAc,GAAnD;;AACA,WAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC5Bf,QAAAA,MAAM,IAAK,UAASkB,MAAM,CAACpC,KAAM,IAAG8B,QAAS,gBAAeM,MAAM,CAACL,IAAK,IAAxE;AACD;AACF;;AACD,WAAOb,MAAP;AACD;;AAnCsB;AAsCzB;AACA;AACA;;;AACA,MAAMmB,qBAAN,CAA4B;AAC1BtC,EAAAA,WAAW,CAACuC,GAAD,EAAM;AACf,SAAKA,GAAL,GAAWA,GAAX;AACA,SAAKC,oBAAL,GAA4B,IAA5B,CAFe,CAGf;;AACA,SAAKC,OAAL,GAAe,CAAf,CAJe,CAKf;;AACA,SAAKC,gBAAL,GAAwB,EAAxB,CANe,CAOf;;AACA,SAAK5B,GAAL,GAAW,IAAI6B,GAAJ,EAAX,CARe,CASf;;AACA,SAAKC,gBAAL,GAAwB,EAAxB;AACA,SAAKC,wBAAL,GAAgC;AAC9B5C,MAAAA,KAAK,EAAE,IAAIF,gBAAJ,EADuB;AAE9ByB,MAAAA,KAAK,EAAE,IAAID,gBAAJ,EAFuB;AAG9BW,MAAAA,OAAO,EAAE,IAAID,kBAAJ;AAHqB,KAAhC;AAKD;AAED;AACF;AACA;AACA;AACA;;;AACEa,EAAAA,OAAO,CAAC1C,IAAD,EAAO;AACZ,QAAI,CAACA,IAAI,CAACG,OAAV,EAAmB;AACjB;AACD,KAHW,CAIZ;;;AACA,QAAIX,YAAY,CAACQ,IAAD,EAAO,IAAP,CAAhB,EAA8B;AAC5B,WAAKU,GAAL,CAASiC,GAAT,CAAa3C,IAAI,CAACG,OAAL,CAAaF,EAA1B;AACD;;AACD,QAAIR,eAAe,CAACO,IAAD,CAAnB,EAA2B;AACzB,WAAKsC,gBAAL,CAAsBzB,IAAtB,CAA2Bb,IAA3B;AACD;AACF;AAED;AACF;AACA;;;AACE4C,EAAAA,KAAK,GAAG;AACN,SAAK,MAAM5C,IAAX,IAAmB,KAAKsC,gBAAxB,EAA0C;AACxC,WAAK,MAAM,CAACO,SAAD,EAAYC,WAAZ,CAAX,IAAuCC,MAAM,CAAC9B,OAAP,CAAe,KAAKwB,wBAApB,CAAvC,EAAsF;AACpF,YAAIjD,YAAY,CAACQ,IAAD,EAAO6C,SAAP,CAAhB,EAAmC;AACjC,cAAI;AACF,kBAAM5C,EAAE,GAAG,KAAK+C,aAAL,CAAmBhD,IAAnB,CAAX;AACA,kBAAMiD,sBAAsB,GAAGH,WAAW,CAAC/C,SAAZ,CAAsBC,IAAtB,EAA4BC,EAA5B,CAA/B;AACA,iBAAKuC,gBAAL,CAAsB3B,IAAtB,CAA2Bb,IAA3B;;AACA,gBAAIiD,sBAAsB,IAAI,CAACjD,IAAI,CAACG,OAAL,CAAaF,EAA5C,EAAgD;AAC9C;AACAD,cAAAA,IAAI,CAACG,OAAL,CAAaF,EAAb,GAAkBA,EAAlB;AACD,aAHD,MAGO;AACL;AACA,mBAAKoC,OAAL;AACD;AACF,WAXD,CAWE,OAAOa,CAAP,EAAU;AACV,iBAAKf,GAAL,CAASgB,KAAT,CACG,kDAAiDN,SAAU,KAAI7C,IAAI,CAACG,OAAL,CAAa0C,SAAb,CAAwB,IAD1F,EAEEK,CAFF;AAIA,iBAAKd,oBAAL,GAA4B,KAA5B;AACD;AACF;AACF;AACF;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEgB,EAAAA,mBAAmB,CAACC,IAAD,EAAOC,YAAP,EAAqB;AACtC,UAAMC,MAAM,GAAGR,MAAM,CAACtB,MAAP,CAAc,KAAKgB,wBAAnB,EAA6CvB,IAA7C,CAAkD,EAAlD,CAAf;;AACA,QAAI,CAACqC,MAAL,EAAa;AACX;AACD;;AACD,QAAI,CAACD,YAAL,EAAmB;AACjBA,MAAAA,YAAY,GAAGhE,aAAa,CAAC,OAAD,EAAU;AACpC,sBAAc;AADsB,OAAV,CAA5B;AAGAD,MAAAA,WAAW,CAACgE,IAAD,EAAOC,YAAP,CAAX;AACD;;AACD,QAAIA,YAAY,CAACE,QAAb,CAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACtClE,MAAAA,UAAU,CAAC+D,YAAD,EAAe,EAAf,CAAV;AACD;;AACDA,IAAAA,YAAY,CAACE,QAAb,CAAsB,CAAtB,EAAyBE,IAAzB,IAAiCH,MAAjC;;AACA,SAAK,MAAMvD,IAAX,IAAmB,KAAKwC,gBAAxB,EAA0C;AACxC,WAAK,MAAMK,SAAX,IAAwBE,MAAM,CAACY,IAAP,CAAY,KAAKlB,wBAAjB,CAAxB,EAAoE;AAClE,eAAOzC,IAAI,CAACG,OAAL,CAAa0C,SAAb,CAAP;AACD;AACF;AACF;AAED;AACF;AACA;AACA;AACA;;;AACEG,EAAAA,aAAa,CAAChD,IAAD,EAAO;AAClB,QAAIR,YAAY,CAACQ,IAAD,EAAO,IAAP,CAAhB,EAA8B;AAC5B,aAAOA,IAAI,CAACG,OAAL,CAAaF,EAApB;AACD;;AACDD,IAAAA,IAAI,CAACG,OAAL,GAAeH,IAAI,CAACG,OAAL,IAAgB,EAA/B;AACA,UAAMF,EAAE,GAAGP,SAAS,GAAG,KAAK2C,OAA5B;AACA,SAAKA,OAAL;;AACA,QAAI,KAAK3B,GAAL,CAASkD,GAAT,CAAa3D,EAAb,CAAJ,EAAsB;AACpB;AACA,aAAO,KAAK+C,aAAL,CAAmBhD,IAAnB,CAAP;AACD;;AACD,WAAOC,EAAP;AACD;;AAhHyB;;AAmH5B4D,MAAM,CAACC,OAAP,GAAiB5B,qBAAjB","sourcesContent":["/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst parseSizes = require('../parseSizes');\nconst {appendChild, createElement, insertText, hasAttribute} = require('../NodeUtils');\nconst {isCustomElement} = require('../Extensions.js');\nconst ID_PREFIX = 'i-amp-';\n\n/**\n * Transforms a media attribute into CSS by negating the existing media query.\n */\nclass MediaTransformer {\n  constructor() {\n    this.media = new Map();\n  }\n\n  transform(node, id) {\n    // normalize whitespace\n    let mediaString = node.attribs.media.replace(/\\s+/g, ' ');\n    mediaString = mediaString.trim();\n    if (!mediaString) {\n      return false;\n    }\n\n    if (mediaString[0] === '(') {\n      mediaString = `all and ${mediaString}`;\n    }\n\n    if (mediaString.startsWith('not ')) {\n      mediaString = mediaString.substring(4);\n    } else {\n      mediaString = `not ${mediaString}`;\n    }\n\n    this.addMedia(mediaString, `#${id}`);\n    return true;\n  }\n\n  addMedia(mediaQuery, id) {\n    let ids = this.media.get(mediaQuery);\n    if (!ids) {\n      ids = [];\n      this.media.set(mediaQuery, ids);\n    }\n    ids.push(id);\n  }\n\n  toString() {\n    let result = '';\n    for (const [media, selectors] of this.media.entries()) {\n      result += `@media ${media}{${selectors.join(',')}{display:none}}`;\n    }\n    return result;\n  }\n}\n\n/**\n * Transforms a sizes attribute into CSS by creating media queries for each size.\n */\nclass SizesTransformer {\n  constructor() {\n    this.sizes = [];\n  }\n\n  transform(node, id) {\n    if (!node.attribs.srcset) {\n      // According to the Mozilla docs, a sizes attribute without a valid srcset attribute should have no effect.\n      // Therefore, it should simply be stripped, without producing media queries.\n      // @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img#attr-sizes\n      return false;\n    }\n    const sizes = parseSizes(node.attribs.sizes);\n    if (!sizes.defaultValue) {\n      // remove the sizes attribute as it's invalid anyway\n      return false;\n    }\n    this.addSizes(id, sizes);\n    return true;\n  }\n\n  addSizes(id, sizes) {\n    this.sizes.push({\n      id,\n      defaultSize: sizes.defaultValue,\n      // The user agent will pick a width from the sizes attribute, using the first item with a <media-condition> (the part in parentheses) that evaluates to true.\n      // This means, we have to reverse the order the media queries in CSS to emulate this behavior (the last definition has precedence).\n      sizes: sizes.values.reverse(),\n    });\n  }\n\n  toString() {\n    let result = '';\n    for (const {sizes, defaultSize, id} of this.sizes) {\n      const selector = `#${id}`;\n      result += `${selector}{width:${defaultSize}}`;\n      for (const size of sizes) {\n        result += `@media ${size.media}{${selector}{width:${size.size}}}`;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * Transforms a heights attribute into CSS by creating media queries for each height.\n */\nclass HeightsTransformer {\n  constructor() {\n    this.heights = [];\n  }\n\n  transform(node, id) {\n    const heights = parseSizes(node.attribs.heights);\n    if (!heights.defaultValue) {\n      // remove the sizes attribute as it's invalid anyway\n      return false;\n    }\n    this.addHeights(id, heights);\n    return true;\n  }\n\n  addHeights(id, heights) {\n    this.heights.push({\n      id,\n      defaultHeight: heights.defaultValue,\n      // The user agent will pick a width from the sizes attribute, using the first item with a <media-condition> (the part in parentheses) that evaluates to true.\n      // This means, we have to reverse the order the media queries in CSS to emulate this behavior (the last definition has precedence).\n      heights: heights.values.reverse(),\n    });\n  }\n\n  toString() {\n    let result = '';\n    for (const {heights, defaultHeight, id} of this.heights) {\n      const selector = `#${id}>:first-child`;\n      result += `${selector}{padding-top:${defaultHeight}}`;\n      for (const height of heights) {\n        result += `@media ${height.media}{${selector}{padding-top:${height.size}}}`;\n      }\n    }\n    return result;\n  }\n}\n\n/**\n * Stateful attribute transformer. Can only be invoked once per page.\n */\nclass ApplyCommonAttributes {\n  constructor(log) {\n    this.log = log;\n    this.canRemoveBoilerplate = true;\n    // node counter for id generation\n    this.counter = 0;\n    // nodes to check for attributes\n    this.nodesToTransform = [];\n    // existing ids in the document\n    this.ids = new Set();\n    // nodes that have been transformed\n    this.transformedNodes = [];\n    this.attributeTransformations = {\n      media: new MediaTransformer(),\n      sizes: new SizesTransformer(),\n      heights: new HeightsTransformer(),\n    };\n  }\n\n  /**\n   * Adds a body node to potentially be transformed later.\n   *\n   * @param {Node} node\n   */\n  addNode(node) {\n    if (!node.attribs) {\n      return;\n    }\n    // Record the id to be able to generate ids later\n    if (hasAttribute(node, 'id')) {\n      this.ids.add(node.attribs.id);\n    }\n    if (isCustomElement(node)) {\n      this.nodesToTransform.push(node);\n    }\n  }\n\n  /**\n   * Applies attribute transformations to the selected node.\n   */\n  apply() {\n    for (const node of this.nodesToTransform) {\n      for (const [attribute, transformer] of Object.entries(this.attributeTransformations)) {\n        if (hasAttribute(node, attribute)) {\n          try {\n            const id = this.getOrCreateId(node);\n            const nodeHasBeenTransformed = transformer.transform(node, id);\n            this.transformedNodes.push(node);\n            if (nodeHasBeenTransformed && !node.attribs.id) {\n              // Only update id if it's needed...\n              node.attribs.id = id;\n            } else {\n              // Decrease counter otherwise\n              this.counter--;\n            }\n          } catch (e) {\n            this.log.debug(\n              `Cannot remove boilerplate. Failed transforming ${attribute}=\"${node.attribs[attribute]}\".`,\n              e\n            );\n            this.canRemoveBoilerplate = false;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Inject custom CSS resulting for attribute transformation.\n   *\n   * @param {Node} head - the head for injecting a styles node if none exists yet\n   * @param {Node|undefined} customStyles - optional existing styles node\n   */\n  applyToCustomStyles(head, customStyles) {\n    const styles = Object.values(this.attributeTransformations).join('');\n    if (!styles) {\n      return;\n    }\n    if (!customStyles) {\n      customStyles = createElement('style', {\n        'amp-custom': '',\n      });\n      appendChild(head, customStyles);\n    }\n    if (customStyles.children.length === 0) {\n      insertText(customStyles, '');\n    }\n    customStyles.children[0].data += styles;\n    for (const node of this.transformedNodes) {\n      for (const attribute of Object.keys(this.attributeTransformations)) {\n        delete node.attribs[attribute];\n      }\n    }\n  }\n\n  /**\n   * Returns an existing id or generates a new one.\n   *\n   * @param {Node} node\n   */\n  getOrCreateId(node) {\n    if (hasAttribute(node, 'id')) {\n      return node.attribs.id;\n    }\n    node.attribs = node.attribs || [];\n    const id = ID_PREFIX + this.counter;\n    this.counter++;\n    if (this.ids.has(id)) {\n      // generate a new id if this one already exists\n      return this.getOrCreateId(node);\n    }\n    return id;\n  }\n}\n\nmodule.exports = ApplyCommonAttributes;\n"]},"metadata":{},"sourceType":"script"}