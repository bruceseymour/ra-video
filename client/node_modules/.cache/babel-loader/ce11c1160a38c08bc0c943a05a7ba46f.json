{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.GranularChunksConformanceCheck = void 0;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _constants = require(\"../constants\");\n\nvar _TestInterface = require(\"../TestInterface\");\n\nvar _utils = require(\"../utils/utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getWarningMessage(modifiedProp) {\n  return `${_constants.CONFORMANCE_WARNING_PREFIX}: The splitChunks config has been carefully ` + `crafted to optimize build size and build times. Modifying - ${_chalk.default.bold(modifiedProp)} could result in slower builds and increased code duplication`;\n}\n\nfunction getErrorMessage(message) {\n  return `${_constants.CONFORMANCE_ERROR_PREFIX}: The splitChunks config has been carefully ` + `crafted to optimize build size and build times. Please avoid changes to ${_chalk.default.bold(message)}`;\n}\n\nclass GranularChunksConformanceCheck {\n  constructor(granularChunksConfig) {\n    this.granularChunksConfig = granularChunksConfig;\n  }\n\n  buildStared(options) {\n    const userSplitChunks = options.optimization.splitChunks;\n    const warnings = [];\n    const errors = [];\n\n    if (userSplitChunks.maxInitialRequests !== this.granularChunksConfig.maxInitialRequests) {\n      warnings.push('splitChunks.maxInitialRequests');\n    }\n\n    if (userSplitChunks.minSize !== this.granularChunksConfig.minSize) {\n      warnings.push('splitChunks.minSize');\n    }\n\n    const userCacheGroup = userSplitChunks.cacheGroups;\n    const originalCacheGroup = this.granularChunksConfig.cacheGroups;\n\n    if (userCacheGroup.vendors !== false) {\n      errors.push('splitChunks.cacheGroups.vendors');\n    }\n\n    if (!(0, _utils.deepEqual)(userCacheGroup.framework, originalCacheGroup.framework)) {\n      errors.push('splitChunks.cacheGroups.framework');\n    }\n\n    if (!(0, _utils.deepEqual)(userCacheGroup.lib, originalCacheGroup.lib)) {\n      errors.push('splitChunks.cacheGroups.lib');\n    }\n\n    if (!(0, _utils.deepEqual)(userCacheGroup.commons, originalCacheGroup.commons)) {\n      errors.push('splitChunks.cacheGroups.commons');\n    }\n\n    if (!(0, _utils.deepEqual)(userCacheGroup.shared, originalCacheGroup.shared)) {\n      errors.push('splitChunks.cacheGroups.shared');\n    }\n\n    if (!warnings.length && !errors.length) {\n      return {\n        result: _TestInterface.IConformanceTestStatus.SUCCESS\n      };\n    }\n\n    const failedResult = {\n      result: _TestInterface.IConformanceTestStatus.FAILED\n    };\n\n    if (warnings.length) {\n      failedResult.warnings = warnings.map(warning => ({\n        message: getWarningMessage(warning)\n      }));\n    }\n\n    if (errors.length) {\n      failedResult.warnings = errors.map(error => ({\n        message: getErrorMessage(error)\n      }));\n    }\n\n    return failedResult;\n  }\n\n}\n\nexports.GranularChunksConformanceCheck = GranularChunksConformanceCheck;","map":{"version":3,"sources":["../../../../../../build/webpack/plugins/webpack-conformance-plugin/checks/granular-chunks-conformance.ts"],"names":["CONFORMANCE_WARNING_PREFIX","chalk","CONFORMANCE_ERROR_PREFIX","GranularChunksConformanceCheck","constructor","buildStared","userSplitChunks","options","warnings","errors","userCacheGroup","originalCacheGroup","result","IConformanceTestStatus","failedResult","warning","message","getWarningMessage","error","getErrorMessage"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport {\n  CONFORMANCE_ERROR_PREFIX,\n  CONFORMANCE_WARNING_PREFIX,\n} from '../constants'\nimport {\n  IConformanceTestResult,\n  IConformanceTestStatus,\n  IWebpackConformanceTest,\n} from '../TestInterface'\nimport { deepEqual } from '../utils/utils'\n\nexport interface GranularChunksConformanceCheck\n  extends IWebpackConformanceTest {\n  granularChunksConfig: any\n}\n\nfunction getWarningMessage(modifiedProp: string) {\n  return (\n    `${CONFORMANCE_WARNING_PREFIX}: The splitChunks config has been carefully ` +\n    `crafted to optimize build size and build times. Modifying - ${chalk.bold(\n      modifiedProp\n    )} could result in slower builds and increased code duplication`\n  )\n}\n\nfunction getErrorMessage(message: string) {\n  return (\n    `${CONFORMANCE_ERROR_PREFIX}: The splitChunks config has been carefully ` +\n    `crafted to optimize build size and build times. Please avoid changes to ${chalk.bold(\n      message\n    )}`\n  )\n}\n\nexport class GranularChunksConformanceCheck {\n  constructor(granularChunksConfig: any) {\n    this.granularChunksConfig = granularChunksConfig\n  }\n\n  public buildStared(options: any): IConformanceTestResult {\n    const userSplitChunks = options.optimization.splitChunks\n    const warnings = []\n    const errors = []\n\n    if (\n      userSplitChunks.maxInitialRequests !==\n      this.granularChunksConfig.maxInitialRequests\n    ) {\n      warnings.push('splitChunks.maxInitialRequests')\n    }\n\n    if (userSplitChunks.minSize !== this.granularChunksConfig.minSize) {\n      warnings.push('splitChunks.minSize')\n    }\n\n    const userCacheGroup = userSplitChunks.cacheGroups\n    const originalCacheGroup = this.granularChunksConfig.cacheGroups\n\n    if (userCacheGroup.vendors !== false) {\n      errors.push('splitChunks.cacheGroups.vendors')\n    }\n\n    if (!deepEqual(userCacheGroup.framework, originalCacheGroup.framework)) {\n      errors.push('splitChunks.cacheGroups.framework')\n    }\n\n    if (!deepEqual(userCacheGroup.lib, originalCacheGroup.lib)) {\n      errors.push('splitChunks.cacheGroups.lib')\n    }\n\n    if (!deepEqual(userCacheGroup.commons, originalCacheGroup.commons)) {\n      errors.push('splitChunks.cacheGroups.commons')\n    }\n\n    if (!deepEqual(userCacheGroup.shared, originalCacheGroup.shared)) {\n      errors.push('splitChunks.cacheGroups.shared')\n    }\n\n    if (!warnings.length && !errors.length) {\n      return {\n        result: IConformanceTestStatus.SUCCESS,\n      }\n    }\n\n    const failedResult: IConformanceTestResult = {\n      result: IConformanceTestStatus.FAILED,\n    }\n\n    if (warnings.length) {\n      failedResult.warnings = warnings.map((warning) => ({\n        message: getWarningMessage(warning),\n      }))\n    }\n\n    if (errors.length) {\n      failedResult.warnings = errors.map((error) => ({\n        message: getErrorMessage(error),\n      }))\n    }\n\n    return failedResult\n  }\n}\n"]},"metadata":{},"sourceType":"script"}