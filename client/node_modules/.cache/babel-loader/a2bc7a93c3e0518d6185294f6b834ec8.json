{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _webpack = _interopRequireDefault(require(\"webpack\"));\n\nvar _webpackSources = _interopRequireDefault(require(\"webpack-sources\"));\n\nvar _constants = require(\"../../../next-server/lib/constants\");\n\nvar _getRouteFromEntrypoint = _interopRequireDefault(require(\"../../../next-server/server/get-route-from-entrypoint\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // @ts-ignore: TODO: remove ignore when webpack 5 is stable\n\n\nconst {\n  RawSource\n} = _webpack.default.sources || _webpackSources.default;\nconst isWebpack5 = parseInt(_webpack.default.version) === 5; // This plugin creates a pages-manifest.json from page entrypoints.\n// This is used for mapping paths like `/` to `.next/server/static/<buildid>/pages/index.js` when doing SSR\n// It's also used by next export to provide defaultPathMap\n\nclass PagesManifestPlugin {\n  constructor(serverless) {\n    this.serverless = void 0;\n    this.serverless = serverless;\n  }\n\n  createAssets(compilation, assets) {\n    const entrypoints = compilation.entrypoints;\n    const pages = {};\n\n    for (const entrypoint of entrypoints.values()) {\n      const pagePath = (0, _getRouteFromEntrypoint.default)(entrypoint.name, this.serverless);\n\n      if (!pagePath) {\n        continue;\n      }\n\n      const files = entrypoint.getFiles().filter(file => !file.includes('webpack-runtime') && file.endsWith('.js'));\n\n      if (files.length > 1) {\n        console.log(`Found more than one file in server entrypoint ${entrypoint.name}`, files);\n        continue;\n      } // Write filename, replace any backslashes in path (on windows) with forwardslashes for cross-platform consistency.\n\n\n      pages[pagePath] = files[0].replace(/\\\\/g, '/');\n    }\n\n    assets[_constants.PAGES_MANIFEST] = new RawSource(JSON.stringify(pages, null, 2));\n  }\n\n  apply(compiler) {\n    if (isWebpack5) {\n      compiler.hooks.make.tap('NextJsPagesManifest', compilation => {\n        // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n        compilation.hooks.processAssets.tap({\n          name: 'NextJsPagesManifest',\n          // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n          stage: _webpack.default.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n        }, assets => {\n          this.createAssets(compilation, assets);\n        });\n      });\n      return;\n    }\n\n    compiler.hooks.emit.tap('NextJsPagesManifest', compilation => {\n      this.createAssets(compilation, compilation.assets);\n    });\n  }\n\n}\n\nexports.default = PagesManifestPlugin;","map":{"version":3,"sources":["../../../../build/webpack/plugins/pages-manifest-plugin.ts"],"names":["webpack","sources","isWebpack5","parseInt","PagesManifestPlugin","serverless","constructor","createAssets","entrypoints","compilation","pages","pagePath","entrypoint","files","file","console","name","assets","PAGES_MANIFEST","JSON","apply","stage","compiler"],"mappings":";;;;;AAAA,IAAA,QAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,SAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iBAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,oCAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,uDAAA,CAAA,CAAA;;;;;;AAIA,C,CAAA;;;AACA,MAAM;AAAA,EAAA;AAAA,IAAgBA,QAAAA,CAAAA,OAAAA,CAAAA,OAAAA,IAAmBC,eAAAA,CAAzC,OAAA;AAEA,MAAMC,UAAU,GAAGC,QAAQ,CAACH,QAAAA,CAAAA,OAAAA,CAATG,OAAQ,CAARA,KAAnB,CAAA,C,CAEA;AACA;AACA;;AACe,MAAMC,mBAAN,CAA4C;AAGzDE,EAAAA,WAAW,CAAA,UAAA,EAAsB;AAAA,SAFjCD,UAEiC,GAAA,KAAA,CAAA;AAC/B,SAAA,UAAA,GAAA,UAAA;AAGFE;;AAAAA,EAAAA,YAAY,CAAA,WAAA,EAAA,MAAA,EAAgC;AAC1C,UAAMC,WAAW,GAAGC,WAAW,CAA/B,WAAA;AACA,UAAMC,KAAoB,GAA1B,EAAA;;AAEA,SAAK,MAAL,UAAA,IAAyBF,WAAW,CAApC,MAAyBA,EAAzB,EAA+C;AAC7C,YAAMG,QAAQ,GAAG,CAAA,GAAA,uBAAA,CAAA,OAAA,EAAuBC,UAAU,CAAjC,IAAA,EAAwC,KAAzD,UAAiB,CAAjB;;AAEA,UAAI,CAAJ,QAAA,EAAe;AACb;AAGF;;AAAA,YAAMC,KAAK,GAAGD,UAAU,CAAVA,QAAAA,GAAAA,MAAAA,CAGTE,IAAD,IACE,CAACA,IAAI,CAAJA,QAAAA,CAAD,iBAACA,CAAD,IAAqCA,IAAI,CAAJA,QAAAA,CAJ3C,KAI2CA,CAJ7BF,CAAd;;AAOA,UAAIC,KAAK,CAALA,MAAAA,GAAJ,CAAA,EAAsB;AACpBE,QAAAA,OAAO,CAAPA,GAAAA,CACG,iDAAgDH,UAAU,CAACI,IAD9DD,EAAAA,EAAAA,KAAAA;AAIA;AAGF,OAtB6C,CAsB7C;;;AACAL,MAAAA,KAAK,CAALA,QAAK,CAALA,GAAkBG,KAAK,CAALA,CAAK,CAALA,CAAAA,OAAAA,CAAAA,KAAAA,EAAlBH,GAAkBG,CAAlBH;AAGFO;;AAAAA,IAAAA,MAAM,CAACC,UAAAA,CAAPD,cAAM,CAANA,GAAyB,IAAA,SAAA,CAAcE,IAAI,CAAJA,SAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EAAvCF,CAAuCE,CAAd,CAAzBF;AAGFG;;AAAAA,EAAAA,KAAK,CAAA,QAAA,EAA2B;AAC9B,QAAA,UAAA,EAAgB;AACd,MAAA,QAAQ,CAAR,KAAA,CAAA,IAAA,CAAA,GAAA,CAAA,qBAAA,EAAgDX,WAAD,IAAiB;AAC9D;AACAA,QAAAA,WAAW,CAAXA,KAAAA,CAAAA,aAAAA,CAAAA,GAAAA,CACE;AACEO,UAAAA,IAAI,EADN,qBAAA;AAEE;AACAK,UAAAA,KAAK,EAAErB,QAAAA,CAAAA,OAAAA,CAAAA,WAAAA,CAJXS;AACE,SADFA,EAMGQ,MAAD,IAAiB;AACf,eAAA,YAAA,CAAA,WAAA,EAAA,MAAA;AAPJR,SAAAA;AAFF,OAAA;AAaA;AAGFa;;AAAAA,IAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,qBAAAA,EAAgDb,WAAD,IAAsB;AACnE,WAAA,YAAA,CAAA,WAAA,EAA+BA,WAAW,CAA1C,MAAA;AADFa,KAAAA;AA1DuD;;AAAA","sourcesContent":["import webpack, { Compiler, Plugin } from 'webpack'\nimport sources from 'webpack-sources'\nimport { PAGES_MANIFEST } from '../../../next-server/lib/constants'\nimport getRouteFromEntrypoint from '../../../next-server/server/get-route-from-entrypoint'\n\nexport type PagesManifest = { [page: string]: string }\n\n// @ts-ignore: TODO: remove ignore when webpack 5 is stable\nconst { RawSource } = webpack.sources || sources\n\nconst isWebpack5 = parseInt(webpack.version!) === 5\n\n// This plugin creates a pages-manifest.json from page entrypoints.\n// This is used for mapping paths like `/` to `.next/server/static/<buildid>/pages/index.js` when doing SSR\n// It's also used by next export to provide defaultPathMap\nexport default class PagesManifestPlugin implements Plugin {\n  serverless: boolean\n\n  constructor(serverless: boolean) {\n    this.serverless = serverless\n  }\n\n  createAssets(compilation: any, assets: any) {\n    const entrypoints = compilation.entrypoints\n    const pages: PagesManifest = {}\n\n    for (const entrypoint of entrypoints.values()) {\n      const pagePath = getRouteFromEntrypoint(entrypoint.name, this.serverless)\n\n      if (!pagePath) {\n        continue\n      }\n\n      const files = entrypoint\n        .getFiles()\n        .filter(\n          (file: string) =>\n            !file.includes('webpack-runtime') && file.endsWith('.js')\n        )\n\n      if (files.length > 1) {\n        console.log(\n          `Found more than one file in server entrypoint ${entrypoint.name}`,\n          files\n        )\n        continue\n      }\n\n      // Write filename, replace any backslashes in path (on windows) with forwardslashes for cross-platform consistency.\n      pages[pagePath] = files[0].replace(/\\\\/g, '/')\n    }\n\n    assets[PAGES_MANIFEST] = new RawSource(JSON.stringify(pages, null, 2))\n  }\n\n  apply(compiler: Compiler): void {\n    if (isWebpack5) {\n      compiler.hooks.make.tap('NextJsPagesManifest', (compilation) => {\n        // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n        compilation.hooks.processAssets.tap(\n          {\n            name: 'NextJsPagesManifest',\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n          },\n          (assets: any) => {\n            this.createAssets(compilation, assets)\n          }\n        )\n      })\n      return\n    }\n\n    compiler.hooks.emit.tap('NextJsPagesManifest', (compilation: any) => {\n      this.createAssets(compilation, compilation.assets)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}