{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = getRouteFromEntrypoint;\n\nvar _getRouteFromAssetPath = _interopRequireDefault(require(\"../lib/router/utils/get-route-from-asset-path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // matches pages/:page*.js\n\n\nconst SERVER_ROUTE_NAME_REGEX = /^pages[/\\\\](.*)$/; // matches static/pages/:page*.js\n\nconst BROWSER_ROUTE_NAME_REGEX = /^static[/\\\\]pages[/\\\\](.*)$/;\n\nfunction matchBundle(regex, input) {\n  const result = regex.exec(input);\n\n  if (!result) {\n    return null;\n  }\n\n  return (0, _getRouteFromAssetPath.default)(`/${result[1]}`);\n}\n\nfunction getRouteFromEntrypoint(entryFile, // TODO: Remove this parameter\n_isServerlessLike = false) {\n  let pagePath = matchBundle(SERVER_ROUTE_NAME_REGEX, entryFile);\n\n  if (pagePath) {\n    return pagePath;\n  } // Potentially the passed item is a browser bundle so we try to match that also\n\n\n  return matchBundle(BROWSER_ROUTE_NAME_REGEX, entryFile);\n}","map":{"version":3,"sources":["../../../next-server/server/get-route-from-entrypoint.ts"],"names":["SERVER_ROUTE_NAME_REGEX","BROWSER_ROUTE_NAME_REGEX","result","regex","_isServerlessLike","pagePath","matchBundle"],"mappings":";;;;;AAAA,IAAA,sBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,+CAAA,CAAA,CAAA;;;;;;AAEA,C,CAAA;;;AACA,MAAMA,uBAAuB,GAA7B,kBAAA,C,CACA;;AACA,MAAMC,wBAAwB,GAA9B,6BAAA;;AAEA,SAAA,WAAA,CAAA,KAAA,EAAA,KAAA,EAAkE;AAChE,QAAMC,MAAM,GAAGC,KAAK,CAALA,IAAAA,CAAf,KAAeA,CAAf;;AAEA,MAAI,CAAJ,MAAA,EAAa;AACX,WAAA,IAAA;AAGF;;AAAA,SAAO,CAAA,GAAA,sBAAA,CAAA,OAAA,EAAuB,IAAGD,MAAM,CAAA,CAAA,CAAvC,EAAO,CAAP;AAGa;;AAAA,SAAA,sBAAA,CAAA,SAAA,EAEb;AACAE,iBAA0B,GAHb,KAAA,EAIE;AACf,MAAIC,QAAQ,GAAGC,WAAW,CAAA,uBAAA,EAA1B,SAA0B,CAA1B;;AAEA,MAAA,QAAA,EAAc;AACZ,WAAA,QAAA;AAGF,GAPe,CAOf;;;AACA,SAAOA,WAAW,CAAA,wBAAA,EAAlB,SAAkB,CAAlB;AACD","sourcesContent":["import getRouteFromAssetPath from '../lib/router/utils/get-route-from-asset-path'\n\n// matches pages/:page*.js\nconst SERVER_ROUTE_NAME_REGEX = /^pages[/\\\\](.*)$/\n// matches static/pages/:page*.js\nconst BROWSER_ROUTE_NAME_REGEX = /^static[/\\\\]pages[/\\\\](.*)$/\n\nfunction matchBundle(regex: RegExp, input: string): string | null {\n  const result = regex.exec(input)\n\n  if (!result) {\n    return null\n  }\n\n  return getRouteFromAssetPath(`/${result[1]}`)\n}\n\nexport default function getRouteFromEntrypoint(\n  entryFile: string,\n  // TODO: Remove this parameter\n  _isServerlessLike: boolean = false\n): string | null {\n  let pagePath = matchBundle(SERVER_ROUTE_NAME_REGEX, entryFile)\n\n  if (pagePath) {\n    return pagePath\n  }\n\n  // Potentially the passed item is a browser bundle so we try to match that also\n  return matchBundle(BROWSER_ROUTE_NAME_REGEX, entryFile)\n}\n"]},"metadata":{},"sourceType":"script"}