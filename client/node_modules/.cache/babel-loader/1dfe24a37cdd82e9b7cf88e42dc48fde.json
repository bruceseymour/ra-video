{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar path = _interopRequireWildcard(require(\"path\"));\n\nvar _webpack = _interopRequireWildcard(require(\"webpack\"));\n\nvar _webpackSources = _interopRequireDefault(require(\"webpack-sources\"));\n\nvar _pLimit = _interopRequireDefault(require(\"p-limit\"));\n\nvar _jestWorker = _interopRequireDefault(require(\"jest-worker\"));\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar _cacache = _interopRequireDefault(require(\"next/dist/compiled/cacache\"));\n\nvar _tracer = require(\"../../../../tracer\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n} // @ts-nocheck\n\n\nconst isWebpack5 = parseInt(_webpack.default.version) === 5;\n\nfunction getEcmaVersion(environment) {\n  // ES 6th\n  if (environment.arrowFunction || environment.const || environment.destructuring || environment.forOf || environment.module) {\n    return 2015;\n  } // ES 11th\n\n\n  if (environment.bigIntLiteral || environment.dynamicImport) {\n    return 2020;\n  }\n\n  return 5;\n}\n\nfunction buildError(error, file) {\n  if (error.line) {\n    return new Error(`${file} from Terser\\n${error.message} [${file}:${error.line},${error.col}]${error.stack ? `\\n${error.stack.split('\\n').slice(1).join('\\n')}` : ''}`);\n  }\n\n  if (error.stack) {\n    return new Error(`${file} from Terser\\n${error.message}\\n${error.stack}`);\n  }\n\n  return new Error(`${file} from Terser\\n${error.message}`);\n}\n\nclass Webpack4Cache {\n  constructor(cacheDir, {\n    SourceMapSource,\n    RawSource\n  }) {\n    this.cacheDir = cacheDir;\n    this.sources = {\n      SourceMapSource,\n      RawSource\n    };\n  }\n\n  getLazyHashedEtag(obj) {\n    let str;\n\n    if (obj.source) {\n      str = obj.source();\n    }\n\n    const hash = _crypto.default.createHash('md4');\n\n    hash.update(str ? str : obj);\n    return hash.digest('base64');\n  }\n\n  async getPromise(identifier, etag) {\n    let cachedResult;\n\n    try {\n      cachedResult = await _cacache.default.get(this.cacheDir, etag);\n    } catch (ignoreError) {\n      // eslint-disable-next-line no-undefined\n      return undefined;\n    }\n\n    cachedResult = JSON.parse(cachedResult.data);\n    const {\n      code,\n      name,\n      map,\n      input,\n      inputSourceMap\n    } = cachedResult;\n    let source;\n\n    if (map) {\n      source = new this.sources.SourceMapSource(code, name, map, input, inputSourceMap, true);\n    } else {\n      source = new this.sources.RawSource(code);\n    }\n\n    return {\n      source\n    };\n  }\n\n  async storePromise(identifier, etag, data) {\n    await _cacache.default.put(this.cacheDir, etag, JSON.stringify(data));\n  }\n\n}\n\nclass TerserPlugin {\n  constructor(options = {}) {\n    const {\n      cacheDir,\n      terserOptions = {},\n      parallel\n    } = options;\n    this.options = {\n      cacheDir,\n      parallel,\n      terserOptions\n    };\n  }\n\n  async optimize(compilation, assets, optimizeOptions, cache, {\n    SourceMapSource,\n    RawSource\n  }) {\n    const span = _tracer.tracer.startSpan('terser-webpack-plugin-optimize', {\n      attributes: {\n        webpackVersion: isWebpack5 ? 5 : 4,\n        compilationName: compilation.name\n      }\n    });\n\n    return (0, _tracer.traceAsyncFn)(span, async () => {\n      let numberOfAssetsForMinify = 0;\n      const assetsList = isWebpack5 ? Object.keys(assets) : [...Array.from(compilation.additionalChunkAssets || []), ...Array.from(assets).reduce((acc, chunk) => {\n        return acc.concat(Array.from(chunk.files || []));\n      }, [])];\n      const assetsForMinify = await Promise.all(assetsList.filter(name => {\n        if (!_webpack.ModuleFilenameHelpers.matchObject.bind( // eslint-disable-next-line no-undefined\n        undefined, {\n          test: /\\.[cm]?js(\\?.*)?$/i\n        })(name)) {\n          return false;\n        }\n\n        const res = compilation.getAsset(name);\n\n        if (!res) {\n          console.log(name);\n          return false;\n        }\n\n        const {\n          info\n        } = res; // Skip double minimize assets from child compilation\n\n        if (info.minimized) {\n          return false;\n        }\n\n        return true;\n      }).map(async name => {\n        const {\n          info,\n          source\n        } = compilation.getAsset(name);\n        const eTag = cache.getLazyHashedEtag(source);\n        const output = await cache.getPromise(name, eTag);\n\n        if (!output) {\n          numberOfAssetsForMinify += 1;\n        }\n\n        return {\n          name,\n          info,\n          inputSource: source,\n          output,\n          eTag\n        };\n      }));\n      const numberOfWorkers = Math.min(numberOfAssetsForMinify, optimizeOptions.availableNumberOfCores);\n      let initializedWorker; // eslint-disable-next-line consistent-return\n\n      const getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker;\n        }\n\n        initializedWorker = new _jestWorker.default(path.join(__dirname, './minify.js'), {\n          numWorkers: numberOfWorkers,\n          enableWorkerThreads: true\n        });\n        initializedWorker.getStdout().pipe(process.stdout);\n        initializedWorker.getStderr().pipe(process.stderr);\n        return initializedWorker;\n      };\n\n      const limit = (0, _pLimit.default)(numberOfAssetsForMinify > 0 ? numberOfWorkers : Infinity);\n      const scheduledTasks = [];\n\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push(limit(async () => {\n          const {\n            name,\n            inputSource,\n            info,\n            eTag\n          } = asset;\n          let {\n            output\n          } = asset;\n\n          const assetSpan = _tracer.tracer.startSpan('minify-js', {\n            attributes: {\n              name,\n              cache: typeof output === 'undefined' ? 'MISS' : 'HIT'\n            }\n          });\n\n          return (0, _tracer.traceAsyncFn)(assetSpan, async () => {\n            if (!output) {\n              const {\n                source: sourceFromInputSource,\n                map: inputSourceMap\n              } = inputSource.sourceAndMap();\n              const input = Buffer.isBuffer(sourceFromInputSource) ? sourceFromInputSource.toString() : sourceFromInputSource;\n              const options = {\n                name,\n                input,\n                inputSourceMap,\n                terserOptions: { ...this.options.terserOptions\n                }\n              };\n\n              if (typeof options.terserOptions.module === 'undefined') {\n                if (typeof info.javascriptModule !== 'undefined') {\n                  options.terserOptions.module = info.javascriptModule;\n                } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                  options.terserOptions.module = true;\n                } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                  options.terserOptions.module = false;\n                }\n              }\n\n              try {\n                output = await getWorker().minify(options);\n              } catch (error) {\n                compilation.errors.push(buildError(error, name));\n                return;\n              }\n\n              if (output.map) {\n                output.source = new SourceMapSource(output.code, name, output.map, input,\n                /** @type {SourceMapRawSourceMap} */\n                inputSourceMap, true);\n              } else {\n                output.source = new RawSource(output.code);\n              }\n\n              if (isWebpack5) {\n                await cache.storePromise(name, eTag, {\n                  source: output.source\n                });\n              } else {\n                await cache.storePromise(name, eTag, {\n                  code: output.code,\n                  map: output.map,\n                  name,\n                  input,\n                  inputSourceMap\n                });\n              }\n            }\n            /** @type {AssetInfo} */\n\n\n            const newInfo = {\n              minimized: true\n            };\n            const {\n              source\n            } = output;\n            compilation.updateAsset(name, source, newInfo);\n          });\n        }));\n      }\n\n      await Promise.all(scheduledTasks);\n\n      if (initializedWorker) {\n        await initializedWorker.end();\n      }\n    });\n  }\n  /**\n  * @param {Compiler} compiler\n  * @returns {void}\n  */\n\n\n  apply(compiler) {\n    var _compiler$webpack;\n\n    const {\n      SourceMapSource,\n      RawSource\n    } = (compiler == null ? void 0 : (_compiler$webpack = compiler.webpack) == null ? void 0 : _compiler$webpack.sources) || _webpackSources.default;\n    const {\n      output\n    } = compiler.options;\n\n    if (typeof this.options.terserOptions.ecma === 'undefined') {\n      this.options.terserOptions.ecma = getEcmaVersion(output.environment || {});\n    }\n\n    const pluginName = this.constructor.name;\n    const availableNumberOfCores = this.options.parallel;\n    compiler.hooks.compilation.tap(pluginName, compilation => {\n      // Don't run minifier against mini-css-extract-plugin\n      if (compilation.name !== 'client' && compilation.name !== 'server') {\n        return;\n      }\n\n      const cache = isWebpack5 ? compilation.getCache('TerserWebpackPlugin') : new Webpack4Cache(this.options.cacheDir, {\n        SourceMapSource,\n        RawSource\n      });\n\n      const handleHashForChunk = (hash, chunk) => {\n        // increment 'c' to invalidate cache\n        hash.update('c');\n      };\n\n      if (isWebpack5) {\n        const JSModulesHooks = _webpack.default.javascript.JavascriptModulesPlugin.getCompilationHooks(compilation);\n\n        JSModulesHooks.chunkHash.tap(pluginName, (chunk, hash) => {\n          if (!chunk.hasRuntime()) return;\n          return handleHashForChunk(hash, chunk);\n        });\n        compilation.hooks.processAssets.tapPromise({\n          name: pluginName,\n          stage: _webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n        }, assets => this.optimize(compilation, assets, {\n          availableNumberOfCores\n        }, cache, {\n          SourceMapSource,\n          RawSource\n        }));\n        compilation.hooks.statsPrinter.tap(pluginName, stats => {\n          stats.hooks.print.for('asset.info.minimized').tap('terser-webpack-plugin', (minimized, {\n            green,\n            formatFlag\n          }) => // eslint-disable-next-line no-undefined\n          minimized ? green(formatFlag('minimized')) : undefined);\n        });\n      } else {\n        compilation.mainTemplate.hooks.hashForChunk.tap(pluginName, handleHashForChunk);\n        compilation.chunkTemplate.hooks.hashForChunk.tap(pluginName, handleHashForChunk);\n        compilation.hooks.optimizeChunkAssets.tapPromise(pluginName, async assets => {\n          return await this.optimize(compilation, assets, {\n            availableNumberOfCores\n          }, cache, {\n            SourceMapSource,\n            RawSource\n          });\n        });\n      }\n    });\n  }\n\n}\n\nvar _default = TerserPlugin;\nexports.default = _default;","map":{"version":3,"sources":["../../../../../../build/webpack/plugins/terser-webpack-plugin/src/index.js"],"names":["isWebpack5","parseInt","webpack","environment","error","file","message","line","col","stack","Webpack4Cache","constructor","getLazyHashedEtag","obj","str","hash","crypto","cachedResult","cacache","JSON","source","TerserPlugin","options","terserOptions","span","tracer","attributes","webpackVersion","compilationName","compilation","numberOfAssetsForMinify","assetsList","Object","Array","acc","chunk","assetsForMinify","name","test","res","console","info","eTag","cache","output","inputSource","numberOfWorkers","Math","optimizeOptions","getWorker","initializedWorker","jestWorker","path","numWorkers","enableWorkerThreads","process","limit","scheduledTasks","assetSpan","map","input","Buffer","sourceFromInputSource","buildError","code","newInfo","minimized","Promise","apply","sources","compiler","getEcmaVersion","pluginName","availableNumberOfCores","handleHashForChunk","JSModulesHooks","stage","Compilation","assets","stats","green","formatFlag"],"mappings":"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","sourcesContent":["// @ts-nocheck\nimport * as path from 'path'\n\nimport webpack, { ModuleFilenameHelpers, Compilation } from 'webpack'\nimport sources from 'webpack-sources'\nimport pLimit from 'p-limit'\nimport jestWorker from 'jest-worker'\nimport crypto from 'crypto'\nimport cacache from 'next/dist/compiled/cacache'\nimport { tracer, traceAsyncFn } from '../../../../tracer'\n\nconst isWebpack5 = parseInt(webpack.version) === 5\n\nfunction getEcmaVersion(environment) {\n  // ES 6th\n  if (\n    environment.arrowFunction ||\n    environment.const ||\n    environment.destructuring ||\n    environment.forOf ||\n    environment.module\n  ) {\n    return 2015\n  }\n\n  // ES 11th\n  if (environment.bigIntLiteral || environment.dynamicImport) {\n    return 2020\n  }\n\n  return 5\n}\n\nfunction buildError(error, file) {\n  if (error.line) {\n    return new Error(\n      `${file} from Terser\\n${error.message} [${file}:${error.line},${\n        error.col\n      }]${\n        error.stack ? `\\n${error.stack.split('\\n').slice(1).join('\\n')}` : ''\n      }`\n    )\n  }\n\n  if (error.stack) {\n    return new Error(`${file} from Terser\\n${error.message}\\n${error.stack}`)\n  }\n\n  return new Error(`${file} from Terser\\n${error.message}`)\n}\n\nclass Webpack4Cache {\n  constructor(cacheDir, { SourceMapSource, RawSource }) {\n    this.cacheDir = cacheDir\n    this.sources = { SourceMapSource, RawSource }\n  }\n  getLazyHashedEtag(obj) {\n    let str\n    if (obj.source) {\n      str = obj.source()\n    }\n    const hash = crypto.createHash('md4')\n    hash.update(str ? str : obj)\n    return hash.digest('base64')\n  }\n\n  async getPromise(identifier, etag) {\n    let cachedResult\n\n    try {\n      cachedResult = await cacache.get(this.cacheDir, etag)\n    } catch (ignoreError) {\n      // eslint-disable-next-line no-undefined\n      return undefined\n    }\n\n    cachedResult = JSON.parse(cachedResult.data)\n\n    const { code, name, map, input, inputSourceMap } = cachedResult\n\n    let source\n\n    if (map) {\n      source = new this.sources.SourceMapSource(\n        code,\n        name,\n        map,\n        input,\n        inputSourceMap,\n        true\n      )\n    } else {\n      source = new this.sources.RawSource(code)\n    }\n\n    return { source }\n  }\n\n  async storePromise(identifier, etag, data) {\n    await cacache.put(this.cacheDir, etag, JSON.stringify(data))\n  }\n}\n\nclass TerserPlugin {\n  constructor(options = {}) {\n    const { cacheDir, terserOptions = {}, parallel } = options\n\n    this.options = {\n      cacheDir,\n      parallel,\n      terserOptions,\n    }\n  }\n\n  async optimize(\n    compilation,\n    assets,\n    optimizeOptions,\n    cache,\n    { SourceMapSource, RawSource }\n  ) {\n    const span = tracer.startSpan('terser-webpack-plugin-optimize', {\n      attributes: {\n        webpackVersion: isWebpack5 ? 5 : 4,\n        compilationName: compilation.name,\n      },\n    })\n\n    return traceAsyncFn(span, async () => {\n      let numberOfAssetsForMinify = 0\n      const assetsList = isWebpack5\n        ? Object.keys(assets)\n        : [\n            ...Array.from(compilation.additionalChunkAssets || []),\n            ...Array.from(assets).reduce((acc, chunk) => {\n              return acc.concat(Array.from(chunk.files || []))\n            }, []),\n          ]\n\n      const assetsForMinify = await Promise.all(\n        assetsList\n          .filter((name) => {\n            if (\n              !ModuleFilenameHelpers.matchObject.bind(\n                // eslint-disable-next-line no-undefined\n                undefined,\n                { test: /\\.[cm]?js(\\?.*)?$/i }\n              )(name)\n            ) {\n              return false\n            }\n\n            const res = compilation.getAsset(name)\n            if (!res) {\n              console.log(name)\n              return false\n            }\n\n            const { info } = res\n\n            // Skip double minimize assets from child compilation\n            if (info.minimized) {\n              return false\n            }\n\n            return true\n          })\n          .map(async (name) => {\n            const { info, source } = compilation.getAsset(name)\n\n            const eTag = cache.getLazyHashedEtag(source)\n            const output = await cache.getPromise(name, eTag)\n\n            if (!output) {\n              numberOfAssetsForMinify += 1\n            }\n\n            return { name, info, inputSource: source, output, eTag }\n          })\n      )\n\n      const numberOfWorkers = Math.min(\n        numberOfAssetsForMinify,\n        optimizeOptions.availableNumberOfCores\n      )\n\n      let initializedWorker\n\n      // eslint-disable-next-line consistent-return\n      const getWorker = () => {\n        if (initializedWorker) {\n          return initializedWorker\n        }\n\n        initializedWorker = new jestWorker(\n          path.join(__dirname, './minify.js'),\n          {\n            numWorkers: numberOfWorkers,\n            enableWorkerThreads: true,\n          }\n        )\n\n        initializedWorker.getStdout().pipe(process.stdout)\n        initializedWorker.getStderr().pipe(process.stderr)\n\n        return initializedWorker\n      }\n\n      const limit = pLimit(\n        numberOfAssetsForMinify > 0 ? numberOfWorkers : Infinity\n      )\n      const scheduledTasks = []\n\n      for (const asset of assetsForMinify) {\n        scheduledTasks.push(\n          limit(async () => {\n            const { name, inputSource, info, eTag } = asset\n            let { output } = asset\n\n            const assetSpan = tracer.startSpan('minify-js', {\n              attributes: {\n                name,\n                cache: typeof output === 'undefined' ? 'MISS' : 'HIT',\n              },\n            })\n\n            return traceAsyncFn(assetSpan, async () => {\n              if (!output) {\n                const {\n                  source: sourceFromInputSource,\n                  map: inputSourceMap,\n                } = inputSource.sourceAndMap()\n\n                const input = Buffer.isBuffer(sourceFromInputSource)\n                  ? sourceFromInputSource.toString()\n                  : sourceFromInputSource\n\n                const options = {\n                  name,\n                  input,\n                  inputSourceMap,\n                  terserOptions: { ...this.options.terserOptions },\n                }\n\n                if (typeof options.terserOptions.module === 'undefined') {\n                  if (typeof info.javascriptModule !== 'undefined') {\n                    options.terserOptions.module = info.javascriptModule\n                  } else if (/\\.mjs(\\?.*)?$/i.test(name)) {\n                    options.terserOptions.module = true\n                  } else if (/\\.cjs(\\?.*)?$/i.test(name)) {\n                    options.terserOptions.module = false\n                  }\n                }\n\n                try {\n                  output = await getWorker().minify(options)\n                } catch (error) {\n                  compilation.errors.push(buildError(error, name))\n\n                  return\n                }\n\n                if (output.map) {\n                  output.source = new SourceMapSource(\n                    output.code,\n                    name,\n                    output.map,\n                    input,\n                    /** @type {SourceMapRawSourceMap} */ (inputSourceMap),\n                    true\n                  )\n                } else {\n                  output.source = new RawSource(output.code)\n                }\n\n                if (isWebpack5) {\n                  await cache.storePromise(name, eTag, {\n                    source: output.source,\n                  })\n                } else {\n                  await cache.storePromise(name, eTag, {\n                    code: output.code,\n                    map: output.map,\n                    name,\n                    input,\n                    inputSourceMap,\n                  })\n                }\n              }\n\n              /** @type {AssetInfo} */\n              const newInfo = { minimized: true }\n              const { source } = output\n\n              compilation.updateAsset(name, source, newInfo)\n            })\n          })\n        )\n      }\n\n      await Promise.all(scheduledTasks)\n\n      if (initializedWorker) {\n        await initializedWorker.end()\n      }\n    })\n  }\n\n  /**\n   * @param {Compiler} compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    const { SourceMapSource, RawSource } = compiler?.webpack?.sources || sources\n    const { output } = compiler.options\n\n    if (typeof this.options.terserOptions.ecma === 'undefined') {\n      this.options.terserOptions.ecma = getEcmaVersion(output.environment || {})\n    }\n\n    const pluginName = this.constructor.name\n    const availableNumberOfCores = this.options.parallel\n\n    compiler.hooks.compilation.tap(pluginName, (compilation) => {\n      // Don't run minifier against mini-css-extract-plugin\n      if (compilation.name !== 'client' && compilation.name !== 'server') {\n        return\n      }\n\n      const cache = isWebpack5\n        ? compilation.getCache('TerserWebpackPlugin')\n        : new Webpack4Cache(this.options.cacheDir, {\n            SourceMapSource,\n            RawSource,\n          })\n\n      const handleHashForChunk = (hash, chunk) => {\n        // increment 'c' to invalidate cache\n        hash.update('c')\n      }\n\n      if (isWebpack5) {\n        const JSModulesHooks = webpack.javascript.JavascriptModulesPlugin.getCompilationHooks(\n          compilation\n        )\n        JSModulesHooks.chunkHash.tap(pluginName, (chunk, hash) => {\n          if (!chunk.hasRuntime()) return\n          return handleHashForChunk(hash, chunk)\n        })\n\n        compilation.hooks.processAssets.tapPromise(\n          {\n            name: pluginName,\n            stage: Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          },\n          (assets) =>\n            this.optimize(\n              compilation,\n              assets,\n              {\n                availableNumberOfCores,\n              },\n              cache,\n              { SourceMapSource, RawSource }\n            )\n        )\n\n        compilation.hooks.statsPrinter.tap(pluginName, (stats) => {\n          stats.hooks.print\n            .for('asset.info.minimized')\n            .tap('terser-webpack-plugin', (minimized, { green, formatFlag }) =>\n              // eslint-disable-next-line no-undefined\n              minimized ? green(formatFlag('minimized')) : undefined\n            )\n        })\n      } else {\n        compilation.mainTemplate.hooks.hashForChunk.tap(\n          pluginName,\n          handleHashForChunk\n        )\n        compilation.chunkTemplate.hooks.hashForChunk.tap(\n          pluginName,\n          handleHashForChunk\n        )\n\n        compilation.hooks.optimizeChunkAssets.tapPromise(\n          pluginName,\n          async (assets) => {\n            return await this.optimize(\n              compilation,\n              assets,\n              {\n                availableNumberOfCores,\n              },\n              cache,\n              { SourceMapSource, RawSource }\n            )\n          }\n        )\n      }\n    })\n  }\n}\n\nexport default TerserPlugin\n"]},"metadata":{},"sourceType":"script"}