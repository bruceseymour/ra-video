{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.__overrideCssConfiguration = __overrideCssConfiguration;\n\nvar _plugins = require(\"./plugins\");\n\nasync function __overrideCssConfiguration(rootDirectory, isProduction, config) {\n  var _config$module, _config$module$rules;\n\n  const postCssPlugins = await (0, _plugins.getPostCssPlugins)(rootDirectory, isProduction);\n\n  function patch(rule) {\n    if (rule.options && typeof rule.options === 'object' && typeof rule.options.postcssOptions === 'object') {\n      rule.options.postcssOptions.plugins = postCssPlugins;\n    } else if (Array.isArray(rule.oneOf)) {\n      rule.oneOf.forEach(patch);\n    } else if (Array.isArray(rule.use)) {\n      rule.use.forEach(u => {\n        if (typeof u === 'object') {\n          patch(u);\n        }\n      });\n    }\n  }\n\n  (_config$module = config.module) == null ? void 0 : (_config$module$rules = _config$module.rules) == null ? void 0 : _config$module$rules.forEach(entry => {\n    patch(entry);\n  });\n}","map":{"version":3,"sources":["../../../../../../build/webpack/config/blocks/css/overrideCssConfiguration.ts"],"names":["postCssPlugins","rule","Array","u","patch","entry"],"mappings":";;;;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEO,eAAA,0BAAA,CAAA,aAAA,EAAA,YAAA,EAAA,MAAA,EAIL;AAAA,MAAA,cAAA,EAAA,oBAAA;;AACA,QAAMA,cAAc,GAAG,MAAM,CAAA,GAAA,QAAA,CAAA,iBAAA,EAAA,aAAA,EAA7B,YAA6B,CAA7B;;AAEA,WAAA,KAAA,CAAA,IAAA,EAAkC;AAChC,QACEC,IAAI,CAAJA,OAAAA,IACA,OAAOA,IAAI,CAAX,OAAA,KADAA,QAAAA,IAEA,OAAOA,IAAI,CAAJA,OAAAA,CAAP,cAAA,KAHF,QAAA,EAIE;AACAA,MAAAA,IAAI,CAAJA,OAAAA,CAAAA,cAAAA,CAAAA,OAAAA,GAAAA,cAAAA;AALF,KAAA,MAMO,IAAIC,KAAK,CAALA,OAAAA,CAAcD,IAAI,CAAtB,KAAIC,CAAJ,EAA+B;AACpCD,MAAAA,IAAI,CAAJA,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA;AADK,KAAA,MAEA,IAAIC,KAAK,CAALA,OAAAA,CAAcD,IAAI,CAAtB,GAAIC,CAAJ,EAA6B;AAClCD,MAAAA,IAAI,CAAJA,GAAAA,CAAAA,OAAAA,CAAkBE,CAAD,IAAO;AACtB,YAAI,OAAA,CAAA,KAAJ,QAAA,EAA2B;AACzBC,UAAAA,KAAK,CAALA,CAAK,CAALA;AAEH;AAJDH,OAAAA;AAMH;AAED;;AAAA,GAAA,cAAA,GAAA,MAAM,CAAN,MAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,CAAA,oBAAA,GAAA,cAAA,CAAA,KAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,oBAAA,CAAA,OAAA,CAA+BI,KAAD,IAAW;AACvCD,IAAAA,KAAK,CAALA,KAAK,CAALA;AADF,GAAA,CAAA;AAGD","sourcesContent":["import { Configuration, RuleSetRule } from 'webpack'\nimport { getPostCssPlugins } from './plugins'\n\nexport async function __overrideCssConfiguration(\n  rootDirectory: string,\n  isProduction: boolean,\n  config: Configuration\n) {\n  const postCssPlugins = await getPostCssPlugins(rootDirectory, isProduction)\n\n  function patch(rule: RuleSetRule) {\n    if (\n      rule.options &&\n      typeof rule.options === 'object' &&\n      typeof rule.options.postcssOptions === 'object'\n    ) {\n      rule.options.postcssOptions.plugins = postCssPlugins\n    } else if (Array.isArray(rule.oneOf)) {\n      rule.oneOf.forEach(patch)\n    } else if (Array.isArray(rule.use)) {\n      rule.use.forEach((u) => {\n        if (typeof u === 'object') {\n          patch(u)\n        }\n      })\n    }\n  }\n\n  config.module?.rules?.forEach((entry) => {\n    patch(entry)\n  })\n}\n"]},"metadata":{},"sourceType":"script"}