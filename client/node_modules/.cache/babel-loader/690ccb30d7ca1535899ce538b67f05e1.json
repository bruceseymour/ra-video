{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  insertText,\n  createElement,\n  hasAttribute,\n  firstChildByTag\n} = require('../NodeUtils');\n\nconst safeParser = require('postcss-safe-parser');\n\nconst postcss = require('postcss');\n\nconst cssnano = require('cssnano-simple');\n\nconst allowedKeyframeProps = new Set(['animation-timing-function', 'offset-distance', 'opacity', 'visibility', 'transform', '-webkit-transform', '-moz-transform', '-o-transform', '-ms-transform']);\n/**\n * SeparateKeyframes - moves keyframes, media, and support from amp-custom\n * to amp-keyframes.\n *\n * This transformer supports the following options:\n *\n * - `minify [Boolean]`: compresses the CSS. The default is `true`.\n */\n\nclass SeparateKeyframes {\n  constructor(config) {\n    this.log_ = config.log.tag('SeparateKeyframes');\n    this.minify = config.minify !== false;\n  }\n\n  async transform(tree) {\n    const html = firstChildByTag(tree, 'html');\n    if (!html) return;\n    const head = firstChildByTag(html, 'head');\n    if (!head) return;\n    const body = firstChildByTag(html, 'body') || head;\n\n    if (this.isAmpStory(body)) {\n      return;\n    }\n\n    let stylesCustomTag;\n    let stylesKeyframesTag; // Get style[amp-custom] and remove style[amp-keyframes]\n\n    head.children = head.children.filter(tag => {\n      if (tag.tagName !== 'style') return true;\n\n      if (!stylesKeyframesTag && hasAttribute(tag, 'amp-keyframes')) {\n        stylesKeyframesTag = tag;\n        return false;\n      }\n\n      if (!stylesCustomTag && hasAttribute(tag, 'amp-custom')) {\n        stylesCustomTag = tag;\n      }\n\n      return true;\n    });\n    const extraPlugins = this.minify ? [cssnano] : []; // If no custom styles, there's nothing to do\n\n    if (!stylesCustomTag) return;\n    let stylesText = stylesCustomTag.children[0];\n    if (!stylesText || !stylesText.data) return;\n    stylesText = stylesText.data; // initialize an empty keyframes tree\n\n    const keyframesTree = postcss.parse('');\n\n    const isInvalidKeyframe = keyframe => {\n      let invalidProperty;\n\n      for (const frame of keyframe.nodes) {\n        for (const declaration of frame.nodes) {\n          if (!allowedKeyframeProps.has(declaration.prop)) {\n            invalidProperty = declaration.prop;\n            break;\n          }\n        }\n\n        if (invalidProperty) break;\n      }\n\n      return invalidProperty;\n    };\n\n    const keyframesPlugin = postcss.plugin('postcss-amp-keyframes-mover', () => {\n      return root => {\n        root.nodes = root.nodes.filter(rule => {\n          if (rule.name === 'keyframes') {\n            // We can't move a keyframe with an invalid property\n            // or else the style[amp-keyframes] is invalid\n            const invalidProperty = isInvalidKeyframe(rule);\n\n            if (invalidProperty) {\n              this.logInvalid(rule.name, invalidProperty);\n              return true;\n            }\n\n            keyframesTree.nodes.push(rule);\n            return false;\n          } // if rule has any keyframes duplicate rule and move just\n          // the keyframes\n\n\n          if (rule.name === 'media' || rule.name === 'supports') {\n            const copiedRule = Object.assign({}, rule, {\n              nodes: []\n            });\n            rule.nodes = rule.nodes.filter(rule => {\n              if (rule.name !== 'keyframes') return true;\n              const invalidProperty = isInvalidKeyframe(rule);\n\n              if (invalidProperty) {\n                this.logInvalid(rule.name, invalidProperty);\n                return true;\n              }\n\n              copiedRule.nodes.push(rule);\n            });\n\n            if (copiedRule.nodes.length) {\n              keyframesTree.nodes.push(copiedRule);\n            } // if no remaining rules remove it\n\n\n            return rule.nodes.length;\n          }\n\n          return true;\n        });\n      };\n    });\n    const {\n      css: cssResult\n    } = await postcss([...extraPlugins, keyframesPlugin]).process(stylesText, {\n      from: undefined,\n      parser: safeParser\n    }).catch(err => {\n      this.log_.warn(`Failed to process CSS`, err.message);\n      return {\n        css: stylesText\n      };\n    }); // if no rules moved nothing to do\n\n    if (keyframesTree.nodes.length === 0) {\n      // re-serialize to compress the CSS\n      stylesCustomTag.children[0].data = cssResult;\n      return;\n    }\n\n    if (!stylesKeyframesTag) {\n      // Check body for keyframes tag, removing it if found\n      body.children = body.children.filter(tag => {\n        if (tag.tagName === 'style' && hasAttribute(tag, 'amp-keyframes')) {\n          stylesKeyframesTag = tag;\n          return false;\n        }\n\n        return true;\n      });\n\n      if (!stylesKeyframesTag) {\n        stylesKeyframesTag = createElement('style', {\n          'amp-keyframes': ''\n        });\n      }\n    } // Insert keyframes styles to Node\n\n\n    const keyframesTextNode = stylesKeyframesTag.children[0];\n    const currentKeyframesTree = postcss.parse(keyframesTextNode && keyframesTextNode.data || '');\n    currentKeyframesTree.nodes = keyframesTree.nodes.concat(currentKeyframesTree.nodes);\n    let keyframesText = '';\n    postcss.stringify(currentKeyframesTree, part => {\n      keyframesText += part;\n    }); // if we have extra plugins make sure process the keyframes CSS with them\n\n    if (extraPlugins.length > 0) {\n      const cssResult = await postcss(extraPlugins).process(keyframesText, {\n        from: undefined,\n        parser: safeParser\n      });\n      keyframesText = cssResult.css;\n    }\n\n    if (!keyframesTextNode) {\n      insertText(stylesKeyframesTag, keyframesText);\n    } else {\n      keyframesTextNode.data = keyframesText;\n    } // Add keyframes tag to end of body\n\n\n    body.children.push(stylesKeyframesTag); // Update stylesCustomTag with filtered styles\n\n    stylesCustomTag.children[0].data = cssResult;\n  }\n\n  logInvalid(name, property) {\n    this.log_.warn(`Found invalid keyframe property '${property}' in '${name}' not moving to style[amp-keyframes]`);\n  }\n\n  isAmpStory(body) {\n    return body.children.some(child => child.tagName === 'amp-story');\n  }\n\n}\n\nmodule.exports = SeparateKeyframes;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/SeparateKeyframes.js"],"names":["insertText","createElement","hasAttribute","firstChildByTag","require","safeParser","postcss","cssnano","allowedKeyframeProps","Set","SeparateKeyframes","constructor","config","log_","log","tag","minify","transform","tree","html","head","body","isAmpStory","stylesCustomTag","stylesKeyframesTag","children","filter","tagName","extraPlugins","stylesText","data","keyframesTree","parse","isInvalidKeyframe","keyframe","invalidProperty","frame","nodes","declaration","has","prop","keyframesPlugin","plugin","root","rule","name","logInvalid","push","copiedRule","Object","assign","length","css","cssResult","process","from","undefined","parser","catch","err","warn","message","keyframesTextNode","currentKeyframesTree","concat","keyframesText","stringify","part","property","some","child","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {insertText, createElement, hasAttribute, firstChildByTag} = require('../NodeUtils');\nconst safeParser = require('postcss-safe-parser');\nconst postcss = require('postcss');\n\nconst cssnano = require('cssnano-simple');\n\nconst allowedKeyframeProps = new Set([\n  'animation-timing-function',\n  'offset-distance',\n  'opacity',\n  'visibility',\n  'transform',\n  '-webkit-transform',\n  '-moz-transform',\n  '-o-transform',\n  '-ms-transform',\n]);\n\n/**\n * SeparateKeyframes - moves keyframes, media, and support from amp-custom\n * to amp-keyframes.\n *\n * This transformer supports the following options:\n *\n * - `minify [Boolean]`: compresses the CSS. The default is `true`.\n */\nclass SeparateKeyframes {\n  constructor(config) {\n    this.log_ = config.log.tag('SeparateKeyframes');\n    this.minify = config.minify !== false;\n  }\n\n  async transform(tree) {\n    const html = firstChildByTag(tree, 'html');\n    if (!html) return;\n    const head = firstChildByTag(html, 'head');\n    if (!head) return;\n    const body = firstChildByTag(html, 'body') || head;\n    if (this.isAmpStory(body)) {\n      return;\n    }\n    let stylesCustomTag;\n    let stylesKeyframesTag;\n\n    // Get style[amp-custom] and remove style[amp-keyframes]\n    head.children = head.children.filter((tag) => {\n      if (tag.tagName !== 'style') return true;\n\n      if (!stylesKeyframesTag && hasAttribute(tag, 'amp-keyframes')) {\n        stylesKeyframesTag = tag;\n        return false;\n      }\n      if (!stylesCustomTag && hasAttribute(tag, 'amp-custom')) {\n        stylesCustomTag = tag;\n      }\n      return true;\n    });\n\n    const extraPlugins = this.minify ? [cssnano] : [];\n\n    // If no custom styles, there's nothing to do\n    if (!stylesCustomTag) return;\n    let stylesText = stylesCustomTag.children[0];\n\n    if (!stylesText || !stylesText.data) return;\n    stylesText = stylesText.data;\n\n    // initialize an empty keyframes tree\n    const keyframesTree = postcss.parse('');\n\n    const isInvalidKeyframe = (keyframe) => {\n      let invalidProperty;\n      for (const frame of keyframe.nodes) {\n        for (const declaration of frame.nodes) {\n          if (!allowedKeyframeProps.has(declaration.prop)) {\n            invalidProperty = declaration.prop;\n            break;\n          }\n        }\n        if (invalidProperty) break;\n      }\n      return invalidProperty;\n    };\n\n    const keyframesPlugin = postcss.plugin('postcss-amp-keyframes-mover', () => {\n      return (root) => {\n        root.nodes = root.nodes.filter((rule) => {\n          if (rule.name === 'keyframes') {\n            // We can't move a keyframe with an invalid property\n            // or else the style[amp-keyframes] is invalid\n            const invalidProperty = isInvalidKeyframe(rule);\n            if (invalidProperty) {\n              this.logInvalid(rule.name, invalidProperty);\n              return true;\n            }\n            keyframesTree.nodes.push(rule);\n            return false;\n          }\n          // if rule has any keyframes duplicate rule and move just\n          // the keyframes\n          if (rule.name === 'media' || rule.name === 'supports') {\n            const copiedRule = Object.assign({}, rule, {nodes: []});\n            rule.nodes = rule.nodes.filter((rule) => {\n              if (rule.name !== 'keyframes') return true;\n              const invalidProperty = isInvalidKeyframe(rule);\n              if (invalidProperty) {\n                this.logInvalid(rule.name, invalidProperty);\n                return true;\n              }\n              copiedRule.nodes.push(rule);\n            });\n            if (copiedRule.nodes.length) {\n              keyframesTree.nodes.push(copiedRule);\n            }\n            // if no remaining rules remove it\n            return rule.nodes.length;\n          }\n          return true;\n        });\n      };\n    });\n\n    const {css: cssResult} = await postcss([...extraPlugins, keyframesPlugin])\n      .process(stylesText, {\n        from: undefined,\n        parser: safeParser,\n      })\n      .catch((err) => {\n        this.log_.warn(`Failed to process CSS`, err.message);\n        return {css: stylesText};\n      });\n\n    // if no rules moved nothing to do\n    if (keyframesTree.nodes.length === 0) {\n      // re-serialize to compress the CSS\n      stylesCustomTag.children[0].data = cssResult;\n      return;\n    }\n\n    if (!stylesKeyframesTag) {\n      // Check body for keyframes tag, removing it if found\n      body.children = body.children.filter((tag) => {\n        if (tag.tagName === 'style' && hasAttribute(tag, 'amp-keyframes')) {\n          stylesKeyframesTag = tag;\n          return false;\n        }\n        return true;\n      });\n\n      if (!stylesKeyframesTag) {\n        stylesKeyframesTag = createElement('style', {'amp-keyframes': ''});\n      }\n    }\n    // Insert keyframes styles to Node\n    const keyframesTextNode = stylesKeyframesTag.children[0];\n    const currentKeyframesTree = postcss.parse((keyframesTextNode && keyframesTextNode.data) || '');\n    currentKeyframesTree.nodes = keyframesTree.nodes.concat(currentKeyframesTree.nodes);\n\n    let keyframesText = '';\n    postcss.stringify(currentKeyframesTree, (part) => {\n      keyframesText += part;\n    });\n\n    // if we have extra plugins make sure process the keyframes CSS with them\n    if (extraPlugins.length > 0) {\n      const cssResult = await postcss(extraPlugins).process(keyframesText, {\n        from: undefined,\n        parser: safeParser,\n      });\n      keyframesText = cssResult.css;\n    }\n\n    if (!keyframesTextNode) {\n      insertText(stylesKeyframesTag, keyframesText);\n    } else {\n      keyframesTextNode.data = keyframesText;\n    }\n\n    // Add keyframes tag to end of body\n    body.children.push(stylesKeyframesTag);\n    // Update stylesCustomTag with filtered styles\n    stylesCustomTag.children[0].data = cssResult;\n  }\n  logInvalid(name, property) {\n    this.log_.warn(\n      `Found invalid keyframe property '${property}' in '${name}' not moving to style[amp-keyframes]`\n    );\n  }\n\n  isAmpStory(body) {\n    return body.children.some((child) => child.tagName === 'amp-story');\n  }\n}\n\nmodule.exports = SeparateKeyframes;\n"]},"metadata":{},"sourceType":"script"}