{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.findPagesDir = findPagesDir;\nexports.existsSync = void 0;\n\nvar _fs = _interopRequireDefault(require(\"fs\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst existsSync = f => {\n  try {\n    _fs.default.accessSync(f, _fs.default.constants.F_OK);\n\n    return true;\n  } catch (_) {\n    return false;\n  }\n};\n\nexports.existsSync = existsSync;\n\nfunction findPagesDir(dir) {\n  // prioritize ./pages over ./src/pages\n  let curDir = _path.default.join(dir, 'pages');\n\n  if (existsSync(curDir)) return curDir;\n  curDir = _path.default.join(dir, 'src/pages');\n  if (existsSync(curDir)) return curDir; // Check one level up the tree to see if the pages directory might be there\n\n  if (existsSync(_path.default.join(dir, '..', 'pages'))) {\n    throw new Error('> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?');\n  }\n\n  throw new Error(\"> Couldn't find a `pages` directory. Please create one under the project root\");\n}","map":{"version":3,"sources":["../../lib/find-pages-dir.ts"],"names":["existsSync","f","fs","curDir","path"],"mappings":";;;;;;AAAA,IAAA,GAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;;;;;AAEO;;AAAA,MAAMA,UAAU,GAAIC,CAAD,IAAwB;AAChD,MAAI;AACFC,IAAAA,GAAAA,CAAAA,OAAAA,CAAAA,UAAAA,CAAAA,CAAAA,EAAiBA,GAAAA,CAAAA,OAAAA,CAAAA,SAAAA,CAAjBA,IAAAA;;AACA,WAAA,IAAA;AACA,GAHF,CAGE,OAAA,CAAA,EAAU;AACV,WAAA,KAAA;AAEH;AAPM,CAAA;;;;AASA,SAAA,YAAA,CAAA,GAAA,EAA2C;AAChD;AACA,MAAIC,MAAM,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAb,OAAaA,CAAb;;AACA,MAAIJ,UAAU,CAAd,MAAc,CAAd,EAAwB,OAAA,MAAA;AAExBG,EAAAA,MAAM,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAATD,WAASC,CAATD;AACA,MAAIH,UAAU,CAAd,MAAc,CAAd,EAAwB,OAAA,MAAA,CANwB,CAQhD;;AACA,MAAIA,UAAU,CAACI,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,EAAAA,IAAAA,EAAf,OAAeA,CAAD,CAAd,EAA+C;AAC7C,UAAM,IAAA,KAAA,CAAN,2FAAM,CAAN;AAKF;;AAAA,QAAM,IAAA,KAAA,CAAN,+EAAM,CAAN;AAGD","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nexport const existsSync = (f: string): boolean => {\n  try {\n    fs.accessSync(f, fs.constants.F_OK)\n    return true\n  } catch (_) {\n    return false\n  }\n}\n\nexport function findPagesDir(dir: string): string {\n  // prioritize ./pages over ./src/pages\n  let curDir = path.join(dir, 'pages')\n  if (existsSync(curDir)) return curDir\n\n  curDir = path.join(dir, 'src/pages')\n  if (existsSync(curDir)) return curDir\n\n  // Check one level up the tree to see if the pages directory might be there\n  if (existsSync(path.join(dir, '..', 'pages'))) {\n    throw new Error(\n      '> No `pages` directory found. Did you mean to run `next` in the parent (`../`) directory?'\n    )\n  }\n\n  throw new Error(\n    \"> Couldn't find a `pages` directory. Please create one under the project root\"\n  )\n}\n"]},"metadata":{},"sourceType":"script"}