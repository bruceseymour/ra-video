{"ast":null,"code":"/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass AmpValidatorRules {\n  /**\n   * Creates an instance of AmpValidatorRules.\n   * @param {Object} rules - rules imported from validator.json\n   */\n  constructor(rules) {\n    /**\n     * Unprocessed validator rules.\n     * @type {Object}\n     */\n    this.raw = rules;\n    /**\n     * List of all the tags processed from rules.\n     * @type {Array<Object>}\n     */\n\n    this.tags = [];\n    /**\n     * List of all the extensions processed from rules.\n     * @type {Array<Object>}\n     */\n\n    this.extensions = [];\n    /**\n     * Map of errors and their associated format and specificity.\n     * @type {Object}\n     */\n\n    this.errors = {};\n    this.extensionCache_ = {};\n    this.initRules_(rules);\n  }\n  /**\n   * Returns the list of supported tags for the given format.\n   *\n   * @param {string} format - Format to return tags for\n   * @param {boolean} [transformed] - Use transformed version of the format\n   * @return {Array<Object>} List of tags supported by the given format\n   */\n\n\n  getTagsForFormat(format, transformed = false) {\n    format = format.toLowerCase();\n    return this.tags.filter(tag => tag.htmlFormat.includes(format.toUpperCase()) && this.checkEntityFormat_(tag, format) && this.checkEntityTransformed_(tag, transformed)).map(tag => {\n      tag = Object.assign({}, tag);\n      tag.attrs = tag.attrs.filter(attr => this.checkEntityFormat_(attr, format) && this.checkEntityTransformed_(attr, transformed));\n      return tag;\n    });\n  }\n  /**\n   * Returns the AMP extension spec for the given format and name.\n   *\n   * @param {string} format - Format to filter on\n   * @param {string} extension - Extension name\n   * @return {Object} Extension spec\n   */\n\n\n  getExtension(format, extension) {\n    format = format.toLowerCase();\n    extension = extension.toLowerCase();\n    const key = `${format}|${extension}`;\n    return this.extensionCache_[key] || null;\n  }\n\n  checkEntityTransformed_(entity, transformed) {\n    const isEnabled = this.isEnabled_(entity, 'transformed');\n    const isDisabled = this.isDisabled_(entity, 'transformed');\n\n    if (transformed) {\n      return isEnabled !== false && isDisabled !== true;\n    }\n\n    return isEnabled !== true && isDisabled !== false;\n  }\n\n  checkEntityFormat_(entity, format) {\n    format = format.toLowerCase();\n    const isEnabled = this.isEnabled_(entity, format);\n    const isDisabled = this.isDisabled_(entity, format);\n    return isEnabled !== false && isDisabled !== true;\n  }\n\n  isEnabled_(entity, format) {\n    if (!entity.enabledBy) {\n      return null;\n    }\n\n    return entity.enabledBy.includes(format);\n  }\n\n  isDisabled_(entity, format) {\n    if (!entity.disabledBy) {\n      return null;\n    }\n\n    return entity.disabledBy.includes(format);\n  }\n\n  initRules_(rules) {\n    this.initErrors_(rules);\n    this.initAttrLists_(rules);\n    this.initTags_(rules);\n    this.initExtensions_(rules);\n  }\n\n  initErrors_(rules) {\n    this.errors = {};\n\n    for (const errorFormat of rules.errorFormats) {\n      const error = this.errors[errorFormat.code] || {};\n      error.format = errorFormat.format;\n      this.errors[errorFormat.code] = error;\n    }\n\n    for (const errorSpecificity of rules.errorSpecificity) {\n      const error = this.errors[errorSpecificity.code] || {};\n      error.specificity = errorSpecificity.specificity;\n      this.errors[errorSpecificity.code] = error;\n    }\n  }\n\n  initAttrLists_(rules) {\n    this.attrLists_ = {};\n    this.specialAttrLists_ = {};\n\n    for (const {\n      name,\n      attrs\n    } of rules.attrLists) {\n      if (name.startsWith('$')) {\n        this.specialAttrLists_[name] = attrs;\n      } else {\n        this.attrLists_[name] = attrs;\n      }\n    }\n\n    this.specialAttrLists_.$AMP_LAYOUT_ATTRS.forEach(attr => attr.layout = true);\n    this.specialAttrLists_.$GLOBAL_ATTRS.forEach(attr => attr.global = true);\n  }\n\n  initTags_(rules) {\n    this.tags = rules.tags.filter(tag => !tag.extensionSpec).map(tag => {\n      tag.attrs = tag.attrs || []; // `attrLists` contains list IDs that are looked up from the global\n      // attribute lists and merged into `attrs`.\n\n      if (tag.attrLists) {\n        for (const attrList of tag.attrLists) {\n          tag.attrs.push(...this.attrLists_[attrList]);\n        }\n\n        delete tag.attrLists;\n      } // $AMP_LAYOUT_ATTRS are present in all components with ampLayout\n\n\n      if (tag.ampLayout) {\n        tag.attrs.push(...this.specialAttrLists_.$AMP_LAYOUT_ATTRS);\n      } // $GLOBAL_ATTRS are present in all components\n\n\n      tag.attrs.push(...this.specialAttrLists_.$GLOBAL_ATTRS);\n      return tag;\n    });\n  }\n\n  initExtensions_(rules) {\n    this.extensions = rules.tags.filter(tag => tag.extensionSpec).map(tag => Object.assign({}, tag.extensionSpec, {\n      htmlFormat: tag.htmlFormat\n    }));\n\n    for (const extension of this.extensions) {\n      const name = extension.name.toLowerCase();\n\n      for (let format of extension.htmlFormat) {\n        format = format.toLowerCase();\n        const key = `${format}|${name}`;\n        this.extensionCache_[key] = extension;\n      }\n    }\n  }\n\n}\n\nmodule.exports = AmpValidatorRules;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-validator-rules/lib/AmpValidatorRules.js"],"names":["AmpValidatorRules","constructor","rules","raw","tags","extensions","errors","extensionCache_","initRules_","getTagsForFormat","format","transformed","toLowerCase","filter","tag","htmlFormat","includes","toUpperCase","checkEntityFormat_","checkEntityTransformed_","map","Object","assign","attrs","attr","getExtension","extension","key","entity","isEnabled","isEnabled_","isDisabled","isDisabled_","enabledBy","disabledBy","initErrors_","initAttrLists_","initTags_","initExtensions_","errorFormat","errorFormats","error","code","errorSpecificity","specificity","attrLists_","specialAttrLists_","name","attrLists","startsWith","$AMP_LAYOUT_ATTRS","forEach","layout","$GLOBAL_ATTRS","global","extensionSpec","attrList","push","ampLayout","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,iBAAN,CAAwB;AACtB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AACJ;AACA;AACA;AACI,SAAKC,GAAL,GAAWD,KAAX;AACA;AACJ;AACA;AACA;;AACI,SAAKE,IAAL,GAAY,EAAZ;AACA;AACJ;AACA;AACA;;AACI,SAAKC,UAAL,GAAkB,EAAlB;AACA;AACJ;AACA;AACA;;AACI,SAAKC,MAAL,GAAc,EAAd;AAEA,SAAKC,eAAL,GAAuB,EAAvB;AACA,SAAKC,UAAL,CAAgBN,KAAhB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEO,EAAAA,gBAAgB,CAACC,MAAD,EAASC,WAAW,GAAG,KAAvB,EAA8B;AAC5CD,IAAAA,MAAM,GAAGA,MAAM,CAACE,WAAP,EAAT;AACA,WAAO,KAAKR,IAAL,CACJS,MADI,CAEFC,GAAD,IACEA,GAAG,CAACC,UAAJ,CAAeC,QAAf,CAAwBN,MAAM,CAACO,WAAP,EAAxB,KACA,KAAKC,kBAAL,CAAwBJ,GAAxB,EAA6BJ,MAA7B,CADA,IAEA,KAAKS,uBAAL,CAA6BL,GAA7B,EAAkCH,WAAlC,CALC,EAOJS,GAPI,CAOCN,GAAD,IAAS;AACZA,MAAAA,GAAG,GAAGO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,GAAlB,CAAN;AACAA,MAAAA,GAAG,CAACS,KAAJ,GAAYT,GAAG,CAACS,KAAJ,CAAUV,MAAV,CACTW,IAAD,IACE,KAAKN,kBAAL,CAAwBM,IAAxB,EAA8Bd,MAA9B,KAAyC,KAAKS,uBAAL,CAA6BK,IAA7B,EAAmCb,WAAnC,CAFjC,CAAZ;AAIA,aAAOG,GAAP;AACD,KAdI,CAAP;AAeD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,YAAY,CAACf,MAAD,EAASgB,SAAT,EAAoB;AAC9BhB,IAAAA,MAAM,GAAGA,MAAM,CAACE,WAAP,EAAT;AACAc,IAAAA,SAAS,GAAGA,SAAS,CAACd,WAAV,EAAZ;AACA,UAAMe,GAAG,GAAI,GAAEjB,MAAO,IAAGgB,SAAU,EAAnC;AACA,WAAO,KAAKnB,eAAL,CAAqBoB,GAArB,KAA6B,IAApC;AACD;;AAEDR,EAAAA,uBAAuB,CAACS,MAAD,EAASjB,WAAT,EAAsB;AAC3C,UAAMkB,SAAS,GAAG,KAAKC,UAAL,CAAgBF,MAAhB,EAAwB,aAAxB,CAAlB;AACA,UAAMG,UAAU,GAAG,KAAKC,WAAL,CAAiBJ,MAAjB,EAAyB,aAAzB,CAAnB;;AACA,QAAIjB,WAAJ,EAAiB;AACf,aAAOkB,SAAS,KAAK,KAAd,IAAuBE,UAAU,KAAK,IAA7C;AACD;;AACD,WAAOF,SAAS,KAAK,IAAd,IAAsBE,UAAU,KAAK,KAA5C;AACD;;AAEDb,EAAAA,kBAAkB,CAACU,MAAD,EAASlB,MAAT,EAAiB;AACjCA,IAAAA,MAAM,GAAGA,MAAM,CAACE,WAAP,EAAT;AACA,UAAMiB,SAAS,GAAG,KAAKC,UAAL,CAAgBF,MAAhB,EAAwBlB,MAAxB,CAAlB;AACA,UAAMqB,UAAU,GAAG,KAAKC,WAAL,CAAiBJ,MAAjB,EAAyBlB,MAAzB,CAAnB;AACA,WAAOmB,SAAS,KAAK,KAAd,IAAuBE,UAAU,KAAK,IAA7C;AACD;;AAEDD,EAAAA,UAAU,CAACF,MAAD,EAASlB,MAAT,EAAiB;AACzB,QAAI,CAACkB,MAAM,CAACK,SAAZ,EAAuB;AACrB,aAAO,IAAP;AACD;;AACD,WAAOL,MAAM,CAACK,SAAP,CAAiBjB,QAAjB,CAA0BN,MAA1B,CAAP;AACD;;AAEDsB,EAAAA,WAAW,CAACJ,MAAD,EAASlB,MAAT,EAAiB;AAC1B,QAAI,CAACkB,MAAM,CAACM,UAAZ,EAAwB;AACtB,aAAO,IAAP;AACD;;AACD,WAAON,MAAM,CAACM,UAAP,CAAkBlB,QAAlB,CAA2BN,MAA3B,CAAP;AACD;;AAEDF,EAAAA,UAAU,CAACN,KAAD,EAAQ;AAChB,SAAKiC,WAAL,CAAiBjC,KAAjB;AACA,SAAKkC,cAAL,CAAoBlC,KAApB;AACA,SAAKmC,SAAL,CAAenC,KAAf;AACA,SAAKoC,eAAL,CAAqBpC,KAArB;AACD;;AAEDiC,EAAAA,WAAW,CAACjC,KAAD,EAAQ;AACjB,SAAKI,MAAL,GAAc,EAAd;;AACA,SAAK,MAAMiC,WAAX,IAA0BrC,KAAK,CAACsC,YAAhC,EAA8C;AAC5C,YAAMC,KAAK,GAAG,KAAKnC,MAAL,CAAYiC,WAAW,CAACG,IAAxB,KAAiC,EAA/C;AACAD,MAAAA,KAAK,CAAC/B,MAAN,GAAe6B,WAAW,CAAC7B,MAA3B;AACA,WAAKJ,MAAL,CAAYiC,WAAW,CAACG,IAAxB,IAAgCD,KAAhC;AACD;;AACD,SAAK,MAAME,gBAAX,IAA+BzC,KAAK,CAACyC,gBAArC,EAAuD;AACrD,YAAMF,KAAK,GAAG,KAAKnC,MAAL,CAAYqC,gBAAgB,CAACD,IAA7B,KAAsC,EAApD;AACAD,MAAAA,KAAK,CAACG,WAAN,GAAoBD,gBAAgB,CAACC,WAArC;AACA,WAAKtC,MAAL,CAAYqC,gBAAgB,CAACD,IAA7B,IAAqCD,KAArC;AACD;AACF;;AAEDL,EAAAA,cAAc,CAAClC,KAAD,EAAQ;AACpB,SAAK2C,UAAL,GAAkB,EAAlB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;;AACA,SAAK,MAAM;AAACC,MAAAA,IAAD;AAAOxB,MAAAA;AAAP,KAAX,IAA4BrB,KAAK,CAAC8C,SAAlC,EAA6C;AAC3C,UAAID,IAAI,CAACE,UAAL,CAAgB,GAAhB,CAAJ,EAA0B;AACxB,aAAKH,iBAAL,CAAuBC,IAAvB,IAA+BxB,KAA/B;AACD,OAFD,MAEO;AACL,aAAKsB,UAAL,CAAgBE,IAAhB,IAAwBxB,KAAxB;AACD;AACF;;AACD,SAAKuB,iBAAL,CAAuBI,iBAAvB,CAAyCC,OAAzC,CAAkD3B,IAAD,IAAWA,IAAI,CAAC4B,MAAL,GAAc,IAA1E;AACA,SAAKN,iBAAL,CAAuBO,aAAvB,CAAqCF,OAArC,CAA8C3B,IAAD,IAAWA,IAAI,CAAC8B,MAAL,GAAc,IAAtE;AACD;;AAEDjB,EAAAA,SAAS,CAACnC,KAAD,EAAQ;AACf,SAAKE,IAAL,GAAYF,KAAK,CAACE,IAAN,CACTS,MADS,CACDC,GAAD,IAAS,CAACA,GAAG,CAACyC,aADZ,EAETnC,GAFS,CAEJN,GAAD,IAAS;AACZA,MAAAA,GAAG,CAACS,KAAJ,GAAYT,GAAG,CAACS,KAAJ,IAAa,EAAzB,CADY,CAGZ;AACA;;AACA,UAAIT,GAAG,CAACkC,SAAR,EAAmB;AACjB,aAAK,MAAMQ,QAAX,IAAuB1C,GAAG,CAACkC,SAA3B,EAAsC;AACpClC,UAAAA,GAAG,CAACS,KAAJ,CAAUkC,IAAV,CAAe,GAAG,KAAKZ,UAAL,CAAgBW,QAAhB,CAAlB;AACD;;AACD,eAAO1C,GAAG,CAACkC,SAAX;AACD,OAVW,CAYZ;;;AACA,UAAIlC,GAAG,CAAC4C,SAAR,EAAmB;AACjB5C,QAAAA,GAAG,CAACS,KAAJ,CAAUkC,IAAV,CAAe,GAAG,KAAKX,iBAAL,CAAuBI,iBAAzC;AACD,OAfW,CAiBZ;;;AACApC,MAAAA,GAAG,CAACS,KAAJ,CAAUkC,IAAV,CAAe,GAAG,KAAKX,iBAAL,CAAuBO,aAAzC;AAEA,aAAOvC,GAAP;AACD,KAvBS,CAAZ;AAwBD;;AAEDwB,EAAAA,eAAe,CAACpC,KAAD,EAAQ;AACrB,SAAKG,UAAL,GAAkBH,KAAK,CAACE,IAAN,CACfS,MADe,CACPC,GAAD,IAASA,GAAG,CAACyC,aADL,EAEfnC,GAFe,CAEVN,GAAD,IAASO,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,GAAG,CAACyC,aAAtB,EAAqC;AAACxC,MAAAA,UAAU,EAAED,GAAG,CAACC;AAAjB,KAArC,CAFE,CAAlB;;AAIA,SAAK,MAAMW,SAAX,IAAwB,KAAKrB,UAA7B,EAAyC;AACvC,YAAM0C,IAAI,GAAGrB,SAAS,CAACqB,IAAV,CAAenC,WAAf,EAAb;;AACA,WAAK,IAAIF,MAAT,IAAmBgB,SAAS,CAACX,UAA7B,EAAyC;AACvCL,QAAAA,MAAM,GAAGA,MAAM,CAACE,WAAP,EAAT;AACA,cAAMe,GAAG,GAAI,GAAEjB,MAAO,IAAGqC,IAAK,EAA9B;AACA,aAAKxC,eAAL,CAAqBoB,GAArB,IAA4BD,SAA5B;AACD;AACF;AACF;;AAhLqB;;AAmLxBiC,MAAM,CAACC,OAAP,GAAiB5D,iBAAjB","sourcesContent":["/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nclass AmpValidatorRules {\n  /**\n   * Creates an instance of AmpValidatorRules.\n   * @param {Object} rules - rules imported from validator.json\n   */\n  constructor(rules) {\n    /**\n     * Unprocessed validator rules.\n     * @type {Object}\n     */\n    this.raw = rules;\n    /**\n     * List of all the tags processed from rules.\n     * @type {Array<Object>}\n     */\n    this.tags = [];\n    /**\n     * List of all the extensions processed from rules.\n     * @type {Array<Object>}\n     */\n    this.extensions = [];\n    /**\n     * Map of errors and their associated format and specificity.\n     * @type {Object}\n     */\n    this.errors = {};\n\n    this.extensionCache_ = {};\n    this.initRules_(rules);\n  }\n\n  /**\n   * Returns the list of supported tags for the given format.\n   *\n   * @param {string} format - Format to return tags for\n   * @param {boolean} [transformed] - Use transformed version of the format\n   * @return {Array<Object>} List of tags supported by the given format\n   */\n  getTagsForFormat(format, transformed = false) {\n    format = format.toLowerCase();\n    return this.tags\n      .filter(\n        (tag) =>\n          tag.htmlFormat.includes(format.toUpperCase()) &&\n          this.checkEntityFormat_(tag, format) &&\n          this.checkEntityTransformed_(tag, transformed)\n      )\n      .map((tag) => {\n        tag = Object.assign({}, tag);\n        tag.attrs = tag.attrs.filter(\n          (attr) =>\n            this.checkEntityFormat_(attr, format) && this.checkEntityTransformed_(attr, transformed)\n        );\n        return tag;\n      });\n  }\n\n  /**\n   * Returns the AMP extension spec for the given format and name.\n   *\n   * @param {string} format - Format to filter on\n   * @param {string} extension - Extension name\n   * @return {Object} Extension spec\n   */\n  getExtension(format, extension) {\n    format = format.toLowerCase();\n    extension = extension.toLowerCase();\n    const key = `${format}|${extension}`;\n    return this.extensionCache_[key] || null;\n  }\n\n  checkEntityTransformed_(entity, transformed) {\n    const isEnabled = this.isEnabled_(entity, 'transformed');\n    const isDisabled = this.isDisabled_(entity, 'transformed');\n    if (transformed) {\n      return isEnabled !== false && isDisabled !== true;\n    }\n    return isEnabled !== true && isDisabled !== false;\n  }\n\n  checkEntityFormat_(entity, format) {\n    format = format.toLowerCase();\n    const isEnabled = this.isEnabled_(entity, format);\n    const isDisabled = this.isDisabled_(entity, format);\n    return isEnabled !== false && isDisabled !== true;\n  }\n\n  isEnabled_(entity, format) {\n    if (!entity.enabledBy) {\n      return null;\n    }\n    return entity.enabledBy.includes(format);\n  }\n\n  isDisabled_(entity, format) {\n    if (!entity.disabledBy) {\n      return null;\n    }\n    return entity.disabledBy.includes(format);\n  }\n\n  initRules_(rules) {\n    this.initErrors_(rules);\n    this.initAttrLists_(rules);\n    this.initTags_(rules);\n    this.initExtensions_(rules);\n  }\n\n  initErrors_(rules) {\n    this.errors = {};\n    for (const errorFormat of rules.errorFormats) {\n      const error = this.errors[errorFormat.code] || {};\n      error.format = errorFormat.format;\n      this.errors[errorFormat.code] = error;\n    }\n    for (const errorSpecificity of rules.errorSpecificity) {\n      const error = this.errors[errorSpecificity.code] || {};\n      error.specificity = errorSpecificity.specificity;\n      this.errors[errorSpecificity.code] = error;\n    }\n  }\n\n  initAttrLists_(rules) {\n    this.attrLists_ = {};\n    this.specialAttrLists_ = {};\n    for (const {name, attrs} of rules.attrLists) {\n      if (name.startsWith('$')) {\n        this.specialAttrLists_[name] = attrs;\n      } else {\n        this.attrLists_[name] = attrs;\n      }\n    }\n    this.specialAttrLists_.$AMP_LAYOUT_ATTRS.forEach((attr) => (attr.layout = true));\n    this.specialAttrLists_.$GLOBAL_ATTRS.forEach((attr) => (attr.global = true));\n  }\n\n  initTags_(rules) {\n    this.tags = rules.tags\n      .filter((tag) => !tag.extensionSpec)\n      .map((tag) => {\n        tag.attrs = tag.attrs || [];\n\n        // `attrLists` contains list IDs that are looked up from the global\n        // attribute lists and merged into `attrs`.\n        if (tag.attrLists) {\n          for (const attrList of tag.attrLists) {\n            tag.attrs.push(...this.attrLists_[attrList]);\n          }\n          delete tag.attrLists;\n        }\n\n        // $AMP_LAYOUT_ATTRS are present in all components with ampLayout\n        if (tag.ampLayout) {\n          tag.attrs.push(...this.specialAttrLists_.$AMP_LAYOUT_ATTRS);\n        }\n\n        // $GLOBAL_ATTRS are present in all components\n        tag.attrs.push(...this.specialAttrLists_.$GLOBAL_ATTRS);\n\n        return tag;\n      });\n  }\n\n  initExtensions_(rules) {\n    this.extensions = rules.tags\n      .filter((tag) => tag.extensionSpec)\n      .map((tag) => Object.assign({}, tag.extensionSpec, {htmlFormat: tag.htmlFormat}));\n\n    for (const extension of this.extensions) {\n      const name = extension.name.toLowerCase();\n      for (let format of extension.htmlFormat) {\n        format = format.toLowerCase();\n        const key = `${format}|${name}`;\n        this.extensionCache_[key] = extension;\n      }\n    }\n  }\n}\n\nmodule.exports = AmpValidatorRules;\n"]},"metadata":{},"sourceType":"script"}