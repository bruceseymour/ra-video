{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getTypeScriptIntent = getTypeScriptIntent;\n\nvar _fs = require(\"fs\");\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fileExists = require(\"../file-exists\");\n\nvar _recursiveReaddir = require(\"../recursive-readdir\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nasync function getTypeScriptIntent(baseDir, pagesDir) {\n  const tsConfigPath = _path.default.join(baseDir, 'tsconfig.json'); // The integration turns on if we find a `tsconfig.json` in the user's\n  // project.\n\n\n  const hasTypeScriptConfiguration = await (0, _fileExists.fileExists)(tsConfigPath);\n\n  if (hasTypeScriptConfiguration) {\n    const content = await _fs.promises.readFile(tsConfigPath, {\n      encoding: 'utf8'\n    }).then(txt => txt.trim(), () => null);\n    return {\n      firstTimeSetup: content === '' || content === '{}'\n    };\n  } // Next.js also offers a friendly setup mode that bootstraps a TypeScript\n  // project for the user when we detect TypeScript files. So, we need to check\n  // the `pages/` directory for a TypeScript file.\n  // Checking all directories is too slow, so this is a happy medium.\n\n\n  const typescriptFiles = await (0, _recursiveReaddir.recursiveReadDir)(pagesDir, /.*\\.(ts|tsx)$/, /(node_modules|.*\\.d\\.ts)/);\n\n  if (typescriptFiles.length) {\n    return {\n      firstTimeSetup: true\n    };\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../lib/typescript/getTypeScriptIntent.ts"],"names":["tsConfigPath","path","hasTypeScriptConfiguration","content","fs","encoding","txt","firstTimeSetup","typescriptFiles"],"mappings":";;;;;AAAA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,iBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;;;AAIO;;AAAA,eAAA,mBAAA,CAAA,OAAA,EAAA,QAAA,EAG8B;AACnC,QAAMA,YAAY,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAArB,eAAqBA,CAArB,CADmC,CAGnC;AACA;;;AACA,QAAMC,0BAA0B,GAAG,MAAM,CAAA,GAAA,WAAA,CAAA,UAAA,EAAzC,YAAyC,CAAzC;;AACA,MAAA,0BAAA,EAAgC;AAC9B,UAAMC,OAAO,GAAG,MAAMC,GAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,EAA0B;AAAEC,MAAAA,QAAQ,EAApCD;AAA0B,KAA1BA,EAAAA,IAAAA,CACnBE,GAAD,IAASA,GAAG,CADQF,IACXE,EADWF,EAEpB,MAFF,IAAsBA,CAAtB;AAIA,WAAO;AAAEG,MAAAA,cAAc,EAAEJ,OAAO,KAAPA,EAAAA,IAAkBA,OAAO,KAAlD;AAAO,KAAP;AAGF,GAdmC,CAcnC;AACA;AACA;AACA;;;AACA,QAAMK,eAAe,GAAG,MAAM,CAAA,GAAA,iBAAA,CAAA,gBAAA,EAAA,QAAA,EAAA,eAAA,EAA9B,0BAA8B,CAA9B;;AAKA,MAAIA,eAAe,CAAnB,MAAA,EAA4B;AAC1B,WAAO;AAAED,MAAAA,cAAc,EAAvB;AAAO,KAAP;AAGF;;AAAA,SAAA,KAAA;AACD","sourcesContent":["import { promises as fs } from 'fs'\nimport path from 'path'\nimport { fileExists } from '../file-exists'\nimport { recursiveReadDir } from '../recursive-readdir'\n\nexport type TypeScriptIntent = { firstTimeSetup: boolean }\n\nexport async function getTypeScriptIntent(\n  baseDir: string,\n  pagesDir: string\n): Promise<TypeScriptIntent | false> {\n  const tsConfigPath = path.join(baseDir, 'tsconfig.json')\n\n  // The integration turns on if we find a `tsconfig.json` in the user's\n  // project.\n  const hasTypeScriptConfiguration = await fileExists(tsConfigPath)\n  if (hasTypeScriptConfiguration) {\n    const content = await fs.readFile(tsConfigPath, { encoding: 'utf8' }).then(\n      (txt) => txt.trim(),\n      () => null\n    )\n    return { firstTimeSetup: content === '' || content === '{}' }\n  }\n\n  // Next.js also offers a friendly setup mode that bootstraps a TypeScript\n  // project for the user when we detect TypeScript files. So, we need to check\n  // the `pages/` directory for a TypeScript file.\n  // Checking all directories is too slow, so this is a happy medium.\n  const typescriptFiles = await recursiveReadDir(\n    pagesDir,\n    /.*\\.(ts|tsx)$/,\n    /(node_modules|.*\\.d\\.ts)/\n  )\n  if (typescriptFiles.length) {\n    return { firstTimeSetup: true }\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"script"}