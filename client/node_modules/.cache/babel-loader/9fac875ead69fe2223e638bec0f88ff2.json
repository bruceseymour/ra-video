{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setBaggage = exports.getBaggage = exports.isInstrumentationSuppressed = exports.unsuppressInstrumentation = exports.suppressInstrumentation = exports.getParentSpanContext = exports.setExtractedSpanContext = exports.setActiveSpan = exports.getActiveSpan = void 0;\n\nvar context_base_1 = require(\"@opentelemetry/context-base\");\n\nvar __1 = require(\"../\");\n/**\n * Active span key\n */\n\n\nvar ACTIVE_SPAN_KEY = context_base_1.createContextKey('OpenTelemetry Context Key ACTIVE_SPAN');\n/**\n * Shared key for indicating if instrumentation should be suppressed beyond\n * this current scope.\n */\n\nvar SUPPRESS_INSTRUMENTATION_KEY = context_base_1.createContextKey('OpenTelemetry Context Key SUPPRESS_INSTRUMENTATION');\n/**\n * Baggage key\n */\n\nvar BAGGAGE_KEY = context_base_1.createContextKey('OpenTelemetry Baggage Key');\n/**\n * Return the active span if one exists\n *\n * @param context context to get span from\n */\n\nfunction getActiveSpan(context) {\n  return context.getValue(ACTIVE_SPAN_KEY) || undefined;\n}\n\nexports.getActiveSpan = getActiveSpan;\n/**\n * Set the active span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\n\nfunction setActiveSpan(context, span) {\n  return context.setValue(ACTIVE_SPAN_KEY, span);\n}\n\nexports.setActiveSpan = setActiveSpan;\n/**\n * Wrap extracted span context in a NoopSpan and set as active span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\n\nfunction setExtractedSpanContext(context, spanContext) {\n  return setActiveSpan(context, new __1.NoopSpan(spanContext));\n}\n\nexports.setExtractedSpanContext = setExtractedSpanContext;\n/**\n * Get the span context of the parent span if it exists,\n * or the extracted span context if there is no active\n * span.\n *\n * @param context context to get values from\n */\n\nfunction getParentSpanContext(context) {\n  var _a;\n\n  return (_a = getActiveSpan(context)) === null || _a === void 0 ? void 0 : _a.context();\n}\n\nexports.getParentSpanContext = getParentSpanContext;\n/**\n * Sets value on context to indicate that instrumentation should\n * be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\n\nfunction suppressInstrumentation(context) {\n  return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, true);\n}\n\nexports.suppressInstrumentation = suppressInstrumentation;\n/**\n * Sets value on context to indicate that instrumentation should\n * no-longer be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\n\nfunction unsuppressInstrumentation(context) {\n  return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, false);\n}\n\nexports.unsuppressInstrumentation = unsuppressInstrumentation;\n/**\n * Return current suppress instrumentation value for the given context,\n * if it exists.\n *\n * @param context context check for the suppress instrumentation value.\n */\n\nfunction isInstrumentationSuppressed(context) {\n  return Boolean(context.getValue(SUPPRESS_INSTRUMENTATION_KEY));\n}\n\nexports.isInstrumentationSuppressed = isInstrumentationSuppressed;\n/**\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\n\nfunction getBaggage(context) {\n  return context.getValue(BAGGAGE_KEY) || undefined;\n}\n\nexports.getBaggage = getBaggage;\n/**\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\n\nfunction setBaggage(context, baggage) {\n  return context.setValue(BAGGAGE_KEY, baggage);\n}\n\nexports.setBaggage = setBaggage;","map":{"version":3,"sources":["../../../src/context/context.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAEH,IAAA,cAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;;AACA,IAAA,GAAA,GAAA,OAAA,CAAA,KAAA,CAAA;AAEA;;AAEG;;;AACH,IAAM,eAAe,GAAG,cAAA,CAAA,gBAAA,CACtB,uCADsB,CAAxB;AAIA;;;AAGG;;AACH,IAAM,4BAA4B,GAAG,cAAA,CAAA,gBAAA,CACnC,oDADmC,CAArC;AAIA;;AAEG;;AACH,IAAM,WAAW,GAAG,cAAA,CAAA,gBAAA,CAAiB,2BAAjB,CAApB;AAEA;;;;AAIG;;AACH,SAAgB,aAAhB,CAA8B,OAA9B,EAA8C;AAC5C,SAAQ,OAAO,CAAC,QAAR,CAAiB,eAAjB,KAA8C,SAAtD;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;AAIA;;;;;AAKG;;AACH,SAAgB,aAAhB,CAA8B,OAA9B,EAAgD,IAAhD,EAA0D;AACxD,SAAO,OAAO,CAAC,QAAR,CAAiB,eAAjB,EAAkC,IAAlC,CAAP;AACD;;AAFD,OAAA,CAAA,aAAA,GAAA,aAAA;AAIA;;;;;;AAMG;;AACH,SAAgB,uBAAhB,CACE,OADF,EAEE,WAFF,EAE0B;AAExB,SAAO,aAAa,CAAC,OAAD,EAAU,IAAI,GAAA,CAAA,QAAJ,CAAa,WAAb,CAAV,CAApB;AACD;;AALD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAOA;;;;;;AAMG;;AACH,SAAgB,oBAAhB,CACE,OADF,EACkB;;;AAEhB,SAAA,CAAA,EAAA,GAAO,aAAa,CAAC,OAAD,CAApB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,KAAA,CAA7B,GAA6B,EAAA,CAAE,OAAF,EAA7B;AACD;;AAJD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AAMA;;;;;AAKG;;AACH,SAAgB,uBAAhB,CAAwC,OAAxC,EAAwD;AACtD,SAAO,OAAO,CAAC,QAAR,CAAiB,4BAAjB,EAA+C,IAA/C,CAAP;AACD;;AAFD,OAAA,CAAA,uBAAA,GAAA,uBAAA;AAIA;;;;;AAKG;;AACH,SAAgB,yBAAhB,CAA0C,OAA1C,EAA0D;AACxD,SAAO,OAAO,CAAC,QAAR,CAAiB,4BAAjB,EAA+C,KAA/C,CAAP;AACD;;AAFD,OAAA,CAAA,yBAAA,GAAA,yBAAA;AAIA;;;;;AAKG;;AACH,SAAgB,2BAAhB,CAA4C,OAA5C,EAA4D;AAC1D,SAAO,OAAO,CAAC,OAAO,CAAC,QAAR,CAAiB,4BAAjB,CAAD,CAAd;AACD;;AAFD,OAAA,CAAA,2BAAA,GAAA,2BAAA;AAIA;;;AAGG;;AACH,SAAgB,UAAhB,CAA2B,OAA3B,EAA2C;AACzC,SAAQ,OAAO,CAAC,QAAR,CAAiB,WAAjB,KAA6C,SAArD;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA;AAIA;;;AAGG;;AACH,SAAgB,UAAhB,CAA2B,OAA3B,EAA6C,OAA7C,EAA6D;AAC3D,SAAO,OAAO,CAAC,QAAR,CAAiB,WAAjB,EAA8B,OAA9B,CAAP;AACD;;AAFD,OAAA,CAAA,UAAA,GAAA,UAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setBaggage = exports.getBaggage = exports.isInstrumentationSuppressed = exports.unsuppressInstrumentation = exports.suppressInstrumentation = exports.getParentSpanContext = exports.setExtractedSpanContext = exports.setActiveSpan = exports.getActiveSpan = void 0;\nvar context_base_1 = require(\"@opentelemetry/context-base\");\nvar __1 = require(\"../\");\n/**\n * Active span key\n */\nvar ACTIVE_SPAN_KEY = context_base_1.createContextKey('OpenTelemetry Context Key ACTIVE_SPAN');\n/**\n * Shared key for indicating if instrumentation should be suppressed beyond\n * this current scope.\n */\nvar SUPPRESS_INSTRUMENTATION_KEY = context_base_1.createContextKey('OpenTelemetry Context Key SUPPRESS_INSTRUMENTATION');\n/**\n * Baggage key\n */\nvar BAGGAGE_KEY = context_base_1.createContextKey('OpenTelemetry Baggage Key');\n/**\n * Return the active span if one exists\n *\n * @param context context to get span from\n */\nfunction getActiveSpan(context) {\n    return context.getValue(ACTIVE_SPAN_KEY) || undefined;\n}\nexports.getActiveSpan = getActiveSpan;\n/**\n * Set the active span on a context\n *\n * @param context context to use as parent\n * @param span span to set active\n */\nfunction setActiveSpan(context, span) {\n    return context.setValue(ACTIVE_SPAN_KEY, span);\n}\nexports.setActiveSpan = setActiveSpan;\n/**\n * Wrap extracted span context in a NoopSpan and set as active span in a new\n * context\n *\n * @param context context to set active span on\n * @param spanContext span context to be wrapped\n */\nfunction setExtractedSpanContext(context, spanContext) {\n    return setActiveSpan(context, new __1.NoopSpan(spanContext));\n}\nexports.setExtractedSpanContext = setExtractedSpanContext;\n/**\n * Get the span context of the parent span if it exists,\n * or the extracted span context if there is no active\n * span.\n *\n * @param context context to get values from\n */\nfunction getParentSpanContext(context) {\n    var _a;\n    return (_a = getActiveSpan(context)) === null || _a === void 0 ? void 0 : _a.context();\n}\nexports.getParentSpanContext = getParentSpanContext;\n/**\n * Sets value on context to indicate that instrumentation should\n * be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\nfunction suppressInstrumentation(context) {\n    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, true);\n}\nexports.suppressInstrumentation = suppressInstrumentation;\n/**\n * Sets value on context to indicate that instrumentation should\n * no-longer be suppressed beyond this current scope.\n *\n * @param context context to set the suppress instrumentation value on.\n */\nfunction unsuppressInstrumentation(context) {\n    return context.setValue(SUPPRESS_INSTRUMENTATION_KEY, false);\n}\nexports.unsuppressInstrumentation = unsuppressInstrumentation;\n/**\n * Return current suppress instrumentation value for the given context,\n * if it exists.\n *\n * @param context context check for the suppress instrumentation value.\n */\nfunction isInstrumentationSuppressed(context) {\n    return Boolean(context.getValue(SUPPRESS_INSTRUMENTATION_KEY));\n}\nexports.isInstrumentationSuppressed = isInstrumentationSuppressed;\n/**\n * @param {Context} Context that manage all context values\n * @returns {Baggage} Extracted baggage from the context\n */\nfunction getBaggage(context) {\n    return context.getValue(BAGGAGE_KEY) || undefined;\n}\nexports.getBaggage = getBaggage;\n/**\n * @param {Context} Context that manage all context values\n * @param {Baggage} baggage that will be set in the actual context\n */\nfunction setBaggage(context, baggage) {\n    return context.setValue(BAGGAGE_KEY, baggage);\n}\nexports.setBaggage = setBaggage;\n//# sourceMappingURL=context.js.map"]},"metadata":{},"sourceType":"script"}