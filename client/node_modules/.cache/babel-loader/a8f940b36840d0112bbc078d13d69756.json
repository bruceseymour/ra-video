{"ast":null,"code":"/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  hasAttribute,\n  nextNode,\n  firstChildByTag\n} = require('../NodeUtils');\n\nconst {\n  skipNodeAndChildren\n} = require('../HtmlDomHelper');\n\nconst {\n  isValidImageSrcURL\n} = require('../URLUtils'); // Don't generate srcset's for images with width smaller than MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT\n// this avoids generating srcsets for images with a responsive layout where width/height define the aspect ration.\n\n\nconst MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT = 100; // All supported srcset widths.\n\nconst SRCSET_WIDTH = [39, 47, 56, 68, 82, 100, 120, 150, 180, 220, 270, 330, 390, 470, 560, 680, 820, 1000, 1200, 1440, 1750, 2000, 2500]; // Don't generate srcsets for images larger than the supported maximum\n\nconst MAX_IMG_SIZE = SRCSET_WIDTH[SRCSET_WIDTH - 1]; // The maximum number of srcset source. We'll take the initial image width and generate more width values by\n// multiplying by multiples of 1.0 up the given max value (e.g. width=300, maxSrcsetValues=3 => 1 * 300, 2 * 300, 3 * 300)\n// and match the result to the closest supported srcset width (see above).\n\nconst MAX_SRCSET_VALUE_COUNT = 3;\n/**\n * Calculates the srcset width for a given image width.\n */\n\nclass SrcsetWidth {\n  constructor(imgSrcWidth, maxImgWidth = -1, maxSrcsetValues = MAX_SRCSET_VALUE_COUNT) {\n    this.widthList_ = [];\n    this.setBaseWidth(imgSrcWidth, maxImgWidth, maxSrcsetValues);\n  }\n  /**\n   * Sets the base width, i.e., renderered dimension measured in CSS pixels.\n   * Returns true if srcset is needed, that is, we'll resize the image to at\n   * least 2 supported widths (@see SRCSET_WIDTH for a list of supported widths).\n   *\n   * If maxImgWidth is provided the actual image size in srcset will not\n   * exceed this value. So if maxImgWidth is 820, the srcset will not\n   * contain any image greater than 820px. The maxImgWidth is not absolute\n   * number but depends on the aspect ratio. So if 650 is maxImgWidth, the\n   * nearest aspect ratio width for this max width is 620.\n   *\n   * @param {Number} imgSrcWidth\n   * @param {Number} maxImgWidth\n   */\n\n\n  setBaseWidth(imgSrcWidth, maxImgWidth = -1, maxSrcsetValues = MAX_SRCSET_VALUE_COUNT) {\n    this.widthList_.length = 0;\n    let previousWidth = -1;\n\n    if (maxImgWidth > 0 && imgSrcWidth > maxImgWidth) {\n      return;\n    }\n\n    for (let i = maxSrcsetValues; i > 0; --i) {\n      let width = this.roundUp(imgSrcWidth * i);\n\n      if (maxImgWidth > 0 && width > maxImgWidth) {\n        width = maxImgWidth;\n      }\n\n      if (width != previousWidth) {\n        this.widthList_.push(width);\n      }\n\n      previousWidth = width;\n    }\n  }\n  /**\n   *  Returns true if there are more width values.\n   */\n\n\n  moreWidth() {\n    return this.widthList_.length > 0;\n  }\n  /**\n   * Returns the current legitimate width and moves the state to the next one.\n   */\n\n\n  nextWidth() {\n    return this.widthList_.pop();\n  }\n  /**\n   *\n   */\n\n\n  isValid() {\n    return this.widthList_.length > 1;\n  }\n\n  roundUp(value) {\n    for (const width of SRCSET_WIDTH) {\n      if (width > value) {\n        return width;\n      }\n    }\n\n    return SRCSET_WIDTH[SRCSET_WIDTH.length - 1];\n  }\n\n}\n/**\n * ImageTransformer - generates srcset attribute for amp-img.\n *\n * This transformer requires the following option:\n *\n * - `imageOptimizer`: a function for customizing the srcset generation. The function should return a URL\n *    pointing to a version of the `src` image with the given `width`. If no image is available, it should\n *    return a falsy value. For example: (src, width) => `${src}?width=${width}`.\n */\n\n\nclass OptimizeImages {\n  constructor(config) {\n    this.log = config.log;\n    this.imageOptimizer = config.imageOptimizer; // TODO turn these into options https://github.com/ampproject/amp-toolbox/issues/804\n\n    this.maxImageWidth = MAX_IMG_SIZE;\n    this.maxSrcsetValues = MAX_SRCSET_VALUE_COUNT;\n  }\n\n  async transform(root) {\n    if (!this.imageOptimizer) {\n      return;\n    }\n\n    const html = firstChildByTag(root, 'html');\n    const body = firstChildByTag(html, 'body');\n    let node = body;\n    const imageOptimizationPromises = [];\n\n    while (node !== null) {\n      if (node.tagName === 'template') {\n        node = skipNodeAndChildren(node);\n      } else {\n        if (node.tagName === 'amp-img') {\n          imageOptimizationPromises.push(this.optimizeImage(node));\n        }\n\n        node = nextNode(node);\n      }\n    }\n\n    return Promise.all(imageOptimizationPromises);\n  }\n\n  async optimizeImage(imageNode) {\n    // Don't change existing srcsets.\n    if (hasAttribute(imageNode, 'srcset')) {\n      return;\n    } // Should not happen for valid AMP.\n\n\n    if (!hasAttribute(imageNode, 'src')) {\n      return;\n    }\n\n    const src = imageNode.attribs.src; // Check if it's a relative path or a valid http(s) URL.\n\n    if (!isValidImageSrcURL(src)) {\n      return;\n    } // No srcset is added if the image ends with a `,` (comma). See\n    // http://b/127535381 for context.\n\n\n    if (src.endsWith(',')) {\n      return;\n    }\n\n    const width = imageNode.attribs.width; // TODO(b/113271759): Handle width values that include 'px' (probably others).\n\n    if (isNaN(Number.parseInt(width))) {\n      // No width or invalid width.\n      return;\n    } // Determine if the layout is \"responsive\".\n\n\n    const {\n      layout,\n      height,\n      sizes\n    } = imageNode.attribs;\n    const isResponsive = layout === 'responsive' || !layout && height && sizes; // In responsive layout, width and height might be used for indicating\n    // the aspect ratio instead of the actual render dimensions. This usually\n    // happens for dimensions of small values.\n\n    if (isResponsive && width < MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT) {\n      return;\n    } // We add srcset only when the CSS dimensions correspond to 2 or more\n    // unique legitimate physical dimensions.\n\n\n    const srcsetWidth = new SrcsetWidth(width, this.maxImageWidth, this.maxSrcsetValues);\n\n    if (!srcsetWidth.isValid()) {\n      return;\n    } // Generate the srcset.\n\n\n    let srcset = '';\n\n    while (srcsetWidth.moreWidth()) {\n      const nextWidth = srcsetWidth.nextWidth();\n\n      try {\n        // Generate the width specific image URL using the default or custom srcset generator.\n        const nextSrc = await this.imageOptimizer(src, nextWidth); // Add the width (if supported) to the srcset.\n\n        if (nextSrc) {\n          srcset += `${nextSrc} ${nextWidth}w${srcsetWidth.moreWidth() ? ', ' : ''}`;\n        }\n      } catch (e) {\n        this.log.error('Exception when optimizing image', src, e);\n      }\n    }\n\n    if (srcset) {\n      imageNode.attribs.srcset = srcset;\n      this.log.debug('Generating img srcset', src, imageNode.attribs.srcset);\n    }\n  }\n\n}\n\nmodule.exports = OptimizeImages;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/OptimizeImages.js"],"names":["hasAttribute","nextNode","firstChildByTag","require","skipNodeAndChildren","isValidImageSrcURL","MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT","SRCSET_WIDTH","MAX_IMG_SIZE","MAX_SRCSET_VALUE_COUNT","SrcsetWidth","constructor","imgSrcWidth","maxImgWidth","maxSrcsetValues","widthList_","setBaseWidth","length","previousWidth","i","width","roundUp","push","moreWidth","nextWidth","pop","isValid","value","OptimizeImages","config","log","imageOptimizer","maxImageWidth","transform","root","html","body","node","imageOptimizationPromises","tagName","optimizeImage","Promise","all","imageNode","src","attribs","endsWith","isNaN","Number","parseInt","layout","height","sizes","isResponsive","srcsetWidth","srcset","nextSrc","e","error","debug","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nconst {hasAttribute, nextNode, firstChildByTag} = require('../NodeUtils');\nconst {skipNodeAndChildren} = require('../HtmlDomHelper');\nconst {isValidImageSrcURL} = require('../URLUtils');\n\n// Don't generate srcset's for images with width smaller than MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT\n// this avoids generating srcsets for images with a responsive layout where width/height define the aspect ration.\nconst MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT = 100;\n\n// All supported srcset widths.\nconst SRCSET_WIDTH = [\n  39,\n  47,\n  56,\n  68,\n  82,\n  100,\n  120,\n  150,\n  180,\n  220,\n  270,\n  330,\n  390,\n  470,\n  560,\n  680,\n  820,\n  1000,\n  1200,\n  1440,\n  1750,\n  2000,\n  2500,\n];\n\n// Don't generate srcsets for images larger than the supported maximum\nconst MAX_IMG_SIZE = SRCSET_WIDTH[SRCSET_WIDTH - 1];\n\n// The maximum number of srcset source. We'll take the initial image width and generate more width values by\n// multiplying by multiples of 1.0 up the given max value (e.g. width=300, maxSrcsetValues=3 => 1 * 300, 2 * 300, 3 * 300)\n// and match the result to the closest supported srcset width (see above).\nconst MAX_SRCSET_VALUE_COUNT = 3;\n\n/**\n * Calculates the srcset width for a given image width.\n */\nclass SrcsetWidth {\n  constructor(imgSrcWidth, maxImgWidth = -1, maxSrcsetValues = MAX_SRCSET_VALUE_COUNT) {\n    this.widthList_ = [];\n    this.setBaseWidth(imgSrcWidth, maxImgWidth, maxSrcsetValues);\n  }\n\n  /**\n   * Sets the base width, i.e., renderered dimension measured in CSS pixels.\n   * Returns true if srcset is needed, that is, we'll resize the image to at\n   * least 2 supported widths (@see SRCSET_WIDTH for a list of supported widths).\n   *\n   * If maxImgWidth is provided the actual image size in srcset will not\n   * exceed this value. So if maxImgWidth is 820, the srcset will not\n   * contain any image greater than 820px. The maxImgWidth is not absolute\n   * number but depends on the aspect ratio. So if 650 is maxImgWidth, the\n   * nearest aspect ratio width for this max width is 620.\n   *\n   * @param {Number} imgSrcWidth\n   * @param {Number} maxImgWidth\n   */\n  setBaseWidth(imgSrcWidth, maxImgWidth = -1, maxSrcsetValues = MAX_SRCSET_VALUE_COUNT) {\n    this.widthList_.length = 0;\n    let previousWidth = -1;\n    if (maxImgWidth > 0 && imgSrcWidth > maxImgWidth) {\n      return;\n    }\n\n    for (let i = maxSrcsetValues; i > 0; --i) {\n      let width = this.roundUp(imgSrcWidth * i);\n      if (maxImgWidth > 0 && width > maxImgWidth) {\n        width = maxImgWidth;\n      }\n      if (width != previousWidth) {\n        this.widthList_.push(width);\n      }\n\n      previousWidth = width;\n    }\n  }\n\n  /**\n   *  Returns true if there are more width values.\n   */\n  moreWidth() {\n    return this.widthList_.length > 0;\n  }\n\n  /**\n   * Returns the current legitimate width and moves the state to the next one.\n   */\n  nextWidth() {\n    return this.widthList_.pop();\n  }\n\n  /**\n   *\n   */\n  isValid() {\n    return this.widthList_.length > 1;\n  }\n\n  roundUp(value) {\n    for (const width of SRCSET_WIDTH) {\n      if (width > value) {\n        return width;\n      }\n    }\n    return SRCSET_WIDTH[SRCSET_WIDTH.length - 1];\n  }\n}\n\n/**\n * ImageTransformer - generates srcset attribute for amp-img.\n *\n * This transformer requires the following option:\n *\n * - `imageOptimizer`: a function for customizing the srcset generation. The function should return a URL\n *    pointing to a version of the `src` image with the given `width`. If no image is available, it should\n *    return a falsy value. For example: (src, width) => `${src}?width=${width}`.\n */\nclass OptimizeImages {\n  constructor(config) {\n    this.log = config.log;\n    this.imageOptimizer = config.imageOptimizer;\n    // TODO turn these into options https://github.com/ampproject/amp-toolbox/issues/804\n    this.maxImageWidth = MAX_IMG_SIZE;\n    this.maxSrcsetValues = MAX_SRCSET_VALUE_COUNT;\n  }\n\n  async transform(root) {\n    if (!this.imageOptimizer) {\n      return;\n    }\n    const html = firstChildByTag(root, 'html');\n    const body = firstChildByTag(html, 'body');\n\n    let node = body;\n    const imageOptimizationPromises = [];\n    while (node !== null) {\n      if (node.tagName === 'template') {\n        node = skipNodeAndChildren(node);\n      } else {\n        if (node.tagName === 'amp-img') {\n          imageOptimizationPromises.push(this.optimizeImage(node));\n        }\n        node = nextNode(node);\n      }\n    }\n    return Promise.all(imageOptimizationPromises);\n  }\n\n  async optimizeImage(imageNode) {\n    // Don't change existing srcsets.\n    if (hasAttribute(imageNode, 'srcset')) {\n      return;\n    }\n    // Should not happen for valid AMP.\n    if (!hasAttribute(imageNode, 'src')) {\n      return;\n    }\n    const src = imageNode.attribs.src;\n    // Check if it's a relative path or a valid http(s) URL.\n    if (!isValidImageSrcURL(src)) {\n      return;\n    }\n\n    // No srcset is added if the image ends with a `,` (comma). See\n    // http://b/127535381 for context.\n    if (src.endsWith(',')) {\n      return;\n    }\n    const width = imageNode.attribs.width;\n\n    // TODO(b/113271759): Handle width values that include 'px' (probably others).\n    if (isNaN(Number.parseInt(width))) {\n      // No width or invalid width.\n      return;\n    }\n\n    // Determine if the layout is \"responsive\".\n    const {layout, height, sizes} = imageNode.attribs;\n    const isResponsive = layout === 'responsive' || (!layout && height && sizes);\n\n    // In responsive layout, width and height might be used for indicating\n    // the aspect ratio instead of the actual render dimensions. This usually\n    // happens for dimensions of small values.\n    if (isResponsive && width < MIN_WIDTH_TO_ADD_SRCSET_IN_RESPONSIVE_LAYOUT) {\n      return;\n    }\n\n    // We add srcset only when the CSS dimensions correspond to 2 or more\n    // unique legitimate physical dimensions.\n    const srcsetWidth = new SrcsetWidth(width, this.maxImageWidth, this.maxSrcsetValues);\n    if (!srcsetWidth.isValid()) {\n      return;\n    }\n    // Generate the srcset.\n    let srcset = '';\n    while (srcsetWidth.moreWidth()) {\n      const nextWidth = srcsetWidth.nextWidth();\n      try {\n        // Generate the width specific image URL using the default or custom srcset generator.\n        const nextSrc = await this.imageOptimizer(src, nextWidth);\n        // Add the width (if supported) to the srcset.\n        if (nextSrc) {\n          srcset += `${nextSrc} ${nextWidth}w${srcsetWidth.moreWidth() ? ', ' : ''}`;\n        }\n      } catch (e) {\n        this.log.error('Exception when optimizing image', src, e);\n      }\n    }\n    if (srcset) {\n      imageNode.attribs.srcset = srcset;\n      this.log.debug('Generating img srcset', src, imageNode.attribs.srcset);\n    }\n  }\n}\n\nmodule.exports = OptimizeImages;\n"]},"metadata":{},"sourceType":"script"}