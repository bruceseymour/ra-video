{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getFormattedDiagnostic = getFormattedDiagnostic;\nexports.DiagnosticCategory = void 0;\n\nvar _codeFrame = require(\"next/dist/compiled/babel/code-frame\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet DiagnosticCategory;\nexports.DiagnosticCategory = DiagnosticCategory;\n\n(function (DiagnosticCategory) {\n  DiagnosticCategory[DiagnosticCategory[\"Warning\"] = 0] = \"Warning\";\n  DiagnosticCategory[DiagnosticCategory[\"Error\"] = 1] = \"Error\";\n  DiagnosticCategory[DiagnosticCategory[\"Suggestion\"] = 2] = \"Suggestion\";\n  DiagnosticCategory[DiagnosticCategory[\"Message\"] = 3] = \"Message\";\n})(DiagnosticCategory || (exports.DiagnosticCategory = DiagnosticCategory = {}));\n\nasync function getFormattedDiagnostic(ts, baseDir, diagnostic) {\n  let message = '';\n  const reason = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n');\n  const category = diagnostic.category;\n\n  switch (category) {\n    // Warning\n    case DiagnosticCategory.Warning:\n      {\n        message += _chalk.default.yellow.bold('Type warning') + ': ';\n        break;\n      }\n    // Error\n\n    case DiagnosticCategory.Error:\n      {\n        message += _chalk.default.red.bold('Type error') + ': ';\n        break;\n      }\n    // 2 = Suggestion, 3 = Message\n\n    case DiagnosticCategory.Suggestion:\n    case DiagnosticCategory.Message:\n    default:\n      {\n        message += _chalk.default.cyan.bold(category === 2 ? 'Suggestion' : 'Info') + ': ';\n        break;\n      }\n  }\n\n  message += reason + '\\n';\n\n  if (diagnostic.file) {\n    const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start);\n    const line = pos.line + 1;\n    const character = pos.character + 1;\n\n    let fileName = _path.default.posix.normalize(_path.default.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/, '/'));\n\n    if (!fileName.startsWith('.')) {\n      fileName = './' + fileName;\n    }\n\n    message = _chalk.default.cyan(fileName) + ':' + _chalk.default.yellow(line.toString()) + ':' + _chalk.default.yellow(character.toString()) + '\\n' + message;\n    message += '\\n' + (0, _codeFrame.codeFrameColumns)(diagnostic.file.getFullText(diagnostic.file.getSourceFile()), {\n      start: {\n        line: line,\n        column: character\n      }\n    }, {\n      forceColor: true\n    });\n  }\n\n  return message;\n}","map":{"version":3,"sources":["../../../lib/typescript/diagnosticFormatter.ts"],"names":["DiagnosticCategory","message","reason","ts","diagnostic","category","chalk","pos","line","character","fileName","path","start","column","forceColor"],"mappings":";;;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;;;;;AAEYA;;AAAAA,IAAAA,kBAAAA;;;WAAAA,kB;AAAAA,EAAAA,kB,CAAAA,kB,WAAAA,G,EAAAA,G,SAAAA;AAAAA,EAAAA,kB,CAAAA,kB,SAAAA,G,EAAAA,G,OAAAA;AAAAA,EAAAA,kB,CAAAA,kB,cAAAA,G,EAAAA,G,YAAAA;AAAAA,EAAAA,kB,CAAAA,kB,WAAAA,G,EAAAA,G,SAAAA;GAAAA,kB,kCAAAA,kB;;AAOL,eAAA,sBAAA,CAAA,EAAA,EAAA,OAAA,EAAA,UAAA,EAIY;AACjB,MAAIC,OAAO,GAAX,EAAA;AAEA,QAAMC,MAAM,GAAGC,EAAE,CAAFA,4BAAAA,CAAgCC,UAAU,CAA1CD,WAAAA,EAAf,IAAeA,CAAf;AACA,QAAME,QAAQ,GAAGD,UAAU,CAA3B,QAAA;;AACA,UAAA,QAAA;AACE;AACA,SAAKJ,kBAAkB,CAAvB,OAAA;AAAiC;AAC/BC,QAAAA,OAAO,IAAIK,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAAA,IAAAA,CAAAA,cAAAA,IAAXL,IAAAA;AACA;AAEF;AAAA;;AACA,SAAKD,kBAAkB,CAAvB,KAAA;AAA+B;AAC7BC,QAAAA,OAAO,IAAIK,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,YAAAA,IAAXL,IAAAA;AACA;AAEF;AAAA;;AACA,SAAKD,kBAAkB,CAAvB,UAAA;AACA,SAAKA,kBAAkB,CAAvB,OAAA;AACA;AAAS;AACPC,QAAAA,OAAO,IAAIK,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CAAgBD,QAAQ,KAARA,CAAAA,GAAAA,YAAAA,GAAhBC,MAAAA,IAAXL,IAAAA;AACA;AAhBJ;AAAA;;AAmBAA,EAAAA,OAAO,IAAIC,MAAM,GAAjBD,IAAAA;;AAEA,MAAIG,UAAU,CAAd,IAAA,EAAqB;AACnB,UAAMG,GAAG,GAAGH,UAAU,CAAVA,IAAAA,CAAAA,6BAAAA,CAA8CA,UAAU,CAApE,KAAYA,CAAZ;AACA,UAAMI,IAAI,GAAGD,GAAG,CAAHA,IAAAA,GAAb,CAAA;AACA,UAAME,SAAS,GAAGF,GAAG,CAAHA,SAAAA,GAAlB,CAAA;;AAEA,QAAIG,QAAQ,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,SAAAA,CACbA,KAAAA,CAAAA,OAAAA,CAAAA,QAAAA,CAAAA,OAAAA,EAAuBP,UAAU,CAAVA,IAAAA,CAAvBO,QAAAA,EAAAA,OAAAA,CAAAA,IAAAA,EADF,GACEA,CADaA,CAAf;;AAGA,QAAI,CAACD,QAAQ,CAARA,UAAAA,CAAL,GAAKA,CAAL,EAA+B;AAC7BA,MAAAA,QAAQ,GAAG,OAAXA,QAAAA;AAGFT;;AAAAA,IAAAA,OAAO,GACLK,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,QAAAA,IAAAA,GAAAA,GAEAA,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAaE,IAAI,CAFjBF,QAEaE,EAAbF,CAFAA,GAAAA,GAAAA,GAIAA,MAAAA,CAAAA,OAAAA,CAAAA,MAAAA,CAAaG,SAAS,CAJtBH,QAIaG,EAAbH,CAJAA,GAAAA,IAAAA,GADFL,OAAAA;AASAA,IAAAA,OAAO,IACL,OACA,CAAA,GAAA,UAAA,CAAA,gBAAA,EACEG,UAAU,CAAVA,IAAAA,CAAAA,WAAAA,CAA4BA,UAAU,CAAVA,IAAAA,CAD9B,aAC8BA,EAA5BA,CADF,EAEE;AACEQ,MAAAA,KAAK,EAAE;AAAEJ,QAAAA,IAAI,EAAN,IAAA;AAAcK,QAAAA,MAAM,EAH/B;AAGW;AADT,KAFF,EAKE;AAAEC,MAAAA,UAAU,EAPhBb;AAOI,KALF,CAFFA;AAWF;;AAAA,SAAA,OAAA;AACD","sourcesContent":["import { codeFrameColumns } from 'next/dist/compiled/babel/code-frame'\nimport chalk from 'chalk'\nimport path from 'path'\n\nexport enum DiagnosticCategory {\n  Warning = 0,\n  Error = 1,\n  Suggestion = 2,\n  Message = 3,\n}\n\nexport async function getFormattedDiagnostic(\n  ts: typeof import('typescript'),\n  baseDir: string,\n  diagnostic: import('typescript').Diagnostic\n): Promise<string> {\n  let message = ''\n\n  const reason = ts.flattenDiagnosticMessageText(diagnostic.messageText, '\\n')\n  const category = diagnostic.category\n  switch (category) {\n    // Warning\n    case DiagnosticCategory.Warning: {\n      message += chalk.yellow.bold('Type warning') + ': '\n      break\n    }\n    // Error\n    case DiagnosticCategory.Error: {\n      message += chalk.red.bold('Type error') + ': '\n      break\n    }\n    // 2 = Suggestion, 3 = Message\n    case DiagnosticCategory.Suggestion:\n    case DiagnosticCategory.Message:\n    default: {\n      message += chalk.cyan.bold(category === 2 ? 'Suggestion' : 'Info') + ': '\n      break\n    }\n  }\n  message += reason + '\\n'\n\n  if (diagnostic.file) {\n    const pos = diagnostic.file.getLineAndCharacterOfPosition(diagnostic.start!)\n    const line = pos.line + 1\n    const character = pos.character + 1\n\n    let fileName = path.posix.normalize(\n      path.relative(baseDir, diagnostic.file.fileName).replace(/\\\\/, '/')\n    )\n    if (!fileName.startsWith('.')) {\n      fileName = './' + fileName\n    }\n\n    message =\n      chalk.cyan(fileName) +\n      ':' +\n      chalk.yellow(line.toString()) +\n      ':' +\n      chalk.yellow(character.toString()) +\n      '\\n' +\n      message\n\n    message +=\n      '\\n' +\n      codeFrameColumns(\n        diagnostic.file.getFullText(diagnostic.file.getSourceFile()),\n        {\n          start: { line: line, column: character },\n        },\n        { forceColor: true }\n      )\n  }\n\n  return message\n}\n"]},"metadata":{},"sourceType":"script"}