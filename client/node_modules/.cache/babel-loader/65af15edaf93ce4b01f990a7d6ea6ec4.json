{"ast":null,"code":"import socketIOClient from \"socket.io-client\";\nimport React, { setState, useState, useEffect } from 'react';\nexport default function Pinball() {\n  console.log(\"Starting Pinball Controls\"); // change endpoint to public IP with port forward to local servers\n\n  const ENDPOINT = \"24.60.168.240:8080\"; //local const ENDPOINT = \"http://192.168.86.250:8080\";\n  // Live Tesing (Hardware Available)\n\n  const socket = socketIOClient(ENDPOINT); //Local Testing (No Hardware Available)\n  //const socket = { emit : ()=>{console.log(\"TESTING\")}}\n\n  let [buttonCount, setButtonCount] = useState(0);\n  let [keyHistory, updateKeyHistory] = useState([]);\n  let keyPressedTimeStart = useState(new Date().getTime());\n  let keyPressedTimeEnd = useState(new Date().getTime());\n  let buttonDuration = useState(keyPressedTimeEnd[0] - keyPressedTimeStart[0]);\n\n  function increaseButtonCount(buttonCount) {\n    setButtonCount(prevCount => prevCount + 1);\n  } // PINBALL RELAY CONTROLS - BELOW -\n\n\n  function turnOnLeftFlipper() {\n    console.log(\"Turn On Left Flipper\"); //  socket.emit(\"turnOnLeftFlipper\",1);\n\n    socket.emit(\"changeLeftFlipper\", 1);\n  }\n\n  function turnOffLeftFlipper() {\n    console.log(\"Turn Off Left Flipper\"); //  socket.emit(\"turnOnLeftFlipper\",0)\n\n    socket.emit(\"changeLeftFlipper\", 0);\n  }\n\n  function turnOnRightFlipper() {\n    console.log(\"Turn On Left Flipper\"); //  socket.emit(\"turnOnRightFlipper\",1);\n\n    socket.emit(\"changeRightFlipper\", 1);\n  }\n\n  function turnOffRightFlipper() {\n    console.log(\"Turn Off Right Flipper\"); //  socket.emit(\"turnOnRightFlipper\",0)\n\n    socket.emit(\"changeRightFlipper\", 0);\n  }\n\n  function turnOnUpperRightFlipper() {\n    console.log(\"Turn On Upper Right Flipper\");\n    socket.emit(\"changeUpperRightFlipper\", 1);\n  }\n\n  function turnOffUpperRightFlipper() {\n    console.log(\"Turn Off Upper Right Flipper\");\n    socket.emit(\"changeUpperRightFlipper\", 0);\n  } // SHOOT BUTTON\n\n\n  function turnOnShootButton() {\n    console.log(\"Turn On Shoot Button\");\n    socket.emit(\"shootButton\", 1);\n  }\n\n  function turnOffShootButton() {\n    console.log(\"Turn Off Shoot Button\");\n    socket.emit(\"shootButton\", 0);\n  } // START / CREDIT BUTTON\n\n\n  function turnOnStartButton() {\n    console.log(\"Turn On Start Button\");\n    socket.emit(\"startButton\", 1);\n  }\n\n  function turnOffStartButton() {\n    console.log(\"Turn Off Start Button\");\n    socket.emit(\"startButton\", 0);\n  } // PINBALL RELAY CONTROLS - ABOVE -\n  // KEYBOARD CONTROLS\n\n\n  const leftFlipperKey1 = useKeyPress('a');\n  const leftFlipperKey2 = useKeyPress('A');\n  const leftFlipperKey3 = useKeyPress('ArrowLeft');\n  const leftFlipperKey4 = useKeyPress(',');\n  const leftFlipperKey5 = useKeyPress('<');\n  const rightFlipperKey1 = useKeyPress('s');\n  const rightFlipperKey2 = useKeyPress('S');\n  const rightFlipperKey3 = useKeyPress('ArrowRight');\n  const rightFlipperKey4 = useKeyPress('.');\n  const rightFlipperKey5 = useKeyPress('>');\n  const upperRightFlipperKey1 = useKeyPress('d');\n  const upperRightFlipperKey2 = useKeyPress('D');\n  const upperRightFlipperKey3 = useKeyPress('ArrowDown');\n  const upperRightFlipperKey4 = useKeyPress('/');\n  const upperRightFlipperKey5 = useKeyPress('?');\n  const startKey1 = useKeyPress('w');\n  const startKey2 = useKeyPress('W');\n  const startKey3 = useKeyPress(' ');\n  const startKey4 = useKeyPress('ArrowUp');\n  const startKey5 = useKeyPress('N');\n  const startKey6 = useKeyPress('n');\n  const shootKey1 = useKeyPress('e');\n  const shootKey2 = useKeyPress('E');\n  const shootKey3 = useKeyPress('p');\n  const shootKey4 = useKeyPress('P');\n  const shootKey5 = useKeyPress('1');\n  const shootKey6 = useKeyPress('M');\n  const shootKey7 = useKeyPress('n');\n\n  function useKeyPress(targetKey) {\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState(false);\n    let duplicateKeyFlag = useState(false);\n    let keyHistoryLength; // If pressed key is our target key then set to true\n\n    function downHandler({\n      key\n    }) {\n      keyHistory.push(key);\n      console.log(\"Key Pressed: \", key); //    console.log(\"Key History Length\", keyHistoryLength);\n\n      if (keyHistory[keyHistoryLength] == targetKey) {\n        duplicateKeyFlag = true; //       console.log(\"Duplicate Key \", duplicateKeyFlag);\n      } else {\n        duplicateKeyFlag = false; //      console.log(\"Duplicate Key \", duplicateKeyFlag);\n      }\n\n      ;\n\n      if (key === targetKey) {\n        setKeyPressed(true);\n        keyPressedTimeStart[0] = new Date().getTime();\n\n        if (duplicateKeyFlag === true) {\n          //     console.log(\"Duplicate Key \", duplicateKeyFlag);\n          keyPressedTimeStart[0] = keyPressedTimeStart[0]; //      console.log(\"Key Down Time:\", keyPressedTimeStart[0])\n        } else {\n          keyPressedTimeStart[0] = new Date().getTime();\n        }\n\n        switch (targetKey) {\n          case \"a\":\n          case \"A\":\n          case \"ArrowLeft\":\n          case \"<\":\n          case \",\":\n            turnOnLeftFlipper();\n            increaseButtonCount();\n            break;\n\n          case \"s\":\n          case \"S\":\n          case \"ArrowRight\":\n          case \">\":\n          case \".\":\n            turnOnRightFlipper();\n            turnOnUpperRightFlipper();\n            increaseButtonCount();\n            break;\n\n          case \"w\":\n          case \"W\":\n          case \" \":\n          case \"ArrowUp\":\n          case \"M\":\n          case \"m\":\n            turnOnShootButton();\n            break;\n\n          case \"e\":\n          case \"E\":\n          case \"p\":\n          case \"P\":\n          case \"n\":\n          case \"N\":\n          case \"1\":\n            turnOnStartButton();\n            break;\n\n          case \"d\":\n          case \"D\":\n          case \"ArrowDown\":\n          case \"/\":\n          case \"?\":\n            turnOnUpperRightFlipper();\n            increaseButtonCount();\n            break;\n\n          default: // code block\n\n        }\n      }\n    } // If released key is our target key then set to false\n\n\n    const upHandler = ({\n      key\n    }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n        keyPressedTimeEnd[0] = new Date().getTime(); //  console.log(\"Key Up Time:\", keyPressedTimeEnd[0])\n\n        buttonDuration = keyPressedTimeEnd[0] - keyPressedTimeStart[0];\n        buttonDuration = buttonDuration.toFixed(2) / 1000; //    console.log(\"Key Pressed Time (buttonDuration):\", keyPressedTimeEnd[0],keyPressedTimeStart[0], buttonDuration)\n\n        switch (targetKey) {\n          case \"a\":\n          case \"A\":\n          case \"ArrowLeft\":\n          case \"<\":\n          case \",\":\n            turnOffLeftFlipper();\n            break;\n\n          case \"s\":\n          case \"S\":\n          case \"ArrowRight\":\n          case \">\":\n          case \".\":\n            turnOffRightFlipper();\n            turnOffUpperRightFlipper();\n            break;\n\n          case \"w\":\n          case \"W\":\n          case \" \":\n          case \"ArrowUp\":\n          case \"M\":\n          case \"m\":\n            turnOffShootButton();\n            break;\n\n          case \"e\":\n          case \"E\":\n          case \"p\":\n          case \"P\":\n          case \"n\":\n          case \"N\":\n          case \"1\":\n            turnOffStartButton();\n            break;\n\n          case \"d\":\n          case \"D\":\n          case \"ArrowDown\":\n          case \"/\":\n          case \"?\":\n            turnOffUpperRightFlipper();\n            break;\n\n          default: // code block\n\n        }\n      }\n    }; // Add event listeners to listen for key presses\n\n\n    useEffect(() => {\n      window.addEventListener('keydown', downHandler);\n      window.addEventListener('keyup', upHandler); // Remove event listeners on cleanup\n\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n        window.removeEventListener('keyup', upHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return keyPressed;\n  } // end function useKeyPress(targetKey)\n\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null);\n}","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/src/Components/Pinball.js"],"names":["socketIOClient","React","setState","useState","useEffect","Pinball","console","log","ENDPOINT","socket","buttonCount","setButtonCount","keyHistory","updateKeyHistory","keyPressedTimeStart","Date","getTime","keyPressedTimeEnd","buttonDuration","increaseButtonCount","prevCount","turnOnLeftFlipper","emit","turnOffLeftFlipper","turnOnRightFlipper","turnOffRightFlipper","turnOnUpperRightFlipper","turnOffUpperRightFlipper","turnOnShootButton","turnOffShootButton","turnOnStartButton","turnOffStartButton","leftFlipperKey1","useKeyPress","leftFlipperKey2","leftFlipperKey3","leftFlipperKey4","leftFlipperKey5","rightFlipperKey1","rightFlipperKey2","rightFlipperKey3","rightFlipperKey4","rightFlipperKey5","upperRightFlipperKey1","upperRightFlipperKey2","upperRightFlipperKey3","upperRightFlipperKey4","upperRightFlipperKey5","startKey1","startKey2","startKey3","startKey4","startKey5","startKey6","shootKey1","shootKey2","shootKey3","shootKey4","shootKey5","shootKey6","shootKey7","targetKey","keyPressed","setKeyPressed","duplicateKeyFlag","keyHistoryLength","downHandler","key","push","upHandler","toFixed","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import socketIOClient from \"socket.io-client\";\nimport React, { setState, useState, useEffect } from 'react';\nexport default function Pinball() {\n\nconsole.log(\"Starting Pinball Controls\");\n\n// change endpoint to public IP with port forward to local servers\nconst ENDPOINT = \"24.60.168.240:8080\"\n//local const ENDPOINT = \"http://192.168.86.250:8080\";\n\n// Live Tesing (Hardware Available)\nconst socket = socketIOClient(ENDPOINT);\n\n//Local Testing (No Hardware Available)\n//const socket = { emit : ()=>{console.log(\"TESTING\")}}\n\nlet [buttonCount, setButtonCount] = useState(0);\nlet [keyHistory, updateKeyHistory] = useState([]);\nlet keyPressedTimeStart = useState(new Date().getTime())\nlet keyPressedTimeEnd = useState(new Date().getTime())\nlet buttonDuration = useState(keyPressedTimeEnd[0] - keyPressedTimeStart[0])\n\nfunction increaseButtonCount(buttonCount) {\n  setButtonCount( prevCount => prevCount+1);\n}\n\n// PINBALL RELAY CONTROLS - BELOW -\n\nfunction turnOnLeftFlipper(){\n  console.log(\"Turn On Left Flipper\");\n//  socket.emit(\"turnOnLeftFlipper\",1);\n  socket.emit(\"changeLeftFlipper\",1);\n}\n\nfunction turnOffLeftFlipper(){\n  console.log(\"Turn Off Left Flipper\");\n//  socket.emit(\"turnOnLeftFlipper\",0)\n  socket.emit(\"changeLeftFlipper\",0);\n}\n\nfunction turnOnRightFlipper(){\n  console.log(\"Turn On Left Flipper\");\n//  socket.emit(\"turnOnRightFlipper\",1);\n  socket.emit(\"changeRightFlipper\",1);\n}\n\nfunction turnOffRightFlipper(){\n  console.log(\"Turn Off Right Flipper\");\n//  socket.emit(\"turnOnRightFlipper\",0)\n  socket.emit(\"changeRightFlipper\",0);\n}\n\nfunction turnOnUpperRightFlipper(){\n  console.log(\"Turn On Upper Right Flipper\");\n  socket.emit(\"changeUpperRightFlipper\",1);\n}\n\nfunction turnOffUpperRightFlipper(){\n  console.log(\"Turn Off Upper Right Flipper\");\n  socket.emit(\"changeUpperRightFlipper\",0);\n}\n\n// SHOOT BUTTON\nfunction turnOnShootButton(){\n  console.log(\"Turn On Shoot Button\");\n  socket.emit(\"shootButton\",1);\n}\n\nfunction turnOffShootButton(){\n  console.log(\"Turn Off Shoot Button\");\n  socket.emit(\"shootButton\",0)\n}\n\n// START / CREDIT BUTTON\nfunction turnOnStartButton(){\n  console.log(\"Turn On Start Button\");\n  socket.emit(\"startButton\",1);\n}\n\nfunction turnOffStartButton(){\n  console.log(\"Turn Off Start Button\");\n  socket.emit(\"startButton\",0)\n}\n\n// PINBALL RELAY CONTROLS - ABOVE -\n\n\n// KEYBOARD CONTROLS\n\nconst leftFlipperKey1 = useKeyPress('a');\nconst leftFlipperKey2 = useKeyPress('A');\nconst leftFlipperKey3 = useKeyPress('ArrowLeft');\nconst leftFlipperKey4 = useKeyPress(',');\nconst leftFlipperKey5 = useKeyPress('<');\n\nconst rightFlipperKey1 = useKeyPress('s');\nconst rightFlipperKey2 = useKeyPress('S');\nconst rightFlipperKey3 = useKeyPress('ArrowRight');\nconst rightFlipperKey4 = useKeyPress('.');\nconst rightFlipperKey5 = useKeyPress('>');\n\nconst upperRightFlipperKey1 = useKeyPress('d');\nconst upperRightFlipperKey2 = useKeyPress('D');\nconst upperRightFlipperKey3 = useKeyPress('ArrowDown');\nconst upperRightFlipperKey4 = useKeyPress('/');\nconst upperRightFlipperKey5 = useKeyPress('?');\n\nconst startKey1 = useKeyPress('w');\nconst startKey2 = useKeyPress('W');\nconst startKey3 = useKeyPress(' ');\nconst startKey4 = useKeyPress('ArrowUp');\nconst startKey5 = useKeyPress('N');\nconst startKey6 = useKeyPress('n');\n\nconst shootKey1 = useKeyPress('e');\nconst shootKey2 = useKeyPress('E');\nconst shootKey3 = useKeyPress('p');\nconst shootKey4 = useKeyPress('P');\nconst shootKey5 = useKeyPress('1');\nconst shootKey6 = useKeyPress('M');\nconst shootKey7 = useKeyPress('n');\n\n\nfunction useKeyPress(targetKey) {\n\n    // State for keeping track of whether key is pressed\n    const [keyPressed, setKeyPressed] = useState(false);\n    let duplicateKeyFlag = useState(false);\n    let keyHistoryLength\n\n            // If pressed key is our target key then set to true\n    function downHandler({ key }) {\n                keyHistory.push(key);\n                console.log(\"Key Pressed: \", key);\n            //    console.log(\"Key History Length\", keyHistoryLength);\n                if (keyHistory[keyHistoryLength] == targetKey ){\n                  duplicateKeyFlag = true;\n            //       console.log(\"Duplicate Key \", duplicateKeyFlag);\n                } else {\n                  duplicateKeyFlag = false\n            //      console.log(\"Duplicate Key \", duplicateKeyFlag);\n                };\n\n                if (key === targetKey) {\n                  setKeyPressed(true);\n                  keyPressedTimeStart[0] = new Date().getTime();\n\n        if (duplicateKeyFlag === true){\n      //     console.log(\"Duplicate Key \", duplicateKeyFlag);\n            keyPressedTimeStart[0] = keyPressedTimeStart[0]\n      //      console.log(\"Key Down Time:\", keyPressedTimeStart[0])\n          } else {\n            keyPressedTimeStart[0] = new Date().getTime();\n          }\n\n          switch(targetKey) {\n            case \"a\":\n            case \"A\":\n            case \"ArrowLeft\":\n            case \"<\":\n            case \",\":\n                turnOnLeftFlipper()\n                increaseButtonCount()\n                break;\n            case \"s\":\n            case \"S\":\n            case \"ArrowRight\":\n            case \">\":\n            case \".\":\n                turnOnRightFlipper()\n                turnOnUpperRightFlipper()\n                increaseButtonCount()\n              break;\n            case \"w\":\n            case \"W\":\n            case \" \":\n            case \"ArrowUp\":\n            case \"M\":\n            case \"m\":\n                turnOnShootButton()\n                break;\n            case \"e\":\n            case \"E\":\n            case \"p\":\n            case \"P\":\n            case \"n\":\n            case \"N\":\n            case \"1\":\n                turnOnStartButton()\n                break;\n            case \"d\":\n            case \"D\":\n            case \"ArrowDown\":\n            case \"/\":\n            case \"?\":\n                turnOnUpperRightFlipper()\n                increaseButtonCount()\n                break;\n            default:\n              // code block\n          }\n\n      }\n    }\n\n\n    // If released key is our target key then set to false\n    const upHandler = ({ key }) => {\n      if (key === targetKey) {\n        setKeyPressed(false);\n        keyPressedTimeEnd[0] = new Date().getTime();\n      //  console.log(\"Key Up Time:\", keyPressedTimeEnd[0])\n        buttonDuration =   keyPressedTimeEnd[0] - keyPressedTimeStart[0];\n          buttonDuration = buttonDuration.toFixed(2)/1000\n    //    console.log(\"Key Pressed Time (buttonDuration):\", keyPressedTimeEnd[0],keyPressedTimeStart[0], buttonDuration)\n\n        switch(targetKey) {\n            case \"a\":\n            case \"A\":\n            case \"ArrowLeft\":\n            case \"<\":\n            case \",\":\n            turnOffLeftFlipper()\n            break;\n\n            case \"s\":\n            case \"S\":\n            case \"ArrowRight\":\n            case \">\":\n            case \".\":\n            turnOffRightFlipper()\n            turnOffUpperRightFlipper()\n            break;\n\n            case \"w\":\n            case \"W\":\n            case \" \":\n            case \"ArrowUp\":\n            case \"M\":\n            case \"m\":\n            turnOffShootButton()\n            break;\n\n            case \"e\":\n            case \"E\":\n            case \"p\":\n            case \"P\":\n            case \"n\":\n            case \"N\":\n            case \"1\":\n            turnOffStartButton()\n            break;\n\n            case \"d\":\n            case \"D\":\n            case \"ArrowDown\":\n            case \"/\":\n            case \"?\":\n            turnOffUpperRightFlipper()\n            break;\n          default:\n            // code block\n        }\n\n      }\n    }\n\n    // Add event listeners to listen for key presses\n    useEffect(() => {\n      window.addEventListener('keydown', downHandler);\n      window.addEventListener('keyup', upHandler);\n      // Remove event listeners on cleanup\n      return () => {\n        window.removeEventListener('keydown', downHandler);\n        window.removeEventListener('keyup', upHandler);\n      };\n    }, []); // Empty array ensures that effect is only run on mount and unmount\n\n    return keyPressed;\n  } // end function useKeyPress(targetKey)\n\nreturn (<></>)\n}\n"]},"metadata":{},"sourceType":"module"}