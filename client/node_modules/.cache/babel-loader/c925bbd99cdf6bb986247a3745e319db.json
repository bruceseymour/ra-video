{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst treeParser = require('./TreeParser');\n\nconst log = require('./log');\n\nlet fetch = require('cross-fetch');\n\nconst RuntimeVersion = require('@ampproject/toolbox-runtime-version/lib/RuntimeVersion');\n\nconst fetchRuntimeParameters = require('./fetchRuntimeParameters');\n/**\n * AMP Optimizer Configuration only applying AMP validity perserving transformations.\n */\n\n\nconst TRANSFORMATIONS_AMP_FIRST = [// Adds missing AMP tags\n'AddMandatoryTags', // Optional Markdown compatibility\n// needs to run before ServerSideRendering\n'Markdown', // Adds missing AMP extensions\n'AutoExtensionImporter', // Applies image optimizations, must run before PreloadHeroImage\n'OptimizeImages', // Detect hero image and preload link rel=preload, needs to run after OptimizeImages\n'PreloadHeroImage', // Applies server-side-rendering optimizations\n'ServerSideRendering', // Removes the boilerplate\n// needs to run after ServerSideRendering\n'AmpBoilerplateTransformer', // Optimizes script import order\n// needs to run after ServerSideRendering\n'ReorderHeadTransformer', // needs to run after ReorderHeadTransformer\n'RewriteAmpUrls', 'GoogleFontsPreconnect', 'PruneDuplicateResourceHints', // Move keyframes into a separate style tag\n'SeparateKeyframes', 'AddTransformedFlag', // Minifies HTML, JSON, inline amp-script\n'MinifyHtml', // Inject CSP script has required for inline amp-script\n// needs to run after MinifyHtml which changes the inline script\n'AmpScriptCsp'];\n/**\n * AMP Optimizer Configuration for transformations resulting in invalid AMP pages setting up paired AMP mode.\n *\n * @deprecated\n */\n\nconst TRANSFORMATIONS_PAIRED_AMP = [// Adds missing AMP extensions\n'AutoExtensionImporter', // Adds a link to the valid AMP version\n'AddAmpLink', // Applies image optimizations, must run before PreloadHeroImage\n'OptimizeImages', // Detect hero image and preload link rel=preload\n'PreloadHeroImage', // Applies server-side-rendering optimizations\n'ServerSideRendering', // Removes âš¡ or 'amp' from the html tag\n'RemoveAmpAttribute', // Removes the boilerplate\n// needs to run after ServerSideRendering\n'AmpBoilerplateTransformer', // Optimizes script import order\n// needs to run after ServerSideRendering\n'ReorderHeadTransformer', // needs to run after ReorderHeadTransformer\n'RewriteAmpUrls', 'GoogleFontsPreconnect', 'PruneDuplicateResourceHints', 'AddBlurryImagePlaceholders', 'SeparateKeyframes', 'AddTransformedFlag', // Minifies HTML, JSON, inline amp-script\n'MinifyHtml', // Inject CSP script has required for inline amp-script\n// needs to run after MinifyHtml which changes the inline script\n'AmpScriptCsp'];\nconst DEFAULT_CONFIG = {\n  fetch,\n  log,\n  transformations: TRANSFORMATIONS_AMP_FIRST,\n  verbose: false\n};\n/**\n * Applies a set of transformations to a DOM tree.\n */\n\nclass DomTransformer {\n  /**\n   * Create a DomTransformer.\n   * @param {Object} config - The config.\n   * @param {Array.<Transformer>} config.transformers - a list of transformers to be applied.\n   */\n  constructor(config = DEFAULT_CONFIG) {\n    this.setConfig(config);\n  }\n  /**\n   * Transforms an html string.\n   * @param {string} html - a string containing valid HTML.\n   * @param {Object} params - a dictionary containing transformer specific parameters.\n   * @return {string} - the transformed html string\n   */\n\n\n  async transformHtml(html, params) {\n    const tree = await treeParser.parse(html);\n    await this.transformTree(tree, params);\n    return treeParser.serialize(tree);\n  }\n  /**\n   * Transforms a DOM tree.\n   * @param {Tree} tree - a DOM tree.\n   * @param {Object} customParams - a dictionary containing transformer specific parameters.\n   */\n\n\n  async transformTree(tree, customParams = {}) {\n    log.verbose(customParams.verbose || false);\n    const runtimeParameters = await fetchRuntimeParameters(this.config, customParams);\n\n    const sequence = async (promise, transformer) => {\n      await promise;\n      return transformer.transform(tree, runtimeParameters);\n    };\n\n    return this.transformers_.reduce(sequence, Promise.resolve());\n  }\n  /**\n   * Set the config.\n   * @param {Object} config - The config.\n   * @param {boolean} config.verbose - true if verbose mode should be enabled [default: false].\n   * @param {Object} config.fetch - the fetch implementation to use.\n   * @param {Array.<Transformer>} config.transformations - a list of transformers to be applied.\n   */\n\n\n  setConfig(config) {\n    this.config = Object.assign({}, DEFAULT_CONFIG, config);\n\n    if (!this.config.runtimeVersion) {\n      // Re-use custom fetch implementation for runtime version provider\n      this.config.runtimeVersion = new RuntimeVersion(this.config.fetch);\n    }\n\n    log.verbose(this.config.verbose);\n    this.initTransformers_(this.config);\n  }\n  /**\n   * @private\n   */\n\n\n  initTransformers_(config) {\n    this.transformers_ = config.transformations.map(Transformer => {\n      if (typeof Transformer === 'string') {\n        Transformer = require(`./transformers/${Transformer}.js`);\n      }\n\n      return new Transformer(config);\n    });\n  }\n\n}\n\nmodule.exports = {\n  DomTransformer,\n  DEFAULT_CONFIG,\n  TRANSFORMATIONS_AMP_FIRST,\n  TRANSFORMATIONS_PAIRED_AMP\n};","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/DomTransformer.js"],"names":["treeParser","require","log","fetch","RuntimeVersion","fetchRuntimeParameters","TRANSFORMATIONS_AMP_FIRST","TRANSFORMATIONS_PAIRED_AMP","DEFAULT_CONFIG","transformations","verbose","DomTransformer","constructor","config","setConfig","transformHtml","html","params","tree","parse","transformTree","serialize","customParams","runtimeParameters","sequence","promise","transformer","transform","transformers_","reduce","Promise","resolve","Object","assign","runtimeVersion","initTransformers_","map","Transformer","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,cAAD,CAA1B;;AACA,MAAMC,GAAG,GAAGD,OAAO,CAAC,OAAD,CAAnB;;AACA,IAAIE,KAAK,GAAGF,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAMG,cAAc,GAAGH,OAAO,CAAC,wDAAD,CAA9B;;AACA,MAAMI,sBAAsB,GAAGJ,OAAO,CAAC,0BAAD,CAAtC;AAEA;AACA;AACA;;;AACA,MAAMK,yBAAyB,GAAG,CAChC;AACA,kBAFgC,EAGhC;AACA;AACA,UALgC,EAMhC;AACA,uBAPgC,EAQhC;AACA,gBATgC,EAUhC;AACA,kBAXgC,EAYhC;AACA,qBAbgC,EAchC;AACA;AACA,2BAhBgC,EAiBhC;AACA;AACA,wBAnBgC,EAoBhC;AACA,gBArBgC,EAsBhC,uBAtBgC,EAuBhC,6BAvBgC,EAwBhC;AACA,mBAzBgC,EA0BhC,oBA1BgC,EA2BhC;AACA,YA5BgC,EA6BhC;AACA;AACA,cA/BgC,CAAlC;AAkCA;AACA;AACA;AACA;AACA;;AACA,MAAMC,0BAA0B,GAAG,CACjC;AACA,uBAFiC,EAGjC;AACA,YAJiC,EAKjC;AACA,gBANiC,EAOjC;AACA,kBARiC,EASjC;AACA,qBAViC,EAWjC;AACA,oBAZiC,EAajC;AACA;AACA,2BAfiC,EAgBjC;AACA;AACA,wBAlBiC,EAmBjC;AACA,gBApBiC,EAqBjC,uBArBiC,EAsBjC,6BAtBiC,EAuBjC,4BAvBiC,EAwBjC,mBAxBiC,EAyBjC,oBAzBiC,EA0BjC;AACA,YA3BiC,EA4BjC;AACA;AACA,cA9BiC,CAAnC;AAiCA,MAAMC,cAAc,GAAG;AACrBL,EAAAA,KADqB;AAErBD,EAAAA,GAFqB;AAGrBO,EAAAA,eAAe,EAAEH,yBAHI;AAIrBI,EAAAA,OAAO,EAAE;AAJY,CAAvB;AAOA;AACA;AACA;;AACA,MAAMC,cAAN,CAAqB;AACnB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,MAAM,GAAGL,cAAV,EAA0B;AACnC,SAAKM,SAAL,CAAeD,MAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,QAAME,aAAN,CAAoBC,IAApB,EAA0BC,MAA1B,EAAkC;AAChC,UAAMC,IAAI,GAAG,MAAMlB,UAAU,CAACmB,KAAX,CAAiBH,IAAjB,CAAnB;AACA,UAAM,KAAKI,aAAL,CAAmBF,IAAnB,EAAyBD,MAAzB,CAAN;AACA,WAAOjB,UAAU,CAACqB,SAAX,CAAqBH,IAArB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,QAAME,aAAN,CAAoBF,IAApB,EAA0BI,YAAY,GAAG,EAAzC,EAA6C;AAC3CpB,IAAAA,GAAG,CAACQ,OAAJ,CAAYY,YAAY,CAACZ,OAAb,IAAwB,KAApC;AACA,UAAMa,iBAAiB,GAAG,MAAMlB,sBAAsB,CAAC,KAAKQ,MAAN,EAAcS,YAAd,CAAtD;;AACA,UAAME,QAAQ,GAAG,OAAOC,OAAP,EAAgBC,WAAhB,KAAgC;AAC/C,YAAMD,OAAN;AACA,aAAOC,WAAW,CAACC,SAAZ,CAAsBT,IAAtB,EAA4BK,iBAA5B,CAAP;AACD,KAHD;;AAIA,WAAO,KAAKK,aAAL,CAAmBC,MAAnB,CAA0BL,QAA1B,EAAoCM,OAAO,CAACC,OAAR,EAApC,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEjB,EAAAA,SAAS,CAACD,MAAD,EAAS;AAChB,SAAKA,MAAL,GAAcmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBzB,cAAlB,EAAkCK,MAAlC,CAAd;;AACA,QAAI,CAAC,KAAKA,MAAL,CAAYqB,cAAjB,EAAiC;AAC/B;AACA,WAAKrB,MAAL,CAAYqB,cAAZ,GAA6B,IAAI9B,cAAJ,CAAmB,KAAKS,MAAL,CAAYV,KAA/B,CAA7B;AACD;;AACDD,IAAAA,GAAG,CAACQ,OAAJ,CAAY,KAAKG,MAAL,CAAYH,OAAxB;AACA,SAAKyB,iBAAL,CAAuB,KAAKtB,MAA5B;AACD;AAED;AACF;AACA;;;AACEsB,EAAAA,iBAAiB,CAACtB,MAAD,EAAS;AACxB,SAAKe,aAAL,GAAqBf,MAAM,CAACJ,eAAP,CAAuB2B,GAAvB,CAA4BC,WAAD,IAAiB;AAC/D,UAAI,OAAOA,WAAP,KAAuB,QAA3B,EAAqC;AACnCA,QAAAA,WAAW,GAAGpC,OAAO,CAAE,kBAAiBoC,WAAY,KAA/B,CAArB;AACD;;AACD,aAAO,IAAIA,WAAJ,CAAgBxB,MAAhB,CAAP;AACD,KALoB,CAArB;AAMD;;AAhEkB;;AAmErByB,MAAM,CAACC,OAAP,GAAiB;AACf5B,EAAAA,cADe;AAEfH,EAAAA,cAFe;AAGfF,EAAAA,yBAHe;AAIfC,EAAAA;AAJe,CAAjB","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst treeParser = require('./TreeParser');\nconst log = require('./log');\nlet fetch = require('cross-fetch');\nconst RuntimeVersion = require('@ampproject/toolbox-runtime-version/lib/RuntimeVersion');\nconst fetchRuntimeParameters = require('./fetchRuntimeParameters');\n\n/**\n * AMP Optimizer Configuration only applying AMP validity perserving transformations.\n */\nconst TRANSFORMATIONS_AMP_FIRST = [\n  // Adds missing AMP tags\n  'AddMandatoryTags',\n  // Optional Markdown compatibility\n  // needs to run before ServerSideRendering\n  'Markdown',\n  // Adds missing AMP extensions\n  'AutoExtensionImporter',\n  // Applies image optimizations, must run before PreloadHeroImage\n  'OptimizeImages',\n  // Detect hero image and preload link rel=preload, needs to run after OptimizeImages\n  'PreloadHeroImage',\n  // Applies server-side-rendering optimizations\n  'ServerSideRendering',\n  // Removes the boilerplate\n  // needs to run after ServerSideRendering\n  'AmpBoilerplateTransformer',\n  // Optimizes script import order\n  // needs to run after ServerSideRendering\n  'ReorderHeadTransformer',\n  // needs to run after ReorderHeadTransformer\n  'RewriteAmpUrls',\n  'GoogleFontsPreconnect',\n  'PruneDuplicateResourceHints',\n  // Move keyframes into a separate style tag\n  'SeparateKeyframes',\n  'AddTransformedFlag',\n  // Minifies HTML, JSON, inline amp-script\n  'MinifyHtml',\n  // Inject CSP script has required for inline amp-script\n  // needs to run after MinifyHtml which changes the inline script\n  'AmpScriptCsp',\n];\n\n/**\n * AMP Optimizer Configuration for transformations resulting in invalid AMP pages setting up paired AMP mode.\n *\n * @deprecated\n */\nconst TRANSFORMATIONS_PAIRED_AMP = [\n  // Adds missing AMP extensions\n  'AutoExtensionImporter',\n  // Adds a link to the valid AMP version\n  'AddAmpLink',\n  // Applies image optimizations, must run before PreloadHeroImage\n  'OptimizeImages',\n  // Detect hero image and preload link rel=preload\n  'PreloadHeroImage',\n  // Applies server-side-rendering optimizations\n  'ServerSideRendering',\n  // Removes âš¡ or 'amp' from the html tag\n  'RemoveAmpAttribute',\n  // Removes the boilerplate\n  // needs to run after ServerSideRendering\n  'AmpBoilerplateTransformer',\n  // Optimizes script import order\n  // needs to run after ServerSideRendering\n  'ReorderHeadTransformer',\n  // needs to run after ReorderHeadTransformer\n  'RewriteAmpUrls',\n  'GoogleFontsPreconnect',\n  'PruneDuplicateResourceHints',\n  'AddBlurryImagePlaceholders',\n  'SeparateKeyframes',\n  'AddTransformedFlag',\n  // Minifies HTML, JSON, inline amp-script\n  'MinifyHtml',\n  // Inject CSP script has required for inline amp-script\n  // needs to run after MinifyHtml which changes the inline script\n  'AmpScriptCsp',\n];\n\nconst DEFAULT_CONFIG = {\n  fetch,\n  log,\n  transformations: TRANSFORMATIONS_AMP_FIRST,\n  verbose: false,\n};\n\n/**\n * Applies a set of transformations to a DOM tree.\n */\nclass DomTransformer {\n  /**\n   * Create a DomTransformer.\n   * @param {Object} config - The config.\n   * @param {Array.<Transformer>} config.transformers - a list of transformers to be applied.\n   */\n  constructor(config = DEFAULT_CONFIG) {\n    this.setConfig(config);\n  }\n\n  /**\n   * Transforms an html string.\n   * @param {string} html - a string containing valid HTML.\n   * @param {Object} params - a dictionary containing transformer specific parameters.\n   * @return {string} - the transformed html string\n   */\n  async transformHtml(html, params) {\n    const tree = await treeParser.parse(html);\n    await this.transformTree(tree, params);\n    return treeParser.serialize(tree);\n  }\n\n  /**\n   * Transforms a DOM tree.\n   * @param {Tree} tree - a DOM tree.\n   * @param {Object} customParams - a dictionary containing transformer specific parameters.\n   */\n  async transformTree(tree, customParams = {}) {\n    log.verbose(customParams.verbose || false);\n    const runtimeParameters = await fetchRuntimeParameters(this.config, customParams);\n    const sequence = async (promise, transformer) => {\n      await promise;\n      return transformer.transform(tree, runtimeParameters);\n    };\n    return this.transformers_.reduce(sequence, Promise.resolve());\n  }\n\n  /**\n   * Set the config.\n   * @param {Object} config - The config.\n   * @param {boolean} config.verbose - true if verbose mode should be enabled [default: false].\n   * @param {Object} config.fetch - the fetch implementation to use.\n   * @param {Array.<Transformer>} config.transformations - a list of transformers to be applied.\n   */\n  setConfig(config) {\n    this.config = Object.assign({}, DEFAULT_CONFIG, config);\n    if (!this.config.runtimeVersion) {\n      // Re-use custom fetch implementation for runtime version provider\n      this.config.runtimeVersion = new RuntimeVersion(this.config.fetch);\n    }\n    log.verbose(this.config.verbose);\n    this.initTransformers_(this.config);\n  }\n\n  /**\n   * @private\n   */\n  initTransformers_(config) {\n    this.transformers_ = config.transformations.map((Transformer) => {\n      if (typeof Transformer === 'string') {\n        Transformer = require(`./transformers/${Transformer}.js`);\n      }\n      return new Transformer(config);\n    });\n  }\n}\n\nmodule.exports = {\n  DomTransformer,\n  DEFAULT_CONFIG,\n  TRANSFORMATIONS_AMP_FIRST,\n  TRANSFORMATIONS_PAIRED_AMP,\n};\n"]},"metadata":{},"sourceType":"script"}