{"ast":null,"code":"/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst URL = require('url').URL;\n\nconst {\n  join,\n  resolve\n} = require('path');\n\nconst DUMMY_HOST = 'https://example.com';\n/**\n * Resolves a given URL / path against an optional base. The base can either specify an URL or\n * a relative filesystem path. It's also possible to pass a function for calculating the image\n * path.\n */\n\nclass PathResolver {\n  /**\n   * Create a PathResolver.\n   * @param {string|function}  [base=''] - relative path or base URL\n   */\n  constructor(base = '') {\n    if (typeof base === 'function') {\n      this.implementation = base;\n    } else {\n      this.implementation = this.createStaticResolver(base);\n    }\n  }\n  /**\n   * Resolves the given path against the base.\n   *\n   * @param {string} path - an absolute or relative URL\n   * @param {Object} params - the params object getting passed when calling ampOptimizer.transformHtml(html, params)\n   * @returns {string}\n   */\n\n\n  resolve(path, params) {\n    return this.implementation(path, params);\n  }\n\n  createStaticResolver(base) {\n    let baseSpecifiesHost = false;\n\n    try {\n      new URL(base);\n      baseSpecifiesHost = true;\n    } catch (_) {// base is not a valid host\n    }\n\n    return path => {\n      try {\n        if (baseSpecifiesHost) {\n          return new URL(path, base).toString();\n        } else {\n          return new URL(path).toString();\n        }\n      } catch (_) {// path and base specify a relative path\n      } // remove query params to be able to find a file on the local filesystem\n\n\n      path = new URL(path, DUMMY_HOST).pathname.substring(1); // resolve path to make debugging easier in case a file cannot be found locally\n\n      return resolve(join(base, path));\n    };\n  }\n\n}\n\nmodule.exports = PathResolver;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/PathResolver.js"],"names":["URL","require","join","resolve","DUMMY_HOST","PathResolver","constructor","base","implementation","createStaticResolver","path","params","baseSpecifiesHost","_","toString","pathname","substring","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAD,CAAP,CAAeD,GAA3B;;AACA,MAAM;AAACE,EAAAA,IAAD;AAAOC,EAAAA;AAAP,IAAkBF,OAAO,CAAC,MAAD,CAA/B;;AAEA,MAAMG,UAAU,GAAG,qBAAnB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMC,YAAN,CAAmB;AACjB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,IAAI,GAAG,EAAR,EAAY;AACrB,QAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;AAC9B,WAAKC,cAAL,GAAsBD,IAAtB;AACD,KAFD,MAEO;AACL,WAAKC,cAAL,GAAsB,KAAKC,oBAAL,CAA0BF,IAA1B,CAAtB;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEJ,EAAAA,OAAO,CAACO,IAAD,EAAOC,MAAP,EAAe;AACpB,WAAO,KAAKH,cAAL,CAAoBE,IAApB,EAA0BC,MAA1B,CAAP;AACD;;AAEDF,EAAAA,oBAAoB,CAACF,IAAD,EAAO;AACzB,QAAIK,iBAAiB,GAAG,KAAxB;;AACA,QAAI;AACF,UAAIZ,GAAJ,CAAQO,IAAR;AACAK,MAAAA,iBAAiB,GAAG,IAApB;AACD,KAHD,CAGE,OAAOC,CAAP,EAAU,CACV;AACD;;AACD,WAAQH,IAAD,IAAU;AACf,UAAI;AACF,YAAIE,iBAAJ,EAAuB;AACrB,iBAAO,IAAIZ,GAAJ,CAAQU,IAAR,EAAcH,IAAd,EAAoBO,QAApB,EAAP;AACD,SAFD,MAEO;AACL,iBAAO,IAAId,GAAJ,CAAQU,IAAR,EAAcI,QAAd,EAAP;AACD;AACF,OAND,CAME,OAAOD,CAAP,EAAU,CACV;AACD,OATc,CAUf;;;AACAH,MAAAA,IAAI,GAAG,IAAIV,GAAJ,CAAQU,IAAR,EAAcN,UAAd,EAA0BW,QAA1B,CAAmCC,SAAnC,CAA6C,CAA7C,CAAP,CAXe,CAYf;;AACA,aAAOb,OAAO,CAACD,IAAI,CAACK,IAAD,EAAOG,IAAP,CAAL,CAAd;AACD,KAdD;AAeD;;AA/CgB;;AAkDnBO,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst URL = require('url').URL;\nconst {join, resolve} = require('path');\n\nconst DUMMY_HOST = 'https://example.com';\n\n/**\n * Resolves a given URL / path against an optional base. The base can either specify an URL or\n * a relative filesystem path. It's also possible to pass a function for calculating the image\n * path.\n */\nclass PathResolver {\n  /**\n   * Create a PathResolver.\n   * @param {string|function}  [base=''] - relative path or base URL\n   */\n  constructor(base = '') {\n    if (typeof base === 'function') {\n      this.implementation = base;\n    } else {\n      this.implementation = this.createStaticResolver(base);\n    }\n  }\n\n  /**\n   * Resolves the given path against the base.\n   *\n   * @param {string} path - an absolute or relative URL\n   * @param {Object} params - the params object getting passed when calling ampOptimizer.transformHtml(html, params)\n   * @returns {string}\n   */\n  resolve(path, params) {\n    return this.implementation(path, params);\n  }\n\n  createStaticResolver(base) {\n    let baseSpecifiesHost = false;\n    try {\n      new URL(base);\n      baseSpecifiesHost = true;\n    } catch (_) {\n      // base is not a valid host\n    }\n    return (path) => {\n      try {\n        if (baseSpecifiesHost) {\n          return new URL(path, base).toString();\n        } else {\n          return new URL(path).toString();\n        }\n      } catch (_) {\n        // path and base specify a relative path\n      }\n      // remove query params to be able to find a file on the local filesystem\n      path = new URL(path, DUMMY_HOST).pathname.substring(1);\n      // resolve path to make debugging easier in case a file cannot be found locally\n      return resolve(join(base, path));\n    };\n  }\n}\n\nmodule.exports = PathResolver;\n"]},"metadata":{},"sourceType":"script"}