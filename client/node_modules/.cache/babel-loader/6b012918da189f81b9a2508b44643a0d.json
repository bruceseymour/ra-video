{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.css = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"next/dist/compiled/lodash.curry\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _miniCssExtractPlugin = _interopRequireDefault(require(\"../../../plugins/mini-css-extract-plugin\"));\n\nvar _helpers = require(\"../../helpers\");\n\nvar _utils = require(\"../../utils\");\n\nvar _loaders = require(\"./loaders\");\n\nvar _messages = require(\"./messages\");\n\nvar _plugins = require(\"./plugins\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // RegExps for all Style Sheet variants\n\n\nconst regexLikeCss = /\\.(css|scss|sass)$/; // RegExps for Style Sheets\n\nconst regexCssGlobal = /(?<!\\.module)\\.css$/;\nconst regexCssModules = /\\.module\\.css$/; // RegExps for Syntactically Awesome Style Sheets\n\nconst regexSassGlobal = /(?<!\\.module)\\.(scss|sass)$/;\nconst regexSassModules = /\\.module\\.(scss|sass)$/;\nconst css = (0, _lodash.default)(async function css(ctx, config) {\n  const {\n    prependData: sassPrependData,\n    additionalData: sassAdditionalData,\n    ...sassOptions\n  } = ctx.sassOptions;\n  const sassPreprocessors = [// First, process files with `sass-loader`: this inlines content, and\n  // compiles away the proprietary syntax.\n  {\n    loader: require.resolve('sass-loader'),\n    options: {\n      // Source maps are required so that `resolve-url-loader` can locate\n      // files original to their source directory.\n      sourceMap: true,\n      sassOptions,\n      additionalData: sassPrependData || sassAdditionalData\n    }\n  }, // Then, `sass-loader` will have passed-through CSS imports as-is instead\n  // of inlining them. Because they were inlined, the paths are no longer\n  // correct.\n  // To fix this, we use `resolve-url-loader` to rewrite the CSS\n  // imports to real file paths.\n  {\n    loader: require.resolve('resolve-url-loader'),\n    options: {\n      // Source maps are not required here, but we may as well emit\n      // them.\n      sourceMap: true\n    }\n  }];\n  const fns = [(0, _helpers.loader)({\n    oneOf: [{\n      // Impossible regex expression\n      test: /a^/,\n      loader: 'noop-loader',\n      options: {\n        __next_css_remove: true\n      }\n    }]\n  })];\n  const postCssPlugins = await (0, _plugins.getPostCssPlugins)(ctx.rootDirectory, ctx.isProduction, // TODO: In the future, we should stop supporting old CSS setups and\n  // unconditionally inject ours. When that happens, we should remove this\n  // function argument.\n  true); // CSS cannot be imported in _document. This comes before everything because\n  // global CSS nor CSS modules work in said file.\n\n  fns.push((0, _helpers.loader)({\n    oneOf: [{\n      test: regexLikeCss,\n      // Use a loose regex so we don't have to crawl the file system to\n      // find the real file name (if present).\n      issuer: /pages[\\\\/]_document\\./,\n      use: {\n        loader: 'error-loader',\n        options: {\n          reason: (0, _messages.getCustomDocumentError)()\n        }\n      }\n    }]\n  })); // CSS Modules support must be enabled on the server and client so the class\n  // names are available for SSR or Prerendering.\n\n  fns.push((0, _helpers.loader)({\n    oneOf: [{\n      // CSS Modules should never have side effects. This setting will\n      // allow unused CSS to be removed from the production build.\n      // We ensure this by disallowing `:global()` CSS at the top-level\n      // via the `pure` mode in `css-loader`.\n      sideEffects: false,\n      // CSS Modules are activated via this specific extension.\n      test: regexCssModules,\n      // CSS Modules are only supported in the user's application. We're\n      // not yet allowing CSS imports _within_ `node_modules`.\n      issuer: {\n        and: [ctx.rootDirectory],\n        not: [/node_modules/]\n      },\n      use: (0, _loaders.getCssModuleLoader)(ctx, postCssPlugins)\n    }]\n  }));\n  fns.push((0, _helpers.loader)({\n    oneOf: [// Opt-in support for Sass (using .scss or .sass extensions).\n    {\n      // Sass Modules should never have side effects. This setting will\n      // allow unused Sass to be removed from the production build.\n      // We ensure this by disallowing `:global()` Sass at the top-level\n      // via the `pure` mode in `css-loader`.\n      sideEffects: false,\n      // Sass Modules are activated via this specific extension.\n      test: regexSassModules,\n      // Sass Modules are only supported in the user's application. We're\n      // not yet allowing Sass imports _within_ `node_modules`.\n      issuer: {\n        and: [ctx.rootDirectory],\n        not: [/node_modules/]\n      },\n      use: (0, _loaders.getCssModuleLoader)(ctx, postCssPlugins, sassPreprocessors)\n    }]\n  })); // Throw an error for CSS Modules used outside their supported scope\n\n  fns.push((0, _helpers.loader)({\n    oneOf: [{\n      test: [regexCssModules, regexSassModules],\n      use: {\n        loader: 'error-loader',\n        options: {\n          reason: (0, _messages.getLocalModuleImportError)()\n        }\n      }\n    }]\n  }));\n\n  if (ctx.isServer) {\n    fns.push((0, _helpers.loader)({\n      oneOf: [{\n        test: [regexCssGlobal, regexSassGlobal],\n        use: require.resolve('next/dist/compiled/ignore-loader')\n      }]\n    }));\n  } else {\n    fns.push((0, _helpers.loader)({\n      oneOf: [{\n        // A global CSS import always has side effects. Webpack will tree\n        // shake the CSS without this option if the issuer claims to have\n        // no side-effects.\n        // See https://github.com/webpack/webpack/issues/6571\n        sideEffects: true,\n        test: regexCssGlobal,\n        // We only allow Global CSS to be imported anywhere in the\n        // application if it comes from node_modules. This is a best-effort\n        // heuristic that makes a safety trade-off for better\n        // interoperability with npm packages that require CSS. Without\n        // this ability, the component's CSS would have to be included for\n        // the entire app instead of specific page where it's required.\n        include: {\n          and: [/node_modules/]\n        },\n        // Global CSS is only supported in the user's application, not in\n        // node_modules.\n        issuer: {\n          and: [ctx.rootDirectory],\n          not: [/node_modules/]\n        },\n        use: (0, _loaders.getGlobalCssLoader)(ctx, postCssPlugins)\n      }]\n    }));\n\n    if (ctx.customAppFile) {\n      fns.push((0, _helpers.loader)({\n        oneOf: [{\n          // A global CSS import always has side effects. Webpack will tree\n          // shake the CSS without this option if the issuer claims to have\n          // no side-effects.\n          // See https://github.com/webpack/webpack/issues/6571\n          sideEffects: true,\n          test: regexCssGlobal,\n          issuer: {\n            and: [ctx.customAppFile]\n          },\n          use: (0, _loaders.getGlobalCssLoader)(ctx, postCssPlugins)\n        }]\n      }));\n      fns.push((0, _helpers.loader)({\n        oneOf: [{\n          // A global Sass import always has side effects. Webpack will tree\n          // shake the Sass without this option if the issuer claims to have\n          // no side-effects.\n          // See https://github.com/webpack/webpack/issues/6571\n          sideEffects: true,\n          test: regexSassGlobal,\n          issuer: {\n            and: [ctx.customAppFile]\n          },\n          use: (0, _loaders.getGlobalCssLoader)(ctx, postCssPlugins, sassPreprocessors)\n        }]\n      }));\n    }\n  } // Throw an error for Global CSS used inside of `node_modules`\n\n\n  fns.push((0, _helpers.loader)({\n    oneOf: [{\n      test: [regexCssGlobal, regexSassGlobal],\n      issuer: {\n        and: [/node_modules/]\n      },\n      use: {\n        loader: 'error-loader',\n        options: {\n          reason: (0, _messages.getGlobalModuleImportError)()\n        }\n      }\n    }]\n  })); // Throw an error for Global CSS used outside of our custom <App> file\n\n  fns.push((0, _helpers.loader)({\n    oneOf: [{\n      test: [regexCssGlobal, regexSassGlobal],\n      use: {\n        loader: 'error-loader',\n        options: {\n          reason: (0, _messages.getGlobalImportError)(ctx.customAppFile && _path.default.relative(ctx.rootDirectory, ctx.customAppFile))\n        }\n      }\n    }]\n  }));\n\n  if (ctx.isClient) {\n    // Automatically transform references to files (i.e. url()) into URLs\n    // e.g. url(./logo.svg)\n    fns.push((0, _helpers.loader)({\n      oneOf: [{\n        // This should only be applied to CSS files\n        issuer: regexLikeCss,\n        // Exclude extensions that webpack handles by default\n        exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n        use: {\n          // `file-loader` always emits a URL reference, where `url-loader`\n          // might inline the asset as a data URI\n          loader: require.resolve('next/dist/compiled/file-loader'),\n          options: {\n            // Hash the file for immutable cacheability\n            name: 'static/media/[name].[hash].[ext]'\n          }\n        }\n      }]\n    }));\n  }\n\n  if (ctx.isClient && ctx.isProduction) {\n    // Extract CSS as CSS file(s) in the client-side production bundle.\n    fns.push((0, _helpers.plugin)( // @ts-ignore webpack 5 compat\n    new _miniCssExtractPlugin.default({\n      filename: 'static/css/[contenthash].css',\n      chunkFilename: 'static/css/[contenthash].css',\n      // Next.js guarantees that CSS order \"doesn't matter\", due to imposed\n      // restrictions:\n      // 1. Global CSS can only be defined in a single entrypoint (_app)\n      // 2. CSS Modules generate scoped class names by default and cannot\n      //    include Global CSS (:global() selector).\n      //\n      // While not a perfect guarantee (e.g. liberal use of `:global()`\n      // selector), this assumption is required to code-split CSS.\n      //\n      // If this warning were to trigger, it'd be unactionable by the user,\n      // but likely not valid -- so we disable it.\n      ignoreOrder: true\n    })));\n  }\n\n  const fn = (0, _utils.pipe)(...fns);\n  return fn(config);\n});\nexports.css = css;","map":{"version":3,"sources":["../../../../../../build/webpack/config/blocks/css/index.ts"],"names":["regexLikeCss","regexCssGlobal","regexCssModules","regexSassGlobal","regexSassModules","css","prependData","additionalData","ctx","sassPreprocessors","loader","require","options","sourceMap","sassPrependData","fns","oneOf","test","__next_css_remove","postCssPlugins","issuer","use","reason","sideEffects","and","not","include","path","exclude","name","MiniCssExtractPlugin","filename","chunkFilename","ignoreOrder","fn"],"mappings":"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","sourcesContent":["import curry from 'next/dist/compiled/lodash.curry'\nimport path from 'path'\nimport webpack, { Configuration } from 'webpack'\nimport MiniCssExtractPlugin from '../../../plugins/mini-css-extract-plugin'\nimport { loader, plugin } from '../../helpers'\nimport { ConfigurationContext, ConfigurationFn, pipe } from '../../utils'\nimport { getCssModuleLoader, getGlobalCssLoader } from './loaders'\nimport {\n  getCustomDocumentError,\n  getGlobalImportError,\n  getGlobalModuleImportError,\n  getLocalModuleImportError,\n} from './messages'\nimport { getPostCssPlugins } from './plugins'\n\n// RegExps for all Style Sheet variants\nconst regexLikeCss = /\\.(css|scss|sass)$/\n\n// RegExps for Style Sheets\nconst regexCssGlobal = /(?<!\\.module)\\.css$/\nconst regexCssModules = /\\.module\\.css$/\n\n// RegExps for Syntactically Awesome Style Sheets\nconst regexSassGlobal = /(?<!\\.module)\\.(scss|sass)$/\nconst regexSassModules = /\\.module\\.(scss|sass)$/\n\nexport const css = curry(async function css(\n  ctx: ConfigurationContext,\n  config: Configuration\n) {\n  const {\n    prependData: sassPrependData,\n    additionalData: sassAdditionalData,\n    ...sassOptions\n  } = ctx.sassOptions\n\n  const sassPreprocessors: webpack.RuleSetUseItem[] = [\n    // First, process files with `sass-loader`: this inlines content, and\n    // compiles away the proprietary syntax.\n    {\n      loader: require.resolve('sass-loader'),\n      options: {\n        // Source maps are required so that `resolve-url-loader` can locate\n        // files original to their source directory.\n        sourceMap: true,\n        sassOptions,\n        additionalData: sassPrependData || sassAdditionalData,\n      },\n    },\n    // Then, `sass-loader` will have passed-through CSS imports as-is instead\n    // of inlining them. Because they were inlined, the paths are no longer\n    // correct.\n    // To fix this, we use `resolve-url-loader` to rewrite the CSS\n    // imports to real file paths.\n    {\n      loader: require.resolve('resolve-url-loader'),\n      options: {\n        // Source maps are not required here, but we may as well emit\n        // them.\n        sourceMap: true,\n      },\n    },\n  ]\n\n  const fns: ConfigurationFn[] = [\n    loader({\n      oneOf: [\n        {\n          // Impossible regex expression\n          test: /a^/,\n          loader: 'noop-loader',\n          options: { __next_css_remove: true },\n        },\n      ],\n    }),\n  ]\n\n  const postCssPlugins = await getPostCssPlugins(\n    ctx.rootDirectory,\n    ctx.isProduction,\n    // TODO: In the future, we should stop supporting old CSS setups and\n    // unconditionally inject ours. When that happens, we should remove this\n    // function argument.\n    true\n  )\n\n  // CSS cannot be imported in _document. This comes before everything because\n  // global CSS nor CSS modules work in said file.\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: regexLikeCss,\n          // Use a loose regex so we don't have to crawl the file system to\n          // find the real file name (if present).\n          issuer: /pages[\\\\/]_document\\./,\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getCustomDocumentError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  // CSS Modules support must be enabled on the server and client so the class\n  // names are available for SSR or Prerendering.\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          // CSS Modules should never have side effects. This setting will\n          // allow unused CSS to be removed from the production build.\n          // We ensure this by disallowing `:global()` CSS at the top-level\n          // via the `pure` mode in `css-loader`.\n          sideEffects: false,\n          // CSS Modules are activated via this specific extension.\n          test: regexCssModules,\n          // CSS Modules are only supported in the user's application. We're\n          // not yet allowing CSS imports _within_ `node_modules`.\n          issuer: {\n            and: [ctx.rootDirectory],\n            not: [/node_modules/],\n          },\n          use: getCssModuleLoader(ctx, postCssPlugins),\n        },\n      ],\n    })\n  )\n  fns.push(\n    loader({\n      oneOf: [\n        // Opt-in support for Sass (using .scss or .sass extensions).\n        {\n          // Sass Modules should never have side effects. This setting will\n          // allow unused Sass to be removed from the production build.\n          // We ensure this by disallowing `:global()` Sass at the top-level\n          // via the `pure` mode in `css-loader`.\n          sideEffects: false,\n          // Sass Modules are activated via this specific extension.\n          test: regexSassModules,\n          // Sass Modules are only supported in the user's application. We're\n          // not yet allowing Sass imports _within_ `node_modules`.\n          issuer: {\n            and: [ctx.rootDirectory],\n            not: [/node_modules/],\n          },\n          use: getCssModuleLoader(ctx, postCssPlugins, sassPreprocessors),\n        },\n      ],\n    })\n  )\n\n  // Throw an error for CSS Modules used outside their supported scope\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssModules, regexSassModules],\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getLocalModuleImportError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  if (ctx.isServer) {\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            test: [regexCssGlobal, regexSassGlobal],\n            use: require.resolve('next/dist/compiled/ignore-loader'),\n          },\n        ],\n      })\n    )\n  } else {\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            // A global CSS import always has side effects. Webpack will tree\n            // shake the CSS without this option if the issuer claims to have\n            // no side-effects.\n            // See https://github.com/webpack/webpack/issues/6571\n            sideEffects: true,\n            test: regexCssGlobal,\n            // We only allow Global CSS to be imported anywhere in the\n            // application if it comes from node_modules. This is a best-effort\n            // heuristic that makes a safety trade-off for better\n            // interoperability with npm packages that require CSS. Without\n            // this ability, the component's CSS would have to be included for\n            // the entire app instead of specific page where it's required.\n            include: { and: [/node_modules/] },\n            // Global CSS is only supported in the user's application, not in\n            // node_modules.\n            issuer: {\n              and: [ctx.rootDirectory],\n              not: [/node_modules/],\n            },\n            use: getGlobalCssLoader(ctx, postCssPlugins),\n          },\n        ],\n      })\n    )\n\n    if (ctx.customAppFile) {\n      fns.push(\n        loader({\n          oneOf: [\n            {\n              // A global CSS import always has side effects. Webpack will tree\n              // shake the CSS without this option if the issuer claims to have\n              // no side-effects.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n              test: regexCssGlobal,\n              issuer: { and: [ctx.customAppFile] },\n              use: getGlobalCssLoader(ctx, postCssPlugins),\n            },\n          ],\n        })\n      )\n      fns.push(\n        loader({\n          oneOf: [\n            {\n              // A global Sass import always has side effects. Webpack will tree\n              // shake the Sass without this option if the issuer claims to have\n              // no side-effects.\n              // See https://github.com/webpack/webpack/issues/6571\n              sideEffects: true,\n              test: regexSassGlobal,\n              issuer: { and: [ctx.customAppFile] },\n              use: getGlobalCssLoader(ctx, postCssPlugins, sassPreprocessors),\n            },\n          ],\n        })\n      )\n    }\n  }\n\n  // Throw an error for Global CSS used inside of `node_modules`\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssGlobal, regexSassGlobal],\n          issuer: { and: [/node_modules/] },\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getGlobalModuleImportError(),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  // Throw an error for Global CSS used outside of our custom <App> file\n  fns.push(\n    loader({\n      oneOf: [\n        {\n          test: [regexCssGlobal, regexSassGlobal],\n          use: {\n            loader: 'error-loader',\n            options: {\n              reason: getGlobalImportError(\n                ctx.customAppFile &&\n                  path.relative(ctx.rootDirectory, ctx.customAppFile)\n              ),\n            },\n          },\n        },\n      ],\n    })\n  )\n\n  if (ctx.isClient) {\n    // Automatically transform references to files (i.e. url()) into URLs\n    // e.g. url(./logo.svg)\n    fns.push(\n      loader({\n        oneOf: [\n          {\n            // This should only be applied to CSS files\n            issuer: regexLikeCss,\n            // Exclude extensions that webpack handles by default\n            exclude: [/\\.(js|mjs|jsx|ts|tsx)$/, /\\.html$/, /\\.json$/],\n            use: {\n              // `file-loader` always emits a URL reference, where `url-loader`\n              // might inline the asset as a data URI\n              loader: require.resolve('next/dist/compiled/file-loader'),\n              options: {\n                // Hash the file for immutable cacheability\n                name: 'static/media/[name].[hash].[ext]',\n              },\n            },\n          },\n        ],\n      })\n    )\n  }\n\n  if (ctx.isClient && ctx.isProduction) {\n    // Extract CSS as CSS file(s) in the client-side production bundle.\n    fns.push(\n      plugin(\n        // @ts-ignore webpack 5 compat\n        new MiniCssExtractPlugin({\n          filename: 'static/css/[contenthash].css',\n          chunkFilename: 'static/css/[contenthash].css',\n          // Next.js guarantees that CSS order \"doesn't matter\", due to imposed\n          // restrictions:\n          // 1. Global CSS can only be defined in a single entrypoint (_app)\n          // 2. CSS Modules generate scoped class names by default and cannot\n          //    include Global CSS (:global() selector).\n          //\n          // While not a perfect guarantee (e.g. liberal use of `:global()`\n          // selector), this assumption is required to code-split CSS.\n          //\n          // If this warning were to trigger, it'd be unactionable by the user,\n          // but likely not valid -- so we disable it.\n          ignoreOrder: true,\n        })\n      )\n    )\n  }\n\n  const fn = pipe(...fns)\n  return fn(config)\n})\n"]},"metadata":{},"sourceType":"script"}