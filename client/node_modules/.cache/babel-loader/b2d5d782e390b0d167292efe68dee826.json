{"ast":null,"code":"import \"./lib/transform.js\";\nimport \"./lib/mozilla-ast.js\";\nimport { minify } from \"./lib/minify.js\";\nexport { minify } from \"./lib/minify.js\";\nexport { run_cli as _run_cli } from \"./lib/cli.js\";\nexport async function _default_options() {\n  const defs = {};\n  Object.keys(infer_options({\n    0: 0\n  })).forEach(component => {\n    const options = infer_options({\n      [component]: {\n        0: 0\n      }\n    });\n    if (options) defs[component] = options;\n  });\n  return defs;\n}\n\nasync function infer_options(options) {\n  try {\n    await minify(\"\", options);\n  } catch (error) {\n    return error.defs;\n  }\n}","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/node_modules/terser/main.js"],"names":["minify","run_cli","_run_cli","_default_options","defs","Object","keys","infer_options","forEach","component","options","error"],"mappings":"AAAA,OAAO,oBAAP;AACA,OAAO,sBAAP;AACA,SAASA,MAAT,QAAuB,iBAAvB;AAEA,SAASA,MAAT,QAAuB,iBAAvB;AACA,SAASC,OAAO,IAAIC,QAApB,QAAoC,cAApC;AAEA,OAAO,eAAeC,gBAAf,GAAkC;AACrC,QAAMC,IAAI,GAAG,EAAb;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYC,aAAa,CAAC;AAAE,OAAG;AAAL,GAAD,CAAzB,EAAqCC,OAArC,CAA8CC,SAAD,IAAe;AACxD,UAAMC,OAAO,GAAGH,aAAa,CAAC;AAC1B,OAACE,SAAD,GAAa;AAAC,WAAG;AAAJ;AADa,KAAD,CAA7B;AAIA,QAAIC,OAAJ,EAAaN,IAAI,CAACK,SAAD,CAAJ,GAAkBC,OAAlB;AAChB,GAND;AAOA,SAAON,IAAP;AACH;;AAED,eAAeG,aAAf,CAA6BG,OAA7B,EAAsC;AAClC,MAAI;AACA,UAAMV,MAAM,CAAC,EAAD,EAAKU,OAAL,CAAZ;AACH,GAFD,CAEE,OAAOC,KAAP,EAAc;AACZ,WAAOA,KAAK,CAACP,IAAb;AACH;AACJ","sourcesContent":["import \"./lib/transform.js\";\nimport \"./lib/mozilla-ast.js\";\nimport { minify } from \"./lib/minify.js\";\n\nexport { minify } from \"./lib/minify.js\";\nexport { run_cli as _run_cli } from \"./lib/cli.js\";\n\nexport async function _default_options() {\n    const defs = {};\n\n    Object.keys(infer_options({ 0: 0 })).forEach((component) => {\n        const options = infer_options({\n            [component]: {0: 0}\n        });\n\n        if (options) defs[component] = options;\n    });\n    return defs;\n}\n\nasync function infer_options(options) {\n    try {\n        await minify(\"\", options);\n    } catch (error) {\n        return error.defs;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}