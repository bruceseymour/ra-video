{"ast":null,"code":"/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\"use strict\";\n\nimport { defaults, makePredicate, noop, regexp_source_fix, sort_regexp_flags, return_false, return_true } from \"./utils/index.js\";\nimport { first_in_statement, left_is_object } from \"./utils/first_in_statement.js\";\nimport { AST_Array, AST_Arrow, AST_Assign, AST_Await, AST_BigInt, AST_Binary, AST_BlockStatement, AST_Break, AST_Call, AST_Case, AST_Catch, AST_Chain, AST_Class, AST_ClassExpression, AST_ClassProperty, AST_ConciseMethod, AST_Conditional, AST_Const, AST_Constant, AST_Continue, AST_Debugger, AST_Default, AST_DefaultAssign, AST_Definitions, AST_Defun, AST_Destructuring, AST_Directive, AST_Do, AST_Dot, AST_EmptyStatement, AST_Exit, AST_Expansion, AST_Export, AST_Finally, AST_For, AST_ForIn, AST_ForOf, AST_Function, AST_Hole, AST_If, AST_Import, AST_ImportMeta, AST_Jump, AST_LabeledStatement, AST_Lambda, AST_Let, AST_LoopControl, AST_NameMapping, AST_New, AST_NewTarget, AST_Node, AST_Number, AST_Object, AST_ObjectGetter, AST_ObjectKeyVal, AST_ObjectProperty, AST_ObjectSetter, AST_PrefixedTemplateString, AST_PropAccess, AST_RegExp, AST_Return, AST_Scope, AST_Sequence, AST_SimpleStatement, AST_Statement, AST_StatementWithBody, AST_String, AST_Sub, AST_Super, AST_Switch, AST_SwitchBranch, AST_Symbol, AST_SymbolClassProperty, AST_SymbolMethod, AST_SymbolRef, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Throw, AST_Toplevel, AST_Try, AST_Unary, AST_UnaryPostfix, AST_UnaryPrefix, AST_Var, AST_VarDef, AST_While, AST_With, AST_Yield, TreeWalker, walk, walk_abort } from \"./ast.js\";\nimport { get_full_char_code, get_full_char, is_identifier_char, is_basic_identifier_string, is_identifier_string, PRECEDENCE, RESERVED_WORDS } from \"./parse.js\";\nconst EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\nconst r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;\n\nfunction is_some_comments(comment) {\n  // multiline comment\n  return (comment.type === \"comment2\" || comment.type === \"comment1\") && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value);\n}\n\nfunction OutputStream(options) {\n  var readonly = !options;\n  options = defaults(options, {\n    ascii_only: false,\n    beautify: false,\n    braces: false,\n    comments: \"some\",\n    ecma: 5,\n    ie8: false,\n    indent_level: 4,\n    indent_start: 0,\n    inline_script: true,\n    keep_numbers: false,\n    keep_quoted_props: false,\n    max_line_len: false,\n    preamble: null,\n    preserve_annotations: false,\n    quote_keys: false,\n    quote_style: 0,\n    safari10: false,\n    semicolons: true,\n    shebang: true,\n    shorthand: undefined,\n    source_map: null,\n    webkit: false,\n    width: 80,\n    wrap_iife: false,\n    wrap_func_args: true\n  }, true);\n  if (options.shorthand === undefined) options.shorthand = options.ecma > 5; // Convert comment option to RegExp if neccessary and set up comments filter\n\n  var comment_filter = return_false; // Default case, throw all comments away\n\n  if (options.comments) {\n    let comments = options.comments;\n\n    if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n      var regex_pos = options.comments.lastIndexOf(\"/\");\n      comments = new RegExp(options.comments.substr(1, regex_pos - 1), options.comments.substr(regex_pos + 1));\n    }\n\n    if (comments instanceof RegExp) {\n      comment_filter = function (comment) {\n        return comment.type != \"comment5\" && comments.test(comment.value);\n      };\n    } else if (typeof comments === \"function\") {\n      comment_filter = function (comment) {\n        return comment.type != \"comment5\" && comments(this, comment);\n      };\n    } else if (comments === \"some\") {\n      comment_filter = is_some_comments;\n    } else {\n      // NOTE includes \"all\" option\n      comment_filter = return_true;\n    }\n  }\n\n  var indentation = 0;\n  var current_col = 0;\n  var current_line = 1;\n  var current_pos = 0;\n  var OUTPUT = \"\";\n  let printed_comments = new Set();\n  var to_utf8 = options.ascii_only ? function (str, identifier) {\n    if (options.ecma >= 2015 && !options.safari10) {\n      str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function (ch) {\n        var code = get_full_char_code(ch, 0).toString(16);\n        return \"\\\\u{\" + code + \"}\";\n      });\n    }\n\n    return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function (ch) {\n      var code = ch.charCodeAt(0).toString(16);\n\n      if (code.length <= 2 && !identifier) {\n        while (code.length < 2) code = \"0\" + code;\n\n        return \"\\\\x\" + code;\n      } else {\n        while (code.length < 4) code = \"0\" + code;\n\n        return \"\\\\u\" + code;\n      }\n    });\n  } : function (str) {\n    return str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]|([\\ud800-\\udbff]|[\\udc00-\\udfff])/g, function (match, lone) {\n      if (lone) {\n        return \"\\\\u\" + lone.charCodeAt(0).toString(16);\n      }\n\n      return match;\n    });\n  };\n\n  function make_string(str, quote) {\n    var dq = 0,\n        sq = 0;\n    str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g, function (s, i) {\n      switch (s) {\n        case '\"':\n          ++dq;\n          return '\"';\n\n        case \"'\":\n          ++sq;\n          return \"'\";\n\n        case \"\\\\\":\n          return \"\\\\\\\\\";\n\n        case \"\\n\":\n          return \"\\\\n\";\n\n        case \"\\r\":\n          return \"\\\\r\";\n\n        case \"\\t\":\n          return \"\\\\t\";\n\n        case \"\\b\":\n          return \"\\\\b\";\n\n        case \"\\f\":\n          return \"\\\\f\";\n\n        case \"\\x0B\":\n          return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n\n        case \"\\u2028\":\n          return \"\\\\u2028\";\n\n        case \"\\u2029\":\n          return \"\\\\u2029\";\n\n        case \"\\ufeff\":\n          return \"\\\\ufeff\";\n\n        case \"\\0\":\n          return /[0-9]/.test(get_full_char(str, i + 1)) ? \"\\\\x00\" : \"\\\\0\";\n      }\n\n      return s;\n    });\n\n    function quote_single() {\n      return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n    }\n\n    function quote_double() {\n      return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n    }\n\n    function quote_template() {\n      return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n    }\n\n    str = to_utf8(str);\n    if (quote === \"`\") return quote_template();\n\n    switch (options.quote_style) {\n      case 1:\n        return quote_single();\n\n      case 2:\n        return quote_double();\n\n      case 3:\n        return quote == \"'\" ? quote_single() : quote_double();\n\n      default:\n        return dq > sq ? quote_single() : quote_double();\n    }\n  }\n\n  function encode_string(str, quote) {\n    var ret = make_string(str, quote);\n\n    if (options.inline_script) {\n      ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n      ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n      ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n    }\n\n    return ret;\n  }\n\n  function make_name(name) {\n    name = name.toString();\n    name = to_utf8(name, true);\n    return name;\n  }\n\n  function make_indent(back) {\n    return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n  }\n  /* -----[ beautification/minification ]----- */\n\n\n  var has_parens = false;\n  var might_need_space = false;\n  var might_need_semicolon = false;\n  var might_add_newline = 0;\n  var need_newline_indented = false;\n  var need_space = false;\n  var newline_insert = -1;\n  var last = \"\";\n  var mapping_token,\n      mapping_name,\n      mappings = options.source_map && [];\n  var do_add_mapping = mappings ? function () {\n    mappings.forEach(function (mapping) {\n      try {\n        options.source_map.add(mapping.token.file, mapping.line, mapping.col, mapping.token.line, mapping.token.col, !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name);\n      } catch (ex) {// Ignore bad mapping\n      }\n    });\n    mappings = [];\n  } : noop;\n  var ensure_line_len = options.max_line_len ? function () {\n    if (current_col > options.max_line_len) {\n      if (might_add_newline) {\n        var left = OUTPUT.slice(0, might_add_newline);\n        var right = OUTPUT.slice(might_add_newline);\n\n        if (mappings) {\n          var delta = right.length - current_col;\n          mappings.forEach(function (mapping) {\n            mapping.line++;\n            mapping.col += delta;\n          });\n        }\n\n        OUTPUT = left + \"\\n\" + right;\n        current_line++;\n        current_pos++;\n        current_col = right.length;\n      }\n    }\n\n    if (might_add_newline) {\n      might_add_newline = 0;\n      do_add_mapping();\n    }\n  } : noop;\n  var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n  function print(str) {\n    str = String(str);\n    var ch = get_full_char(str, 0);\n\n    if (need_newline_indented && ch) {\n      need_newline_indented = false;\n\n      if (ch !== \"\\n\") {\n        print(\"\\n\");\n        indent();\n      }\n    }\n\n    if (need_space && ch) {\n      need_space = false;\n\n      if (!/[\\s;})]/.test(ch)) {\n        space();\n      }\n    }\n\n    newline_insert = -1;\n    var prev = last.charAt(last.length - 1);\n\n    if (might_need_semicolon) {\n      might_need_semicolon = false;\n\n      if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n        if (options.semicolons || requireSemicolonChars.has(ch)) {\n          OUTPUT += \";\";\n          current_col++;\n          current_pos++;\n        } else {\n          ensure_line_len();\n\n          if (current_col > 0) {\n            OUTPUT += \"\\n\";\n            current_pos++;\n            current_line++;\n            current_col = 0;\n          }\n\n          if (/^\\s+$/.test(str)) {\n            // reset the semicolon flag, since we didn't print one\n            // now and might still have to later\n            might_need_semicolon = true;\n          }\n        }\n\n        if (!options.beautify) might_need_space = false;\n      }\n    }\n\n    if (might_need_space) {\n      if (is_identifier_char(prev) && (is_identifier_char(ch) || ch == \"\\\\\") || ch == \"/\" && ch == prev || (ch == \"+\" || ch == \"-\") && ch == last) {\n        OUTPUT += \" \";\n        current_col++;\n        current_pos++;\n      }\n\n      might_need_space = false;\n    }\n\n    if (mapping_token) {\n      mappings.push({\n        token: mapping_token,\n        name: mapping_name,\n        line: current_line,\n        col: current_col\n      });\n      mapping_token = false;\n      if (!might_add_newline) do_add_mapping();\n    }\n\n    OUTPUT += str;\n    has_parens = str[str.length - 1] == \"(\";\n    current_pos += str.length;\n    var a = str.split(/\\r?\\n/),\n        n = a.length - 1;\n    current_line += n;\n    current_col += a[0].length;\n\n    if (n > 0) {\n      ensure_line_len();\n      current_col = a[n].length;\n    }\n\n    last = str;\n  }\n\n  var star = function () {\n    print(\"*\");\n  };\n\n  var space = options.beautify ? function () {\n    print(\" \");\n  } : function () {\n    might_need_space = true;\n  };\n  var indent = options.beautify ? function (half) {\n    if (options.beautify) {\n      print(make_indent(half ? 0.5 : 0));\n    }\n  } : noop;\n  var with_indent = options.beautify ? function (col, cont) {\n    if (col === true) col = next_indent();\n    var save_indentation = indentation;\n    indentation = col;\n    var ret = cont();\n    indentation = save_indentation;\n    return ret;\n  } : function (col, cont) {\n    return cont();\n  };\n  var newline = options.beautify ? function () {\n    if (newline_insert < 0) return print(\"\\n\");\n\n    if (OUTPUT[newline_insert] != \"\\n\") {\n      OUTPUT = OUTPUT.slice(0, newline_insert) + \"\\n\" + OUTPUT.slice(newline_insert);\n      current_pos++;\n      current_line++;\n    }\n\n    newline_insert++;\n  } : options.max_line_len ? function () {\n    ensure_line_len();\n    might_add_newline = OUTPUT.length;\n  } : noop;\n  var semicolon = options.beautify ? function () {\n    print(\";\");\n  } : function () {\n    might_need_semicolon = true;\n  };\n\n  function force_semicolon() {\n    might_need_semicolon = false;\n    print(\";\");\n  }\n\n  function next_indent() {\n    return indentation + options.indent_level;\n  }\n\n  function with_block(cont) {\n    var ret;\n    print(\"{\");\n    newline();\n    with_indent(next_indent(), function () {\n      ret = cont();\n    });\n    indent();\n    print(\"}\");\n    return ret;\n  }\n\n  function with_parens(cont) {\n    print(\"(\"); //XXX: still nice to have that for argument lists\n    //var ret = with_indent(current_col, cont);\n\n    var ret = cont();\n    print(\")\");\n    return ret;\n  }\n\n  function with_square(cont) {\n    print(\"[\"); //var ret = with_indent(current_col, cont);\n\n    var ret = cont();\n    print(\"]\");\n    return ret;\n  }\n\n  function comma() {\n    print(\",\");\n    space();\n  }\n\n  function colon() {\n    print(\":\");\n    space();\n  }\n\n  var add_mapping = mappings ? function (token, name) {\n    mapping_token = token;\n    mapping_name = name;\n  } : noop;\n\n  function get() {\n    if (might_add_newline) {\n      ensure_line_len();\n    }\n\n    return OUTPUT;\n  }\n\n  function has_nlb() {\n    let n = OUTPUT.length - 1;\n\n    while (n >= 0) {\n      const code = OUTPUT.charCodeAt(n);\n\n      if (code === CODE_LINE_BREAK) {\n        return true;\n      }\n\n      if (code !== CODE_SPACE) {\n        return false;\n      }\n\n      n--;\n    }\n\n    return true;\n  }\n\n  function filter_comment(comment) {\n    if (!options.preserve_annotations) {\n      comment = comment.replace(r_annotation, \" \");\n    }\n\n    if (/^\\s*$/.test(comment)) {\n      return \"\";\n    }\n\n    return comment.replace(/(<\\s*\\/\\s*)(script)/i, \"<\\\\/$2\");\n  }\n\n  function prepend_comments(node) {\n    var self = this;\n    var start = node.start;\n    if (!start) return;\n    var printed_comments = self.printed_comments; // There cannot be a newline between return and its value.\n\n    const return_with_value = node instanceof AST_Exit && node.value;\n\n    if (start.comments_before && printed_comments.has(start.comments_before)) {\n      if (return_with_value) {\n        start.comments_before = [];\n      } else {\n        return;\n      }\n    }\n\n    var comments = start.comments_before;\n\n    if (!comments) {\n      comments = start.comments_before = [];\n    }\n\n    printed_comments.add(comments);\n\n    if (return_with_value) {\n      var tw = new TreeWalker(function (node) {\n        var parent = tw.parent();\n\n        if (parent instanceof AST_Exit || parent instanceof AST_Binary && parent.left === node || parent.TYPE == \"Call\" && parent.expression === node || parent instanceof AST_Conditional && parent.condition === node || parent instanceof AST_Dot && parent.expression === node || parent instanceof AST_Sequence && parent.expressions[0] === node || parent instanceof AST_Sub && parent.expression === node || parent instanceof AST_UnaryPostfix) {\n          if (!node.start) return;\n          var text = node.start.comments_before;\n\n          if (text && !printed_comments.has(text)) {\n            printed_comments.add(text);\n            comments = comments.concat(text);\n          }\n        } else {\n          return true;\n        }\n      });\n      tw.push(node);\n      node.value.walk(tw);\n    }\n\n    if (current_pos == 0) {\n      if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\" && !printed_comments.has(comments[0])) {\n        print(\"#!\" + comments.shift().value + \"\\n\");\n        indent();\n      }\n\n      var preamble = options.preamble;\n\n      if (preamble) {\n        print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n      }\n    }\n\n    comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n    if (comments.length == 0) return;\n    var last_nlb = has_nlb();\n    comments.forEach(function (c, i) {\n      printed_comments.add(c);\n\n      if (!last_nlb) {\n        if (c.nlb) {\n          print(\"\\n\");\n          indent();\n          last_nlb = true;\n        } else if (i > 0) {\n          space();\n        }\n      }\n\n      if (/comment[134]/.test(c.type)) {\n        var value = filter_comment(c.value);\n\n        if (value) {\n          print(\"//\" + value + \"\\n\");\n          indent();\n        }\n\n        last_nlb = true;\n      } else if (c.type == \"comment2\") {\n        var value = filter_comment(c.value);\n\n        if (value) {\n          print(\"/*\" + value + \"*/\");\n        }\n\n        last_nlb = false;\n      }\n    });\n\n    if (!last_nlb) {\n      if (start.nlb) {\n        print(\"\\n\");\n        indent();\n      } else {\n        space();\n      }\n    }\n  }\n\n  function append_comments(node, tail) {\n    var self = this;\n    var token = node.end;\n    if (!token) return;\n    var printed_comments = self.printed_comments;\n    var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n    if (!comments || printed_comments.has(comments)) return;\n    if (!(node instanceof AST_Statement || comments.every(c => !/comment[134]/.test(c.type)))) return;\n    printed_comments.add(comments);\n    var insert = OUTPUT.length;\n    comments.filter(comment_filter, node).forEach(function (c, i) {\n      if (printed_comments.has(c)) return;\n      printed_comments.add(c);\n      need_space = false;\n\n      if (need_newline_indented) {\n        print(\"\\n\");\n        indent();\n        need_newline_indented = false;\n      } else if (c.nlb && (i > 0 || !has_nlb())) {\n        print(\"\\n\");\n        indent();\n      } else if (i > 0 || !tail) {\n        space();\n      }\n\n      if (/comment[134]/.test(c.type)) {\n        const value = filter_comment(c.value);\n\n        if (value) {\n          print(\"//\" + value);\n        }\n\n        need_newline_indented = true;\n      } else if (c.type == \"comment2\") {\n        const value = filter_comment(c.value);\n\n        if (value) {\n          print(\"/*\" + value + \"*/\");\n        }\n\n        need_space = true;\n      }\n    });\n    if (OUTPUT.length > insert) newline_insert = insert;\n  }\n\n  var stack = [];\n  return {\n    get: get,\n    toString: get,\n    indent: indent,\n    in_directive: false,\n    use_asm: null,\n    active_scope: null,\n    indentation: function () {\n      return indentation;\n    },\n    current_width: function () {\n      return current_col - indentation;\n    },\n    should_break: function () {\n      return options.width && this.current_width() >= options.width;\n    },\n    has_parens: function () {\n      return has_parens;\n    },\n    newline: newline,\n    print: print,\n    star: star,\n    space: space,\n    comma: comma,\n    colon: colon,\n    last: function () {\n      return last;\n    },\n    semicolon: semicolon,\n    force_semicolon: force_semicolon,\n    to_utf8: to_utf8,\n    print_name: function (name) {\n      print(make_name(name));\n    },\n    print_string: function (str, quote, escape_directive) {\n      var encoded = encode_string(str, quote);\n\n      if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n        // Insert semicolons to break directive prologue\n        if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n          force_semicolon();\n        }\n\n        force_semicolon();\n      }\n\n      print(encoded);\n    },\n    print_template_string_chars: function (str) {\n      var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n      return print(encoded.substr(1, encoded.length - 2));\n    },\n    encode_string: encode_string,\n    next_indent: next_indent,\n    with_indent: with_indent,\n    with_block: with_block,\n    with_parens: with_parens,\n    with_square: with_square,\n    add_mapping: add_mapping,\n    option: function (opt) {\n      return options[opt];\n    },\n    printed_comments: printed_comments,\n    prepend_comments: readonly ? noop : prepend_comments,\n    append_comments: readonly || comment_filter === return_false ? noop : append_comments,\n    line: function () {\n      return current_line;\n    },\n    col: function () {\n      return current_col;\n    },\n    pos: function () {\n      return current_pos;\n    },\n    push_node: function (node) {\n      stack.push(node);\n    },\n    pop_node: function () {\n      return stack.pop();\n    },\n    parent: function (n) {\n      return stack[stack.length - 2 - (n || 0)];\n    }\n  };\n}\n/* -----[ code generators ]----- */\n\n\n(function () {\n  /* -----[ utils ]----- */\n  function DEFPRINT(nodetype, generator) {\n    nodetype.DEFMETHOD(\"_codegen\", generator);\n  }\n\n  AST_Node.DEFMETHOD(\"print\", function (output, force_parens) {\n    var self = this,\n        generator = self._codegen;\n\n    if (self instanceof AST_Scope) {\n      output.active_scope = self;\n    } else if (!output.use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n      output.use_asm = output.active_scope;\n    }\n\n    function doit() {\n      output.prepend_comments(self);\n      self.add_source_map(output);\n      generator(self, output);\n      output.append_comments(self);\n    }\n\n    output.push_node(self);\n\n    if (force_parens || self.needs_parens(output)) {\n      output.with_parens(doit);\n    } else {\n      doit();\n    }\n\n    output.pop_node();\n\n    if (self === output.use_asm) {\n      output.use_asm = null;\n    }\n  });\n  AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n  AST_Node.DEFMETHOD(\"print_to_string\", function (options) {\n    var output = OutputStream(options);\n    this.print(output);\n    return output.get();\n  });\n  /* -----[ PARENTHESES ]----- */\n\n  function PARENS(nodetype, func) {\n    if (Array.isArray(nodetype)) {\n      nodetype.forEach(function (nodetype) {\n        PARENS(nodetype, func);\n      });\n    } else {\n      nodetype.DEFMETHOD(\"needs_parens\", func);\n    }\n  }\n\n  PARENS(AST_Node, return_false); // a function expression needs parens around it when it's provably\n  // the first token to appear in a statement.\n\n  PARENS(AST_Function, function (output) {\n    if (!output.has_parens() && first_in_statement(output)) {\n      return true;\n    }\n\n    if (output.option(\"webkit\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_PropAccess && p.expression === this) {\n        return true;\n      }\n    }\n\n    if (output.option(\"wrap_iife\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_Call && p.expression === this) {\n        return true;\n      }\n    }\n\n    if (output.option(\"wrap_func_args\")) {\n      var p = output.parent();\n\n      if (p instanceof AST_Call && p.args.includes(this)) {\n        return true;\n      }\n    }\n\n    return false;\n  });\n  PARENS(AST_Arrow, function (output) {\n    var p = output.parent();\n\n    if (output.option(\"wrap_func_args\") && p instanceof AST_Call && p.args.includes(this)) {\n      return true;\n    }\n\n    return p instanceof AST_PropAccess && p.expression === this;\n  }); // same goes for an object literal (as in AST_Function), because\n  // otherwise {...} would be interpreted as a block of code.\n\n  PARENS(AST_Object, function (output) {\n    return !output.has_parens() && first_in_statement(output);\n  });\n  PARENS(AST_ClassExpression, first_in_statement);\n  PARENS(AST_Unary, function (output) {\n    var p = output.parent();\n    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || p instanceof AST_Binary && p.operator === \"**\" && this instanceof AST_UnaryPrefix && p.left === this && this.operator !== \"++\" && this.operator !== \"--\";\n  });\n  PARENS(AST_Await, function (output) {\n    var p = output.parent();\n    return p instanceof AST_PropAccess && p.expression === this || p instanceof AST_Call && p.expression === this || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n  });\n  PARENS(AST_Sequence, function (output) {\n    var p = output.parent();\n    return p instanceof AST_Call // (foo, bar)() or foo(1, (2, 3), 4)\n    || p instanceof AST_Unary // !(foo, bar, baz)\n    || p instanceof AST_Binary // 1 + (2, 3) + 4 ==> 8\n    || p instanceof AST_VarDef // var a = (1, 2), b = a + a; ==> b == 4\n    || p instanceof AST_PropAccess // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n    || p instanceof AST_Array // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n    || p instanceof AST_ObjectProperty // { foo: (1, 2) }.foo ==> 2\n    || p instanceof AST_Conditional\n    /* (false, true) ? (a = 10, b = 20) : (c = 30)\n     * ==> 20 (side effect, set a := 10 and b := 20) */\n    || p instanceof AST_Arrow // x => (x, x)\n    || p instanceof AST_DefaultAssign // x => (x = (0, function(){}))\n    || p instanceof AST_Expansion // [...(a, b)]\n    || p instanceof AST_ForOf && this === p.object // for (e of (foo, bar)) {}\n    || p instanceof AST_Yield // yield (foo, bar)\n    || p instanceof AST_Export // export default (foo, bar)\n    ;\n  });\n  PARENS(AST_Binary, function (output) {\n    var p = output.parent(); // (foo && bar)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // typeof (foo && bar)\n\n    if (p instanceof AST_Unary) return true; // (foo && bar)[\"prop\"], (foo && bar).prop\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true; // this deals with precedence: 3 * (2 + 1)\n\n    if (p instanceof AST_Binary) {\n      const po = p.operator;\n      const so = this.operator;\n\n      if (so === \"??\" && (po === \"||\" || po === \"&&\")) {\n        return true;\n      }\n\n      if (po === \"??\" && (so === \"||\" || so === \"&&\")) {\n        return true;\n      }\n\n      const pp = PRECEDENCE[po];\n      const sp = PRECEDENCE[so];\n\n      if (pp > sp || pp == sp && (this === p.right || po == \"**\")) {\n        return true;\n      }\n    }\n  });\n  PARENS(AST_Yield, function (output) {\n    var p = output.parent(); // (yield 1) + (yield 2)\n    // a = yield 3\n\n    if (p instanceof AST_Binary && p.operator !== \"=\") return true; // (yield 1)()\n    // new (yield 1)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // (yield 1) ? yield 2 : yield 3\n\n    if (p instanceof AST_Conditional && p.condition === this) return true; // -(yield 4)\n\n    if (p instanceof AST_Unary) return true; // (yield x).foo\n    // (yield x)['foo']\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true;\n  });\n  PARENS(AST_PropAccess, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_New && p.expression === this) {\n      // i.e. new (foo.bar().baz)\n      //\n      // if there's one call into this subtree, then we need\n      // parens around it too, otherwise the call will be\n      // interpreted as passing the arguments to the upper New\n      // expression.\n      return walk(this, node => {\n        if (node instanceof AST_Scope) return true;\n\n        if (node instanceof AST_Call) {\n          return walk_abort; // makes walk() return true.\n        }\n      });\n    }\n  });\n  PARENS(AST_Call, function (output) {\n    var p = output.parent(),\n        p1;\n    if (p instanceof AST_New && p.expression === this || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function) return true; // workaround for Safari bug.\n    // https://bugs.webkit.org/show_bug.cgi?id=123506\n\n    return this.expression instanceof AST_Function && p instanceof AST_PropAccess && p.expression === this && (p1 = output.parent(1)) instanceof AST_Assign && p1.left === p;\n  });\n  PARENS(AST_New, function (output) {\n    var p = output.parent();\n    if (this.args.length === 0 && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n    || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n      return true;\n  });\n  PARENS(AST_Number, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_PropAccess && p.expression === this) {\n      var value = this.getValue();\n\n      if (value < 0 || /^0/.test(make_num(value))) {\n        return true;\n      }\n    }\n  });\n  PARENS(AST_BigInt, function (output) {\n    var p = output.parent();\n\n    if (p instanceof AST_PropAccess && p.expression === this) {\n      var value = this.getValue();\n\n      if (value.startsWith(\"-\")) {\n        return true;\n      }\n    }\n  });\n  PARENS([AST_Assign, AST_Conditional], function (output) {\n    var p = output.parent(); // !(a = false) → true\n\n    if (p instanceof AST_Unary) return true; // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n\n    if (p instanceof AST_Binary && !(p instanceof AST_Assign)) return true; // (a = func)() —or— new (a = Object)()\n\n    if (p instanceof AST_Call && p.expression === this) return true; // (a = foo) ? bar : baz\n\n    if (p instanceof AST_Conditional && p.condition === this) return true; // (a = foo)[\"prop\"] —or— (a = foo).prop\n\n    if (p instanceof AST_PropAccess && p.expression === this) return true; // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n\n    if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false) return true;\n  });\n  /* -----[ PRINTERS ]----- */\n\n  DEFPRINT(AST_Directive, function (self, output) {\n    output.print_string(self.value, self.quote);\n    output.semicolon();\n  });\n  DEFPRINT(AST_Expansion, function (self, output) {\n    output.print(\"...\");\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_Destructuring, function (self, output) {\n    output.print(self.is_array ? \"[\" : \"{\");\n    var len = self.names.length;\n    self.names.forEach(function (name, i) {\n      if (i > 0) output.comma();\n      name.print(output); // If the final element is a hole, we need to make sure it\n      // doesn't look like a trailing comma, by inserting an actual\n      // trailing comma.\n\n      if (i == len - 1 && name instanceof AST_Hole) output.comma();\n    });\n    output.print(self.is_array ? \"]\" : \"}\");\n  });\n  DEFPRINT(AST_Debugger, function (self, output) {\n    output.print(\"debugger\");\n    output.semicolon();\n  });\n  /* -----[ statements ]----- */\n\n  function display_body(body, is_toplevel, output, allow_directives) {\n    var last = body.length - 1;\n    output.in_directive = allow_directives;\n    body.forEach(function (stmt, i) {\n      if (output.in_directive === true && !(stmt instanceof AST_Directive || stmt instanceof AST_EmptyStatement || stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)) {\n        output.in_directive = false;\n      }\n\n      if (!(stmt instanceof AST_EmptyStatement)) {\n        output.indent();\n        stmt.print(output);\n\n        if (!(i == last && is_toplevel)) {\n          output.newline();\n          if (is_toplevel) output.newline();\n        }\n      }\n\n      if (output.in_directive === true && stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String) {\n        output.in_directive = false;\n      }\n    });\n    output.in_directive = false;\n  }\n\n  AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function (output) {\n    force_statement(this.body, output);\n  });\n  DEFPRINT(AST_Statement, function (self, output) {\n    self.body.print(output);\n    output.semicolon();\n  });\n  DEFPRINT(AST_Toplevel, function (self, output) {\n    display_body(self.body, true, output, true);\n    output.print(\"\");\n  });\n  DEFPRINT(AST_LabeledStatement, function (self, output) {\n    self.label.print(output);\n    output.colon();\n    self.body.print(output);\n  });\n  DEFPRINT(AST_SimpleStatement, function (self, output) {\n    self.body.print(output);\n    output.semicolon();\n  });\n\n  function print_braced_empty(self, output) {\n    output.print(\"{\");\n    output.with_indent(output.next_indent(), function () {\n      output.append_comments(self, true);\n    });\n    output.print(\"}\");\n  }\n\n  function print_braced(self, output, allow_directives) {\n    if (self.body.length > 0) {\n      output.with_block(function () {\n        display_body(self.body, false, output, allow_directives);\n      });\n    } else print_braced_empty(self, output);\n  }\n\n  DEFPRINT(AST_BlockStatement, function (self, output) {\n    print_braced(self, output);\n  });\n  DEFPRINT(AST_EmptyStatement, function (self, output) {\n    output.semicolon();\n  });\n  DEFPRINT(AST_Do, function (self, output) {\n    output.print(\"do\");\n    output.space();\n    make_block(self.body, output);\n    output.space();\n    output.print(\"while\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.semicolon();\n  });\n  DEFPRINT(AST_While, function (self, output) {\n    output.print(\"while\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_For, function (self, output) {\n    output.print(\"for\");\n    output.space();\n    output.with_parens(function () {\n      if (self.init) {\n        if (self.init instanceof AST_Definitions) {\n          self.init.print(output);\n        } else {\n          parenthesize_for_noin(self.init, output, true);\n        }\n\n        output.print(\";\");\n        output.space();\n      } else {\n        output.print(\";\");\n      }\n\n      if (self.condition) {\n        self.condition.print(output);\n        output.print(\";\");\n        output.space();\n      } else {\n        output.print(\";\");\n      }\n\n      if (self.step) {\n        self.step.print(output);\n      }\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_ForIn, function (self, output) {\n    output.print(\"for\");\n\n    if (self.await) {\n      output.space();\n      output.print(\"await\");\n    }\n\n    output.space();\n    output.with_parens(function () {\n      self.init.print(output);\n      output.space();\n      output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n      output.space();\n      self.object.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_With, function (self, output) {\n    output.print(\"with\");\n    output.space();\n    output.with_parens(function () {\n      self.expression.print(output);\n    });\n    output.space();\n\n    self._do_print_body(output);\n  });\n  /* -----[ functions ]----- */\n\n  AST_Lambda.DEFMETHOD(\"_do_print\", function (output, nokeyword) {\n    var self = this;\n\n    if (!nokeyword) {\n      if (self.async) {\n        output.print(\"async\");\n        output.space();\n      }\n\n      output.print(\"function\");\n\n      if (self.is_generator) {\n        output.star();\n      }\n\n      if (self.name) {\n        output.space();\n      }\n    }\n\n    if (self.name instanceof AST_Symbol) {\n      self.name.print(output);\n    } else if (nokeyword && self.name instanceof AST_Node) {\n      output.with_square(function () {\n        self.name.print(output); // Computed method name\n      });\n    }\n\n    output.with_parens(function () {\n      self.argnames.forEach(function (arg, i) {\n        if (i) output.comma();\n        arg.print(output);\n      });\n    });\n    output.space();\n    print_braced(self, output, true);\n  });\n  DEFPRINT(AST_Lambda, function (self, output) {\n    self._do_print(output);\n  });\n  DEFPRINT(AST_PrefixedTemplateString, function (self, output) {\n    var tag = self.prefix;\n    var parenthesize_tag = tag instanceof AST_Lambda || tag instanceof AST_Binary || tag instanceof AST_Conditional || tag instanceof AST_Sequence || tag instanceof AST_Unary || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n    if (parenthesize_tag) output.print(\"(\");\n    self.prefix.print(output);\n    if (parenthesize_tag) output.print(\")\");\n    self.template_string.print(output);\n  });\n  DEFPRINT(AST_TemplateString, function (self, output) {\n    var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n    output.print(\"`\");\n\n    for (var i = 0; i < self.segments.length; i++) {\n      if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n        output.print(\"${\");\n        self.segments[i].print(output);\n        output.print(\"}\");\n      } else if (is_tagged) {\n        output.print(self.segments[i].raw);\n      } else {\n        output.print_template_string_chars(self.segments[i].value);\n      }\n    }\n\n    output.print(\"`\");\n  });\n  DEFPRINT(AST_TemplateSegment, function (self, output) {\n    output.print_template_string_chars(self.value);\n  });\n  AST_Arrow.DEFMETHOD(\"_do_print\", function (output) {\n    var self = this;\n    var parent = output.parent();\n    var needs_parens = parent instanceof AST_Binary && !(parent instanceof AST_Assign) || parent instanceof AST_Unary || parent instanceof AST_Call && self === parent.expression;\n\n    if (needs_parens) {\n      output.print(\"(\");\n    }\n\n    if (self.async) {\n      output.print(\"async\");\n      output.space();\n    }\n\n    if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n      self.argnames[0].print(output);\n    } else {\n      output.with_parens(function () {\n        self.argnames.forEach(function (arg, i) {\n          if (i) output.comma();\n          arg.print(output);\n        });\n      });\n    }\n\n    output.space();\n    output.print(\"=>\");\n    output.space();\n    const first_statement = self.body[0];\n\n    if (self.body.length === 1 && first_statement instanceof AST_Return) {\n      const returned = first_statement.value;\n\n      if (!returned) {\n        output.print(\"{}\");\n      } else if (left_is_object(returned)) {\n        output.print(\"(\");\n        returned.print(output);\n        output.print(\")\");\n      } else {\n        returned.print(output);\n      }\n    } else {\n      print_braced(self, output);\n    }\n\n    if (needs_parens) {\n      output.print(\")\");\n    }\n  });\n  /* -----[ exits ]----- */\n\n  AST_Exit.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n\n    if (this.value) {\n      output.space();\n      const comments = this.value.start.comments_before;\n\n      if (comments && comments.length && !output.printed_comments.has(comments)) {\n        output.print(\"(\");\n        this.value.print(output);\n        output.print(\")\");\n      } else {\n        this.value.print(output);\n      }\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_Return, function (self, output) {\n    self._do_print(output, \"return\");\n  });\n  DEFPRINT(AST_Throw, function (self, output) {\n    self._do_print(output, \"throw\");\n  });\n  /* -----[ yield ]----- */\n\n  DEFPRINT(AST_Yield, function (self, output) {\n    var star = self.is_star ? \"*\" : \"\";\n    output.print(\"yield\" + star);\n\n    if (self.expression) {\n      output.space();\n      self.expression.print(output);\n    }\n  });\n  DEFPRINT(AST_Await, function (self, output) {\n    output.print(\"await\");\n    output.space();\n    var e = self.expression;\n    var parens = !(e instanceof AST_Call || e instanceof AST_SymbolRef || e instanceof AST_PropAccess || e instanceof AST_Unary || e instanceof AST_Constant || e instanceof AST_Await || e instanceof AST_Object);\n    if (parens) output.print(\"(\");\n    self.expression.print(output);\n    if (parens) output.print(\")\");\n  });\n  /* -----[ loop control ]----- */\n\n  AST_LoopControl.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n\n    if (this.label) {\n      output.space();\n      this.label.print(output);\n    }\n\n    output.semicolon();\n  });\n  DEFPRINT(AST_Break, function (self, output) {\n    self._do_print(output, \"break\");\n  });\n  DEFPRINT(AST_Continue, function (self, output) {\n    self._do_print(output, \"continue\");\n  });\n  /* -----[ if ]----- */\n\n  function make_then(self, output) {\n    var b = self.body;\n    if (output.option(\"braces\") || output.option(\"ie8\") && b instanceof AST_Do) return make_block(b, output); // The squeezer replaces \"block\"-s that contain only a single\n    // statement with the statement itself; technically, the AST\n    // is correct, but this can create problems when we output an\n    // IF having an ELSE clause where the THEN clause ends in an\n    // IF *without* an ELSE block (then the outer ELSE would refer\n    // to the inner IF).  This function checks for this case and\n    // adds the block braces if needed.\n\n    if (!b) return output.force_semicolon();\n\n    while (true) {\n      if (b instanceof AST_If) {\n        if (!b.alternative) {\n          make_block(self.body, output);\n          return;\n        }\n\n        b = b.alternative;\n      } else if (b instanceof AST_StatementWithBody) {\n        b = b.body;\n      } else break;\n    }\n\n    force_statement(self.body, output);\n  }\n\n  DEFPRINT(AST_If, function (self, output) {\n    output.print(\"if\");\n    output.space();\n    output.with_parens(function () {\n      self.condition.print(output);\n    });\n    output.space();\n\n    if (self.alternative) {\n      make_then(self, output);\n      output.space();\n      output.print(\"else\");\n      output.space();\n      if (self.alternative instanceof AST_If) self.alternative.print(output);else force_statement(self.alternative, output);\n    } else {\n      self._do_print_body(output);\n    }\n  });\n  /* -----[ switch ]----- */\n\n  DEFPRINT(AST_Switch, function (self, output) {\n    output.print(\"switch\");\n    output.space();\n    output.with_parens(function () {\n      self.expression.print(output);\n    });\n    output.space();\n    var last = self.body.length - 1;\n    if (last < 0) print_braced_empty(self, output);else output.with_block(function () {\n      self.body.forEach(function (branch, i) {\n        output.indent(true);\n        branch.print(output);\n        if (i < last && branch.body.length > 0) output.newline();\n      });\n    });\n  });\n  AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function (output) {\n    output.newline();\n    this.body.forEach(function (stmt) {\n      output.indent();\n      stmt.print(output);\n      output.newline();\n    });\n  });\n  DEFPRINT(AST_Default, function (self, output) {\n    output.print(\"default:\");\n\n    self._do_print_body(output);\n  });\n  DEFPRINT(AST_Case, function (self, output) {\n    output.print(\"case\");\n    output.space();\n    self.expression.print(output);\n    output.print(\":\");\n\n    self._do_print_body(output);\n  });\n  /* -----[ exceptions ]----- */\n\n  DEFPRINT(AST_Try, function (self, output) {\n    output.print(\"try\");\n    output.space();\n    print_braced(self, output);\n\n    if (self.bcatch) {\n      output.space();\n      self.bcatch.print(output);\n    }\n\n    if (self.bfinally) {\n      output.space();\n      self.bfinally.print(output);\n    }\n  });\n  DEFPRINT(AST_Catch, function (self, output) {\n    output.print(\"catch\");\n\n    if (self.argname) {\n      output.space();\n      output.with_parens(function () {\n        self.argname.print(output);\n      });\n    }\n\n    output.space();\n    print_braced(self, output);\n  });\n  DEFPRINT(AST_Finally, function (self, output) {\n    output.print(\"finally\");\n    output.space();\n    print_braced(self, output);\n  });\n  /* -----[ var/const ]----- */\n\n  AST_Definitions.DEFMETHOD(\"_do_print\", function (output, kind) {\n    output.print(kind);\n    output.space();\n    this.definitions.forEach(function (def, i) {\n      if (i) output.comma();\n      def.print(output);\n    });\n    var p = output.parent();\n    var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n    var output_semicolon = !in_for || p && p.init !== this;\n    if (output_semicolon) output.semicolon();\n  });\n  DEFPRINT(AST_Let, function (self, output) {\n    self._do_print(output, \"let\");\n  });\n  DEFPRINT(AST_Var, function (self, output) {\n    self._do_print(output, \"var\");\n  });\n  DEFPRINT(AST_Const, function (self, output) {\n    self._do_print(output, \"const\");\n  });\n  DEFPRINT(AST_Import, function (self, output) {\n    output.print(\"import\");\n    output.space();\n\n    if (self.imported_name) {\n      self.imported_name.print(output);\n    }\n\n    if (self.imported_name && self.imported_names) {\n      output.print(\",\");\n      output.space();\n    }\n\n    if (self.imported_names) {\n      if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n        self.imported_names[0].print(output);\n      } else {\n        output.print(\"{\");\n        self.imported_names.forEach(function (name_import, i) {\n          output.space();\n          name_import.print(output);\n\n          if (i < self.imported_names.length - 1) {\n            output.print(\",\");\n          }\n        });\n        output.space();\n        output.print(\"}\");\n      }\n    }\n\n    if (self.imported_name || self.imported_names) {\n      output.space();\n      output.print(\"from\");\n      output.space();\n    }\n\n    self.module_name.print(output);\n    output.semicolon();\n  });\n  DEFPRINT(AST_ImportMeta, function (self, output) {\n    output.print(\"import.meta\");\n  });\n  DEFPRINT(AST_NameMapping, function (self, output) {\n    var is_import = output.parent() instanceof AST_Import;\n    var definition = self.name.definition();\n    var names_are_different = (definition && definition.mangled_name || self.name.name) !== self.foreign_name.name;\n\n    if (names_are_different) {\n      if (is_import) {\n        output.print(self.foreign_name.name);\n      } else {\n        self.name.print(output);\n      }\n\n      output.space();\n      output.print(\"as\");\n      output.space();\n\n      if (is_import) {\n        self.name.print(output);\n      } else {\n        output.print(self.foreign_name.name);\n      }\n    } else {\n      self.name.print(output);\n    }\n  });\n  DEFPRINT(AST_Export, function (self, output) {\n    output.print(\"export\");\n    output.space();\n\n    if (self.is_default) {\n      output.print(\"default\");\n      output.space();\n    }\n\n    if (self.exported_names) {\n      if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n        self.exported_names[0].print(output);\n      } else {\n        output.print(\"{\");\n        self.exported_names.forEach(function (name_export, i) {\n          output.space();\n          name_export.print(output);\n\n          if (i < self.exported_names.length - 1) {\n            output.print(\",\");\n          }\n        });\n        output.space();\n        output.print(\"}\");\n      }\n    } else if (self.exported_value) {\n      self.exported_value.print(output);\n    } else if (self.exported_definition) {\n      self.exported_definition.print(output);\n      if (self.exported_definition instanceof AST_Definitions) return;\n    }\n\n    if (self.module_name) {\n      output.space();\n      output.print(\"from\");\n      output.space();\n      self.module_name.print(output);\n    }\n\n    if (self.exported_value && !(self.exported_value instanceof AST_Defun || self.exported_value instanceof AST_Function || self.exported_value instanceof AST_Class) || self.module_name || self.exported_names) {\n      output.semicolon();\n    }\n  });\n\n  function parenthesize_for_noin(node, output, noin) {\n    var parens = false; // need to take some precautions here:\n    //    https://github.com/mishoo/UglifyJS2/issues/60\n\n    if (noin) {\n      parens = walk(node, node => {\n        if (node instanceof AST_Scope) return true;\n\n        if (node instanceof AST_Binary && node.operator == \"in\") {\n          return walk_abort; // makes walk() return true\n        }\n      });\n    }\n\n    node.print(output, parens);\n  }\n\n  DEFPRINT(AST_VarDef, function (self, output) {\n    self.name.print(output);\n\n    if (self.value) {\n      output.space();\n      output.print(\"=\");\n      output.space();\n      var p = output.parent(1);\n      var noin = p instanceof AST_For || p instanceof AST_ForIn;\n      parenthesize_for_noin(self.value, output, noin);\n    }\n  });\n  /* -----[ other expressions ]----- */\n\n  DEFPRINT(AST_Call, function (self, output) {\n    self.expression.print(output);\n    if (self instanceof AST_New && self.args.length === 0) return;\n\n    if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n      output.add_mapping(self.start);\n    }\n\n    if (self.optional) output.print(\"?.\");\n    output.with_parens(function () {\n      self.args.forEach(function (expr, i) {\n        if (i) output.comma();\n        expr.print(output);\n      });\n    });\n  });\n  DEFPRINT(AST_New, function (self, output) {\n    output.print(\"new\");\n    output.space();\n\n    AST_Call.prototype._codegen(self, output);\n  });\n  AST_Sequence.DEFMETHOD(\"_do_print\", function (output) {\n    this.expressions.forEach(function (node, index) {\n      if (index > 0) {\n        output.comma();\n\n        if (output.should_break()) {\n          output.newline();\n          output.indent();\n        }\n      }\n\n      node.print(output);\n    });\n  });\n  DEFPRINT(AST_Sequence, function (self, output) {\n    self._do_print(output); // var p = output.parent();\n    // if (p instanceof AST_Statement) {\n    //     output.with_indent(output.next_indent(), function(){\n    //         self._do_print(output);\n    //     });\n    // } else {\n    //     self._do_print(output);\n    // }\n\n  });\n  DEFPRINT(AST_Dot, function (self, output) {\n    var expr = self.expression;\n    expr.print(output);\n    var prop = self.property;\n    var print_computed = RESERVED_WORDS.has(prop) ? output.option(\"ie8\") : !is_identifier_string(prop, output.option(\"ecma\") >= 2015 || output.option(\"safari10\"));\n    if (self.optional) output.print(\"?.\");\n\n    if (print_computed) {\n      output.print(\"[\");\n      output.add_mapping(self.end);\n      output.print_string(prop);\n      output.print(\"]\");\n    } else {\n      if (expr instanceof AST_Number && expr.getValue() >= 0) {\n        if (!/[xa-f.)]/i.test(output.last())) {\n          output.print(\".\");\n        }\n      }\n\n      if (!self.optional) output.print(\".\"); // the name after dot would be mapped about here.\n\n      output.add_mapping(self.end);\n      output.print_name(prop);\n    }\n  });\n  DEFPRINT(AST_Sub, function (self, output) {\n    self.expression.print(output);\n    if (self.optional) output.print(\"?.\");\n    output.print(\"[\");\n    self.property.print(output);\n    output.print(\"]\");\n  });\n  DEFPRINT(AST_Chain, function (self, output) {\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_UnaryPrefix, function (self, output) {\n    var op = self.operator;\n    output.print(op);\n\n    if (/^[a-z]/i.test(op) || /[+-]$/.test(op) && self.expression instanceof AST_UnaryPrefix && /^[+-]/.test(self.expression.operator)) {\n      output.space();\n    }\n\n    self.expression.print(output);\n  });\n  DEFPRINT(AST_UnaryPostfix, function (self, output) {\n    self.expression.print(output);\n    output.print(self.operator);\n  });\n  DEFPRINT(AST_Binary, function (self, output) {\n    var op = self.operator;\n    self.left.print(output);\n\n    if (op[0] == \">\"\n    /* \">>\" \">>>\" \">\" \">=\" */\n    && self.left instanceof AST_UnaryPostfix && self.left.operator == \"--\") {\n      // space is mandatory to avoid outputting -->\n      output.print(\" \");\n    } else {\n      // the space is optional depending on \"beautify\"\n      output.space();\n    }\n\n    output.print(op);\n\n    if ((op == \"<\" || op == \"<<\") && self.right instanceof AST_UnaryPrefix && self.right.operator == \"!\" && self.right.expression instanceof AST_UnaryPrefix && self.right.expression.operator == \"--\") {\n      // space is mandatory to avoid outputting <!--\n      output.print(\" \");\n    } else {\n      // the space is optional depending on \"beautify\"\n      output.space();\n    }\n\n    self.right.print(output);\n  });\n  DEFPRINT(AST_Conditional, function (self, output) {\n    self.condition.print(output);\n    output.space();\n    output.print(\"?\");\n    output.space();\n    self.consequent.print(output);\n    output.space();\n    output.colon();\n    self.alternative.print(output);\n  });\n  /* -----[ literals ]----- */\n\n  DEFPRINT(AST_Array, function (self, output) {\n    output.with_square(function () {\n      var a = self.elements,\n          len = a.length;\n      if (len > 0) output.space();\n      a.forEach(function (exp, i) {\n        if (i) output.comma();\n        exp.print(output); // If the final element is a hole, we need to make sure it\n        // doesn't look like a trailing comma, by inserting an actual\n        // trailing comma.\n\n        if (i === len - 1 && exp instanceof AST_Hole) output.comma();\n      });\n      if (len > 0) output.space();\n    });\n  });\n  DEFPRINT(AST_Object, function (self, output) {\n    if (self.properties.length > 0) output.with_block(function () {\n      self.properties.forEach(function (prop, i) {\n        if (i) {\n          output.print(\",\");\n          output.newline();\n        }\n\n        output.indent();\n        prop.print(output);\n      });\n      output.newline();\n    });else print_braced_empty(self, output);\n  });\n  DEFPRINT(AST_Class, function (self, output) {\n    output.print(\"class\");\n    output.space();\n\n    if (self.name) {\n      self.name.print(output);\n      output.space();\n    }\n\n    if (self.extends) {\n      var parens = !(self.extends instanceof AST_SymbolRef) && !(self.extends instanceof AST_PropAccess) && !(self.extends instanceof AST_ClassExpression) && !(self.extends instanceof AST_Function);\n      output.print(\"extends\");\n\n      if (parens) {\n        output.print(\"(\");\n      } else {\n        output.space();\n      }\n\n      self.extends.print(output);\n\n      if (parens) {\n        output.print(\")\");\n      } else {\n        output.space();\n      }\n    }\n\n    if (self.properties.length > 0) output.with_block(function () {\n      self.properties.forEach(function (prop, i) {\n        if (i) {\n          output.newline();\n        }\n\n        output.indent();\n        prop.print(output);\n      });\n      output.newline();\n    });else output.print(\"{}\");\n  });\n  DEFPRINT(AST_NewTarget, function (self, output) {\n    output.print(\"new.target\");\n  });\n\n  function print_property_name(key, quote, output) {\n    if (output.option(\"quote_keys\")) {\n      return output.print_string(key);\n    }\n\n    if (\"\" + +key == key && key >= 0) {\n      if (output.option(\"keep_numbers\")) {\n        return output.print(key);\n      }\n\n      return output.print(make_num(key));\n    }\n\n    var print_string = RESERVED_WORDS.has(key) ? output.option(\"ie8\") : output.option(\"ecma\") < 2015 || output.option(\"safari10\") ? !is_basic_identifier_string(key) : !is_identifier_string(key, true);\n\n    if (print_string || quote && output.option(\"keep_quoted_props\")) {\n      return output.print_string(key, quote);\n    }\n\n    return output.print_name(key);\n  }\n\n  DEFPRINT(AST_ObjectKeyVal, function (self, output) {\n    function get_name(self) {\n      var def = self.definition();\n      return def ? def.mangled_name || def.name : self.name;\n    }\n\n    var allowShortHand = output.option(\"shorthand\");\n\n    if (allowShortHand && self.value instanceof AST_Symbol && is_identifier_string(self.key, output.option(\"ecma\") >= 2015 || output.option(\"safari10\")) && get_name(self.value) === self.key && !RESERVED_WORDS.has(self.key)) {\n      print_property_name(self.key, self.quote, output);\n    } else if (allowShortHand && self.value instanceof AST_DefaultAssign && self.value.left instanceof AST_Symbol && is_identifier_string(self.key, output.option(\"ecma\") >= 2015 || output.option(\"safari10\")) && get_name(self.value.left) === self.key) {\n      print_property_name(self.key, self.quote, output);\n      output.space();\n      output.print(\"=\");\n      output.space();\n      self.value.right.print(output);\n    } else {\n      if (!(self.key instanceof AST_Node)) {\n        print_property_name(self.key, self.quote, output);\n      } else {\n        output.with_square(function () {\n          self.key.print(output);\n        });\n      }\n\n      output.colon();\n      self.value.print(output);\n    }\n  });\n  DEFPRINT(AST_ClassProperty, (self, output) => {\n    if (self.static) {\n      output.print(\"static\");\n      output.space();\n    }\n\n    if (self.key instanceof AST_SymbolClassProperty) {\n      print_property_name(self.key.name, self.quote, output);\n    } else {\n      output.print(\"[\");\n      self.key.print(output);\n      output.print(\"]\");\n    }\n\n    if (self.value) {\n      output.print(\"=\");\n      self.value.print(output);\n    }\n\n    output.semicolon();\n  });\n  AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function (type, output) {\n    var self = this;\n\n    if (self.static) {\n      output.print(\"static\");\n      output.space();\n    }\n\n    if (type) {\n      output.print(type);\n      output.space();\n    }\n\n    if (self.key instanceof AST_SymbolMethod) {\n      print_property_name(self.key.name, self.quote, output);\n    } else {\n      output.with_square(function () {\n        self.key.print(output);\n      });\n    }\n\n    self.value._do_print(output, true);\n  });\n  DEFPRINT(AST_ObjectSetter, function (self, output) {\n    self._print_getter_setter(\"set\", output);\n  });\n  DEFPRINT(AST_ObjectGetter, function (self, output) {\n    self._print_getter_setter(\"get\", output);\n  });\n  DEFPRINT(AST_ConciseMethod, function (self, output) {\n    var type;\n\n    if (self.is_generator && self.async) {\n      type = \"async*\";\n    } else if (self.is_generator) {\n      type = \"*\";\n    } else if (self.async) {\n      type = \"async\";\n    }\n\n    self._print_getter_setter(type, output);\n  });\n  AST_Symbol.DEFMETHOD(\"_do_print\", function (output) {\n    var def = this.definition();\n    output.print_name(def ? def.mangled_name || def.name : this.name);\n  });\n  DEFPRINT(AST_Symbol, function (self, output) {\n    self._do_print(output);\n  });\n  DEFPRINT(AST_Hole, noop);\n  DEFPRINT(AST_This, function (self, output) {\n    output.print(\"this\");\n  });\n  DEFPRINT(AST_Super, function (self, output) {\n    output.print(\"super\");\n  });\n  DEFPRINT(AST_Constant, function (self, output) {\n    output.print(self.getValue());\n  });\n  DEFPRINT(AST_String, function (self, output) {\n    output.print_string(self.getValue(), self.quote, output.in_directive);\n  });\n  DEFPRINT(AST_Number, function (self, output) {\n    if ((output.option(\"keep_numbers\") || output.use_asm) && self.raw) {\n      output.print(self.raw);\n    } else {\n      output.print(make_num(self.getValue()));\n    }\n  });\n  DEFPRINT(AST_BigInt, function (self, output) {\n    output.print(self.getValue() + \"n\");\n  });\n  const r_slash_script = /(<\\s*\\/\\s*script)/i;\n\n  const slash_script_replace = (_, $1) => $1.replace(\"/\", \"\\\\/\");\n\n  DEFPRINT(AST_RegExp, function (self, output) {\n    let {\n      source,\n      flags\n    } = self.getValue();\n    source = regexp_source_fix(source);\n    flags = flags ? sort_regexp_flags(flags) : \"\";\n    source = source.replace(r_slash_script, slash_script_replace);\n    output.print(output.to_utf8(`/${source}/${flags}`));\n    const parent = output.parent();\n\n    if (parent instanceof AST_Binary && /^\\w/.test(parent.operator) && parent.left === self) {\n      output.print(\" \");\n    }\n  });\n\n  function force_statement(stat, output) {\n    if (output.option(\"braces\")) {\n      make_block(stat, output);\n    } else {\n      if (!stat || stat instanceof AST_EmptyStatement) output.force_semicolon();else stat.print(output);\n    }\n  }\n\n  function best_of(a) {\n    var best = a[0],\n        len = best.length;\n\n    for (var i = 1; i < a.length; ++i) {\n      if (a[i].length < len) {\n        best = a[i];\n        len = best.length;\n      }\n    }\n\n    return best;\n  }\n\n  function make_num(num) {\n    var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n    var candidates = [str];\n\n    if (Math.floor(num) === num) {\n      if (num < 0) {\n        candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n      } else {\n        candidates.push(\"0x\" + num.toString(16).toLowerCase());\n      }\n    }\n\n    var match, len, digits;\n\n    if (match = /^\\.0+/.exec(str)) {\n      len = match[0].length;\n      digits = str.slice(len);\n      candidates.push(digits + \"e-\" + (digits.length + len - 1));\n    } else if (match = /0+$/.exec(str)) {\n      len = match[0].length;\n      candidates.push(str.slice(0, -len) + \"e\" + len);\n    } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n      candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n    }\n\n    return best_of(candidates);\n  }\n\n  function make_block(stmt, output) {\n    if (!stmt || stmt instanceof AST_EmptyStatement) output.print(\"{}\");else if (stmt instanceof AST_BlockStatement) stmt.print(output);else output.with_block(function () {\n      output.indent();\n      stmt.print(output);\n      output.newline();\n    });\n  }\n  /* -----[ source map generators ]----- */\n\n\n  function DEFMAP(nodetype, generator) {\n    nodetype.forEach(function (nodetype) {\n      nodetype.DEFMETHOD(\"add_source_map\", generator);\n    });\n  }\n\n  DEFMAP([// We could easily add info for ALL nodes, but it seems to me that\n  // would be quite wasteful, hence this noop in the base class.\n  AST_Node, // since the label symbol will mark it\n  AST_LabeledStatement, AST_Toplevel], noop); // XXX: I'm not exactly sure if we need it for all of these nodes,\n  // or if we should add even more.\n\n  DEFMAP([AST_Array, AST_BlockStatement, AST_Catch, AST_Class, AST_Constant, AST_Debugger, AST_Definitions, AST_Directive, AST_Finally, AST_Jump, AST_Lambda, AST_New, AST_Object, AST_StatementWithBody, AST_Symbol, AST_Switch, AST_SwitchBranch, AST_TemplateString, AST_TemplateSegment, AST_Try], function (output) {\n    output.add_mapping(this.start);\n  });\n  DEFMAP([AST_ObjectGetter, AST_ObjectSetter], function (output) {\n    output.add_mapping(this.start, this.key.name);\n  });\n  DEFMAP([AST_ObjectProperty], function (output) {\n    output.add_mapping(this.start, this.key);\n  });\n})();\n\nexport { OutputStream };","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/node_modules/terser/lib/output.js"],"names":["defaults","makePredicate","noop","regexp_source_fix","sort_regexp_flags","return_false","return_true","first_in_statement","left_is_object","AST_Array","AST_Arrow","AST_Assign","AST_Await","AST_BigInt","AST_Binary","AST_BlockStatement","AST_Break","AST_Call","AST_Case","AST_Catch","AST_Chain","AST_Class","AST_ClassExpression","AST_ClassProperty","AST_ConciseMethod","AST_Conditional","AST_Const","AST_Constant","AST_Continue","AST_Debugger","AST_Default","AST_DefaultAssign","AST_Definitions","AST_Defun","AST_Destructuring","AST_Directive","AST_Do","AST_Dot","AST_EmptyStatement","AST_Exit","AST_Expansion","AST_Export","AST_Finally","AST_For","AST_ForIn","AST_ForOf","AST_Function","AST_Hole","AST_If","AST_Import","AST_ImportMeta","AST_Jump","AST_LabeledStatement","AST_Lambda","AST_Let","AST_LoopControl","AST_NameMapping","AST_New","AST_NewTarget","AST_Node","AST_Number","AST_Object","AST_ObjectGetter","AST_ObjectKeyVal","AST_ObjectProperty","AST_ObjectSetter","AST_PrefixedTemplateString","AST_PropAccess","AST_RegExp","AST_Return","AST_Scope","AST_Sequence","AST_SimpleStatement","AST_Statement","AST_StatementWithBody","AST_String","AST_Sub","AST_Super","AST_Switch","AST_SwitchBranch","AST_Symbol","AST_SymbolClassProperty","AST_SymbolMethod","AST_SymbolRef","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Throw","AST_Toplevel","AST_Try","AST_Unary","AST_UnaryPostfix","AST_UnaryPrefix","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","TreeWalker","walk","walk_abort","get_full_char_code","get_full_char","is_identifier_char","is_basic_identifier_string","is_identifier_string","PRECEDENCE","RESERVED_WORDS","EXPECT_DIRECTIVE","CODE_LINE_BREAK","CODE_SPACE","r_annotation","is_some_comments","comment","type","test","value","OutputStream","options","readonly","ascii_only","beautify","braces","comments","ecma","ie8","indent_level","indent_start","inline_script","keep_numbers","keep_quoted_props","max_line_len","preamble","preserve_annotations","quote_keys","quote_style","safari10","semicolons","shebang","shorthand","undefined","source_map","webkit","width","wrap_iife","wrap_func_args","comment_filter","regex_pos","lastIndexOf","RegExp","substr","indentation","current_col","current_line","current_pos","OUTPUT","printed_comments","Set","to_utf8","str","identifier","replace","ch","code","toString","charCodeAt","length","match","lone","make_string","quote","dq","sq","s","i","quote_single","quote_double","quote_template","encode_string","ret","make_name","name","make_indent","back","repeat","has_parens","might_need_space","might_need_semicolon","might_add_newline","need_newline_indented","need_space","newline_insert","last","mapping_token","mapping_name","mappings","do_add_mapping","forEach","mapping","add","token","file","line","col","ex","ensure_line_len","left","slice","right","delta","requireSemicolonChars","print","String","indent","space","prev","charAt","includes","has","push","a","split","n","star","half","with_indent","cont","next_indent","save_indentation","newline","semicolon","force_semicolon","with_block","with_parens","with_square","comma","colon","add_mapping","get","has_nlb","filter_comment","prepend_comments","node","self","start","return_with_value","comments_before","tw","parent","TYPE","expression","condition","expressions","text","concat","shift","filter","c","last_nlb","nlb","append_comments","tail","end","every","insert","stack","in_directive","use_asm","active_scope","current_width","should_break","print_name","print_string","escape_directive","encoded","print_template_string_chars","option","opt","pos","push_node","pop_node","pop","DEFPRINT","nodetype","generator","DEFMETHOD","output","force_parens","_codegen","doit","add_source_map","needs_parens","prototype","PARENS","func","Array","isArray","p","args","operator","object","po","so","pp","sp","p1","is_default","getValue","make_num","startsWith","is_array","len","names","display_body","body","is_toplevel","allow_directives","stmt","force_statement","label","print_braced_empty","print_braced","make_block","_do_print_body","init","parenthesize_for_noin","step","await","nokeyword","async","is_generator","argnames","arg","_do_print","tag","prefix","parenthesize_tag","template_string","is_tagged","segments","raw","first_statement","returned","kind","is_star","e","parens","make_then","b","alternative","branch","bcatch","bfinally","argname","definitions","def","in_for","output_semicolon","imported_name","imported_names","foreign_name","name_import","module_name","is_import","definition","names_are_different","mangled_name","exported_names","name_export","exported_value","exported_definition","noin","optional","expr","index","prop","property","print_computed","op","consequent","elements","exp","properties","extends","print_property_name","key","get_name","allowShortHand","static","_print_getter_setter","r_slash_script","slash_script_replace","_","$1","source","flags","stat","best_of","best","num","candidates","Math","floor","toLowerCase","digits","exec","DEFMAP"],"mappings":"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","sourcesContent":["/***********************************************************************\n\n  A JavaScript tokenizer / parser / beautifier / compressor.\n  https://github.com/mishoo/UglifyJS2\n\n  -------------------------------- (C) ---------------------------------\n\n                           Author: Mihai Bazon\n                         <mihai.bazon@gmail.com>\n                       http://mihai.bazon.net/blog\n\n  Distributed under the BSD license:\n\n    Copyright 2012 (c) Mihai Bazon <mihai.bazon@gmail.com>\n\n    Redistribution and use in source and binary forms, with or without\n    modification, are permitted provided that the following conditions\n    are met:\n\n        * Redistributions of source code must retain the above\n          copyright notice, this list of conditions and the following\n          disclaimer.\n\n        * Redistributions in binary form must reproduce the above\n          copyright notice, this list of conditions and the following\n          disclaimer in the documentation and/or other materials\n          provided with the distribution.\n\n    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER “AS IS” AND ANY\n    EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n    PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER BE\n    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,\n    OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n    PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n    PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n    THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR\n    TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF\n    THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF\n    SUCH DAMAGE.\n\n ***********************************************************************/\n\n\"use strict\";\n\nimport {\n    defaults,\n    makePredicate,\n    noop,\n    regexp_source_fix,\n    sort_regexp_flags,\n    return_false,\n    return_true,\n} from \"./utils/index.js\";\nimport { first_in_statement, left_is_object } from \"./utils/first_in_statement.js\";\nimport {\n    AST_Array,\n    AST_Arrow,\n    AST_Assign,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_BlockStatement,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Catch,\n    AST_Chain,\n    AST_Class,\n    AST_ClassExpression,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Constant,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_DefaultAssign,\n    AST_Definitions,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Exit,\n    AST_Expansion,\n    AST_Export,\n    AST_Finally,\n    AST_For,\n    AST_ForIn,\n    AST_ForOf,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Jump,\n    AST_LabeledStatement,\n    AST_Lambda,\n    AST_Let,\n    AST_LoopControl,\n    AST_NameMapping,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Number,\n    AST_Object,\n    AST_ObjectGetter,\n    AST_ObjectKeyVal,\n    AST_ObjectProperty,\n    AST_ObjectSetter,\n    AST_PrefixedTemplateString,\n    AST_PropAccess,\n    AST_RegExp,\n    AST_Return,\n    AST_Scope,\n    AST_Sequence,\n    AST_SimpleStatement,\n    AST_Statement,\n    AST_StatementWithBody,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_SwitchBranch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolMethod,\n    AST_SymbolRef,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_Try,\n    AST_Unary,\n    AST_UnaryPostfix,\n    AST_UnaryPrefix,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    TreeWalker,\n    walk,\n    walk_abort\n} from \"./ast.js\";\nimport {\n    get_full_char_code,\n    get_full_char,\n    is_identifier_char,\n    is_basic_identifier_string,\n    is_identifier_string,\n    PRECEDENCE,\n    RESERVED_WORDS,\n} from \"./parse.js\";\n\nconst EXPECT_DIRECTIVE = /^$|[;{][\\s\\n]*$/;\nconst CODE_LINE_BREAK = 10;\nconst CODE_SPACE = 32;\n\nconst r_annotation = /[@#]__(PURE|INLINE|NOINLINE)__/g;\n\nfunction is_some_comments(comment) {\n    // multiline comment\n    return (\n        (comment.type === \"comment2\" || comment.type === \"comment1\")\n        && /@preserve|@lic|@cc_on|^\\**!/i.test(comment.value)\n    );\n}\n\nfunction OutputStream(options) {\n\n    var readonly = !options;\n    options = defaults(options, {\n        ascii_only           : false,\n        beautify             : false,\n        braces               : false,\n        comments             : \"some\",\n        ecma                 : 5,\n        ie8                  : false,\n        indent_level         : 4,\n        indent_start         : 0,\n        inline_script        : true,\n        keep_numbers         : false,\n        keep_quoted_props    : false,\n        max_line_len         : false,\n        preamble             : null,\n        preserve_annotations : false,\n        quote_keys           : false,\n        quote_style          : 0,\n        safari10             : false,\n        semicolons           : true,\n        shebang              : true,\n        shorthand            : undefined,\n        source_map           : null,\n        webkit               : false,\n        width                : 80,\n        wrap_iife            : false,\n        wrap_func_args       : true,\n    }, true);\n\n    if (options.shorthand === undefined)\n        options.shorthand = options.ecma > 5;\n\n    // Convert comment option to RegExp if neccessary and set up comments filter\n    var comment_filter = return_false; // Default case, throw all comments away\n    if (options.comments) {\n        let comments = options.comments;\n        if (typeof options.comments === \"string\" && /^\\/.*\\/[a-zA-Z]*$/.test(options.comments)) {\n            var regex_pos = options.comments.lastIndexOf(\"/\");\n            comments = new RegExp(\n                options.comments.substr(1, regex_pos - 1),\n                options.comments.substr(regex_pos + 1)\n            );\n        }\n        if (comments instanceof RegExp) {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments.test(comment.value);\n            };\n        } else if (typeof comments === \"function\") {\n            comment_filter = function(comment) {\n                return comment.type != \"comment5\" && comments(this, comment);\n            };\n        } else if (comments === \"some\") {\n            comment_filter = is_some_comments;\n        } else { // NOTE includes \"all\" option\n            comment_filter = return_true;\n        }\n    }\n\n    var indentation = 0;\n    var current_col = 0;\n    var current_line = 1;\n    var current_pos = 0;\n    var OUTPUT = \"\";\n    let printed_comments = new Set();\n\n    var to_utf8 = options.ascii_only ? function(str, identifier) {\n        if (options.ecma >= 2015 && !options.safari10) {\n            str = str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]/g, function(ch) {\n                var code = get_full_char_code(ch, 0).toString(16);\n                return \"\\\\u{\" + code + \"}\";\n            });\n        }\n        return str.replace(/[\\u0000-\\u001f\\u007f-\\uffff]/g, function(ch) {\n            var code = ch.charCodeAt(0).toString(16);\n            if (code.length <= 2 && !identifier) {\n                while (code.length < 2) code = \"0\" + code;\n                return \"\\\\x\" + code;\n            } else {\n                while (code.length < 4) code = \"0\" + code;\n                return \"\\\\u\" + code;\n            }\n        });\n    } : function(str) {\n        return str.replace(/[\\ud800-\\udbff][\\udc00-\\udfff]|([\\ud800-\\udbff]|[\\udc00-\\udfff])/g, function(match, lone) {\n            if (lone) {\n                return \"\\\\u\" + lone.charCodeAt(0).toString(16);\n            }\n            return match;\n        });\n    };\n\n    function make_string(str, quote) {\n        var dq = 0, sq = 0;\n        str = str.replace(/[\\\\\\b\\f\\n\\r\\v\\t\\x22\\x27\\u2028\\u2029\\0\\ufeff]/g,\n          function(s, i) {\n            switch (s) {\n              case '\"': ++dq; return '\"';\n              case \"'\": ++sq; return \"'\";\n              case \"\\\\\": return \"\\\\\\\\\";\n              case \"\\n\": return \"\\\\n\";\n              case \"\\r\": return \"\\\\r\";\n              case \"\\t\": return \"\\\\t\";\n              case \"\\b\": return \"\\\\b\";\n              case \"\\f\": return \"\\\\f\";\n              case \"\\x0B\": return options.ie8 ? \"\\\\x0B\" : \"\\\\v\";\n              case \"\\u2028\": return \"\\\\u2028\";\n              case \"\\u2029\": return \"\\\\u2029\";\n              case \"\\ufeff\": return \"\\\\ufeff\";\n              case \"\\0\":\n                  return /[0-9]/.test(get_full_char(str, i+1)) ? \"\\\\x00\" : \"\\\\0\";\n            }\n            return s;\n        });\n        function quote_single() {\n            return \"'\" + str.replace(/\\x27/g, \"\\\\'\") + \"'\";\n        }\n        function quote_double() {\n            return '\"' + str.replace(/\\x22/g, '\\\\\"') + '\"';\n        }\n        function quote_template() {\n            return \"`\" + str.replace(/`/g, \"\\\\`\") + \"`\";\n        }\n        str = to_utf8(str);\n        if (quote === \"`\") return quote_template();\n        switch (options.quote_style) {\n          case 1:\n            return quote_single();\n          case 2:\n            return quote_double();\n          case 3:\n            return quote == \"'\" ? quote_single() : quote_double();\n          default:\n            return dq > sq ? quote_single() : quote_double();\n        }\n    }\n\n    function encode_string(str, quote) {\n        var ret = make_string(str, quote);\n        if (options.inline_script) {\n            ret = ret.replace(/<\\x2f(script)([>\\/\\t\\n\\f\\r ])/gi, \"<\\\\/$1$2\");\n            ret = ret.replace(/\\x3c!--/g, \"\\\\x3c!--\");\n            ret = ret.replace(/--\\x3e/g, \"--\\\\x3e\");\n        }\n        return ret;\n    }\n\n    function make_name(name) {\n        name = name.toString();\n        name = to_utf8(name, true);\n        return name;\n    }\n\n    function make_indent(back) {\n        return \" \".repeat(options.indent_start + indentation - back * options.indent_level);\n    }\n\n    /* -----[ beautification/minification ]----- */\n\n    var has_parens = false;\n    var might_need_space = false;\n    var might_need_semicolon = false;\n    var might_add_newline = 0;\n    var need_newline_indented = false;\n    var need_space = false;\n    var newline_insert = -1;\n    var last = \"\";\n    var mapping_token, mapping_name, mappings = options.source_map && [];\n\n    var do_add_mapping = mappings ? function() {\n        mappings.forEach(function(mapping) {\n            try {\n                options.source_map.add(\n                    mapping.token.file,\n                    mapping.line, mapping.col,\n                    mapping.token.line, mapping.token.col,\n                    !mapping.name && mapping.token.type == \"name\" ? mapping.token.value : mapping.name\n                );\n            } catch(ex) {\n                // Ignore bad mapping\n            }\n        });\n        mappings = [];\n    } : noop;\n\n    var ensure_line_len = options.max_line_len ? function() {\n        if (current_col > options.max_line_len) {\n            if (might_add_newline) {\n                var left = OUTPUT.slice(0, might_add_newline);\n                var right = OUTPUT.slice(might_add_newline);\n                if (mappings) {\n                    var delta = right.length - current_col;\n                    mappings.forEach(function(mapping) {\n                        mapping.line++;\n                        mapping.col += delta;\n                    });\n                }\n                OUTPUT = left + \"\\n\" + right;\n                current_line++;\n                current_pos++;\n                current_col = right.length;\n            }\n        }\n        if (might_add_newline) {\n            might_add_newline = 0;\n            do_add_mapping();\n        }\n    } : noop;\n\n    var requireSemicolonChars = makePredicate(\"( [ + * / - , . `\");\n\n    function print(str) {\n        str = String(str);\n        var ch = get_full_char(str, 0);\n        if (need_newline_indented && ch) {\n            need_newline_indented = false;\n            if (ch !== \"\\n\") {\n                print(\"\\n\");\n                indent();\n            }\n        }\n        if (need_space && ch) {\n            need_space = false;\n            if (!/[\\s;})]/.test(ch)) {\n                space();\n            }\n        }\n        newline_insert = -1;\n        var prev = last.charAt(last.length - 1);\n        if (might_need_semicolon) {\n            might_need_semicolon = false;\n\n            if (prev === \":\" && ch === \"}\" || (!ch || !\";}\".includes(ch)) && prev !== \";\") {\n                if (options.semicolons || requireSemicolonChars.has(ch)) {\n                    OUTPUT += \";\";\n                    current_col++;\n                    current_pos++;\n                } else {\n                    ensure_line_len();\n                    if (current_col > 0) {\n                        OUTPUT += \"\\n\";\n                        current_pos++;\n                        current_line++;\n                        current_col = 0;\n                    }\n\n                    if (/^\\s+$/.test(str)) {\n                        // reset the semicolon flag, since we didn't print one\n                        // now and might still have to later\n                        might_need_semicolon = true;\n                    }\n                }\n\n                if (!options.beautify)\n                    might_need_space = false;\n            }\n        }\n\n        if (might_need_space) {\n            if ((is_identifier_char(prev)\n                    && (is_identifier_char(ch) || ch == \"\\\\\"))\n                || (ch == \"/\" && ch == prev)\n                || ((ch == \"+\" || ch == \"-\") && ch == last)\n            ) {\n                OUTPUT += \" \";\n                current_col++;\n                current_pos++;\n            }\n            might_need_space = false;\n        }\n\n        if (mapping_token) {\n            mappings.push({\n                token: mapping_token,\n                name: mapping_name,\n                line: current_line,\n                col: current_col\n            });\n            mapping_token = false;\n            if (!might_add_newline) do_add_mapping();\n        }\n\n        OUTPUT += str;\n        has_parens = str[str.length - 1] == \"(\";\n        current_pos += str.length;\n        var a = str.split(/\\r?\\n/), n = a.length - 1;\n        current_line += n;\n        current_col += a[0].length;\n        if (n > 0) {\n            ensure_line_len();\n            current_col = a[n].length;\n        }\n        last = str;\n    }\n\n    var star = function() {\n        print(\"*\");\n    };\n\n    var space = options.beautify ? function() {\n        print(\" \");\n    } : function() {\n        might_need_space = true;\n    };\n\n    var indent = options.beautify ? function(half) {\n        if (options.beautify) {\n            print(make_indent(half ? 0.5 : 0));\n        }\n    } : noop;\n\n    var with_indent = options.beautify ? function(col, cont) {\n        if (col === true) col = next_indent();\n        var save_indentation = indentation;\n        indentation = col;\n        var ret = cont();\n        indentation = save_indentation;\n        return ret;\n    } : function(col, cont) { return cont(); };\n\n    var newline = options.beautify ? function() {\n        if (newline_insert < 0) return print(\"\\n\");\n        if (OUTPUT[newline_insert] != \"\\n\") {\n            OUTPUT = OUTPUT.slice(0, newline_insert) + \"\\n\" + OUTPUT.slice(newline_insert);\n            current_pos++;\n            current_line++;\n        }\n        newline_insert++;\n    } : options.max_line_len ? function() {\n        ensure_line_len();\n        might_add_newline = OUTPUT.length;\n    } : noop;\n\n    var semicolon = options.beautify ? function() {\n        print(\";\");\n    } : function() {\n        might_need_semicolon = true;\n    };\n\n    function force_semicolon() {\n        might_need_semicolon = false;\n        print(\";\");\n    }\n\n    function next_indent() {\n        return indentation + options.indent_level;\n    }\n\n    function with_block(cont) {\n        var ret;\n        print(\"{\");\n        newline();\n        with_indent(next_indent(), function() {\n            ret = cont();\n        });\n        indent();\n        print(\"}\");\n        return ret;\n    }\n\n    function with_parens(cont) {\n        print(\"(\");\n        //XXX: still nice to have that for argument lists\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\")\");\n        return ret;\n    }\n\n    function with_square(cont) {\n        print(\"[\");\n        //var ret = with_indent(current_col, cont);\n        var ret = cont();\n        print(\"]\");\n        return ret;\n    }\n\n    function comma() {\n        print(\",\");\n        space();\n    }\n\n    function colon() {\n        print(\":\");\n        space();\n    }\n\n    var add_mapping = mappings ? function(token, name) {\n        mapping_token = token;\n        mapping_name = name;\n    } : noop;\n\n    function get() {\n        if (might_add_newline) {\n            ensure_line_len();\n        }\n        return OUTPUT;\n    }\n\n    function has_nlb() {\n        let n = OUTPUT.length - 1;\n        while (n >= 0) {\n            const code = OUTPUT.charCodeAt(n);\n            if (code === CODE_LINE_BREAK) {\n                return true;\n            }\n\n            if (code !== CODE_SPACE) {\n                return false;\n            }\n            n--;\n        }\n        return true;\n    }\n\n    function filter_comment(comment) {\n        if (!options.preserve_annotations) {\n            comment = comment.replace(r_annotation, \" \");\n        }\n        if (/^\\s*$/.test(comment)) {\n            return \"\";\n        }\n        return comment.replace(/(<\\s*\\/\\s*)(script)/i, \"<\\\\/$2\");\n    }\n\n    function prepend_comments(node) {\n        var self = this;\n        var start = node.start;\n        if (!start) return;\n        var printed_comments = self.printed_comments;\n\n        // There cannot be a newline between return and its value.\n        const return_with_value = node instanceof AST_Exit && node.value;\n\n        if (\n            start.comments_before\n            && printed_comments.has(start.comments_before)\n        ) {\n            if (return_with_value) {\n                start.comments_before = [];\n            } else {\n                return;\n            }\n        }\n\n        var comments = start.comments_before;\n        if (!comments) {\n            comments = start.comments_before = [];\n        }\n        printed_comments.add(comments);\n\n        if (return_with_value) {\n            var tw = new TreeWalker(function(node) {\n                var parent = tw.parent();\n                if (parent instanceof AST_Exit\n                    || parent instanceof AST_Binary && parent.left === node\n                    || parent.TYPE == \"Call\" && parent.expression === node\n                    || parent instanceof AST_Conditional && parent.condition === node\n                    || parent instanceof AST_Dot && parent.expression === node\n                    || parent instanceof AST_Sequence && parent.expressions[0] === node\n                    || parent instanceof AST_Sub && parent.expression === node\n                    || parent instanceof AST_UnaryPostfix) {\n                    if (!node.start) return;\n                    var text = node.start.comments_before;\n                    if (text && !printed_comments.has(text)) {\n                        printed_comments.add(text);\n                        comments = comments.concat(text);\n                    }\n                } else {\n                    return true;\n                }\n            });\n            tw.push(node);\n            node.value.walk(tw);\n        }\n\n        if (current_pos == 0) {\n            if (comments.length > 0 && options.shebang && comments[0].type === \"comment5\"\n                && !printed_comments.has(comments[0])) {\n                print(\"#!\" + comments.shift().value + \"\\n\");\n                indent();\n            }\n            var preamble = options.preamble;\n            if (preamble) {\n                print(preamble.replace(/\\r\\n?|[\\n\\u2028\\u2029]|\\s*$/g, \"\\n\"));\n            }\n        }\n\n        comments = comments.filter(comment_filter, node).filter(c => !printed_comments.has(c));\n        if (comments.length == 0) return;\n        var last_nlb = has_nlb();\n        comments.forEach(function(c, i) {\n            printed_comments.add(c);\n            if (!last_nlb) {\n                if (c.nlb) {\n                    print(\"\\n\");\n                    indent();\n                    last_nlb = true;\n                } else if (i > 0) {\n                    space();\n                }\n            }\n\n            if (/comment[134]/.test(c.type)) {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value + \"\\n\");\n                    indent();\n                }\n                last_nlb = true;\n            } else if (c.type == \"comment2\") {\n                var value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                last_nlb = false;\n            }\n        });\n        if (!last_nlb) {\n            if (start.nlb) {\n                print(\"\\n\");\n                indent();\n            } else {\n                space();\n            }\n        }\n    }\n\n    function append_comments(node, tail) {\n        var self = this;\n        var token = node.end;\n        if (!token) return;\n        var printed_comments = self.printed_comments;\n        var comments = token[tail ? \"comments_before\" : \"comments_after\"];\n        if (!comments || printed_comments.has(comments)) return;\n        if (!(node instanceof AST_Statement || comments.every((c) =>\n            !/comment[134]/.test(c.type)\n        ))) return;\n        printed_comments.add(comments);\n        var insert = OUTPUT.length;\n        comments.filter(comment_filter, node).forEach(function(c, i) {\n            if (printed_comments.has(c)) return;\n            printed_comments.add(c);\n            need_space = false;\n            if (need_newline_indented) {\n                print(\"\\n\");\n                indent();\n                need_newline_indented = false;\n            } else if (c.nlb && (i > 0 || !has_nlb())) {\n                print(\"\\n\");\n                indent();\n            } else if (i > 0 || !tail) {\n                space();\n            }\n            if (/comment[134]/.test(c.type)) {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"//\" + value);\n                }\n                need_newline_indented = true;\n            } else if (c.type == \"comment2\") {\n                const value = filter_comment(c.value);\n                if (value) {\n                    print(\"/*\" + value + \"*/\");\n                }\n                need_space = true;\n            }\n        });\n        if (OUTPUT.length > insert) newline_insert = insert;\n    }\n\n    var stack = [];\n    return {\n        get             : get,\n        toString        : get,\n        indent          : indent,\n        in_directive    : false,\n        use_asm         : null,\n        active_scope    : null,\n        indentation     : function() { return indentation; },\n        current_width   : function() { return current_col - indentation; },\n        should_break    : function() { return options.width && this.current_width() >= options.width; },\n        has_parens      : function() { return has_parens; },\n        newline         : newline,\n        print           : print,\n        star            : star,\n        space           : space,\n        comma           : comma,\n        colon           : colon,\n        last            : function() { return last; },\n        semicolon       : semicolon,\n        force_semicolon : force_semicolon,\n        to_utf8         : to_utf8,\n        print_name      : function(name) { print(make_name(name)); },\n        print_string    : function(str, quote, escape_directive) {\n            var encoded = encode_string(str, quote);\n            if (escape_directive === true && !encoded.includes(\"\\\\\")) {\n                // Insert semicolons to break directive prologue\n                if (!EXPECT_DIRECTIVE.test(OUTPUT)) {\n                    force_semicolon();\n                }\n                force_semicolon();\n            }\n            print(encoded);\n        },\n        print_template_string_chars: function(str) {\n            var encoded = encode_string(str, \"`\").replace(/\\${/g, \"\\\\${\");\n            return print(encoded.substr(1, encoded.length - 2));\n        },\n        encode_string   : encode_string,\n        next_indent     : next_indent,\n        with_indent     : with_indent,\n        with_block      : with_block,\n        with_parens     : with_parens,\n        with_square     : with_square,\n        add_mapping     : add_mapping,\n        option          : function(opt) { return options[opt]; },\n        printed_comments: printed_comments,\n        prepend_comments: readonly ? noop : prepend_comments,\n        append_comments : readonly || comment_filter === return_false ? noop : append_comments,\n        line            : function() { return current_line; },\n        col             : function() { return current_col; },\n        pos             : function() { return current_pos; },\n        push_node       : function(node) { stack.push(node); },\n        pop_node        : function() { return stack.pop(); },\n        parent          : function(n) {\n            return stack[stack.length - 2 - (n || 0)];\n        }\n    };\n\n}\n\n/* -----[ code generators ]----- */\n\n(function() {\n\n    /* -----[ utils ]----- */\n\n    function DEFPRINT(nodetype, generator) {\n        nodetype.DEFMETHOD(\"_codegen\", generator);\n    }\n\n    AST_Node.DEFMETHOD(\"print\", function(output, force_parens) {\n        var self = this, generator = self._codegen;\n        if (self instanceof AST_Scope) {\n            output.active_scope = self;\n        } else if (!output.use_asm && self instanceof AST_Directive && self.value == \"use asm\") {\n            output.use_asm = output.active_scope;\n        }\n        function doit() {\n            output.prepend_comments(self);\n            self.add_source_map(output);\n            generator(self, output);\n            output.append_comments(self);\n        }\n        output.push_node(self);\n        if (force_parens || self.needs_parens(output)) {\n            output.with_parens(doit);\n        } else {\n            doit();\n        }\n        output.pop_node();\n        if (self === output.use_asm) {\n            output.use_asm = null;\n        }\n    });\n    AST_Node.DEFMETHOD(\"_print\", AST_Node.prototype.print);\n\n    AST_Node.DEFMETHOD(\"print_to_string\", function(options) {\n        var output = OutputStream(options);\n        this.print(output);\n        return output.get();\n    });\n\n    /* -----[ PARENTHESES ]----- */\n\n    function PARENS(nodetype, func) {\n        if (Array.isArray(nodetype)) {\n            nodetype.forEach(function(nodetype) {\n                PARENS(nodetype, func);\n            });\n        } else {\n            nodetype.DEFMETHOD(\"needs_parens\", func);\n        }\n    }\n\n    PARENS(AST_Node, return_false);\n\n    // a function expression needs parens around it when it's provably\n    // the first token to appear in a statement.\n    PARENS(AST_Function, function(output) {\n        if (!output.has_parens() && first_in_statement(output)) {\n            return true;\n        }\n\n        if (output.option(\"webkit\")) {\n            var p = output.parent();\n            if (p instanceof AST_PropAccess && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_iife\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.expression === this) {\n                return true;\n            }\n        }\n\n        if (output.option(\"wrap_func_args\")) {\n            var p = output.parent();\n            if (p instanceof AST_Call && p.args.includes(this)) {\n                return true;\n            }\n        }\n\n        return false;\n    });\n\n    PARENS(AST_Arrow, function(output) {\n        var p = output.parent();\n\n        if (\n            output.option(\"wrap_func_args\")\n            && p instanceof AST_Call\n            && p.args.includes(this)\n        ) {\n            return true;\n        }\n        return p instanceof AST_PropAccess && p.expression === this;\n    });\n\n    // same goes for an object literal (as in AST_Function), because\n    // otherwise {...} would be interpreted as a block of code.\n    PARENS(AST_Object, function(output) {\n        return !output.has_parens() && first_in_statement(output);\n    });\n\n    PARENS(AST_ClassExpression, first_in_statement);\n\n    PARENS(AST_Unary, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || p instanceof AST_Binary\n                && p.operator === \"**\"\n                && this instanceof AST_UnaryPrefix\n                && p.left === this\n                && this.operator !== \"++\"\n                && this.operator !== \"--\";\n    });\n\n    PARENS(AST_Await, function(output) {\n        var p = output.parent();\n        return p instanceof AST_PropAccess && p.expression === this\n            || p instanceof AST_Call && p.expression === this\n            || output.option(\"safari10\") && p instanceof AST_UnaryPrefix;\n    });\n\n    PARENS(AST_Sequence, function(output) {\n        var p = output.parent();\n        return p instanceof AST_Call                          // (foo, bar)() or foo(1, (2, 3), 4)\n            || p instanceof AST_Unary                         // !(foo, bar, baz)\n            || p instanceof AST_Binary                        // 1 + (2, 3) + 4 ==> 8\n            || p instanceof AST_VarDef                        // var a = (1, 2), b = a + a; ==> b == 4\n            || p instanceof AST_PropAccess                    // (1, {foo:2}).foo or (1, {foo:2})[\"foo\"] ==> 2\n            || p instanceof AST_Array                         // [ 1, (2, 3), 4 ] ==> [ 1, 3, 4 ]\n            || p instanceof AST_ObjectProperty                // { foo: (1, 2) }.foo ==> 2\n            || p instanceof AST_Conditional                   /* (false, true) ? (a = 10, b = 20) : (c = 30)\n                                                               * ==> 20 (side effect, set a := 10 and b := 20) */\n            || p instanceof AST_Arrow                         // x => (x, x)\n            || p instanceof AST_DefaultAssign                 // x => (x = (0, function(){}))\n            || p instanceof AST_Expansion                     // [...(a, b)]\n            || p instanceof AST_ForOf && this === p.object    // for (e of (foo, bar)) {}\n            || p instanceof AST_Yield                         // yield (foo, bar)\n            || p instanceof AST_Export                        // export default (foo, bar)\n        ;\n    });\n\n    PARENS(AST_Binary, function(output) {\n        var p = output.parent();\n        // (foo && bar)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // typeof (foo && bar)\n        if (p instanceof AST_Unary)\n            return true;\n        // (foo && bar)[\"prop\"], (foo && bar).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // this deals with precedence: 3 * (2 + 1)\n        if (p instanceof AST_Binary) {\n            const po = p.operator;\n            const so = this.operator;\n\n            if (so === \"??\" && (po === \"||\" || po === \"&&\")) {\n                return true;\n            }\n\n            if (po === \"??\" && (so === \"||\" || so === \"&&\")) {\n                return true;\n            }\n\n            const pp = PRECEDENCE[po];\n            const sp = PRECEDENCE[so];\n            if (pp > sp\n                || (pp == sp\n                    && (this === p.right || po == \"**\"))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_Yield, function(output) {\n        var p = output.parent();\n        // (yield 1) + (yield 2)\n        // a = yield 3\n        if (p instanceof AST_Binary && p.operator !== \"=\")\n            return true;\n        // (yield 1)()\n        // new (yield 1)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (yield 1) ? yield 2 : yield 3\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // -(yield 4)\n        if (p instanceof AST_Unary)\n            return true;\n        // (yield x).foo\n        // (yield x)['foo']\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n    });\n\n    PARENS(AST_PropAccess, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_New && p.expression === this) {\n            // i.e. new (foo.bar().baz)\n            //\n            // if there's one call into this subtree, then we need\n            // parens around it too, otherwise the call will be\n            // interpreted as passing the arguments to the upper New\n            // expression.\n            return walk(this, node => {\n                if (node instanceof AST_Scope) return true;\n                if (node instanceof AST_Call) {\n                    return walk_abort;  // makes walk() return true.\n                }\n            });\n        }\n    });\n\n    PARENS(AST_Call, function(output) {\n        var p = output.parent(), p1;\n        if (p instanceof AST_New && p.expression === this\n            || p instanceof AST_Export && p.is_default && this.expression instanceof AST_Function)\n            return true;\n\n        // workaround for Safari bug.\n        // https://bugs.webkit.org/show_bug.cgi?id=123506\n        return this.expression instanceof AST_Function\n            && p instanceof AST_PropAccess\n            && p.expression === this\n            && (p1 = output.parent(1)) instanceof AST_Assign\n            && p1.left === p;\n    });\n\n    PARENS(AST_New, function(output) {\n        var p = output.parent();\n        if (this.args.length === 0\n            && (p instanceof AST_PropAccess // (new Date).getTime(), (new Date)[\"getTime\"]()\n                || p instanceof AST_Call && p.expression === this)) // (new foo)(bar)\n            return true;\n    });\n\n    PARENS(AST_Number, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value < 0 || /^0/.test(make_num(value))) {\n                return true;\n            }\n        }\n    });\n\n    PARENS(AST_BigInt, function(output) {\n        var p = output.parent();\n        if (p instanceof AST_PropAccess && p.expression === this) {\n            var value = this.getValue();\n            if (value.startsWith(\"-\")) {\n                return true;\n            }\n        }\n    });\n\n    PARENS([ AST_Assign, AST_Conditional ], function(output) {\n        var p = output.parent();\n        // !(a = false) → true\n        if (p instanceof AST_Unary)\n            return true;\n        // 1 + (a = 2) + 3 → 6, side effect setting a = 2\n        if (p instanceof AST_Binary && !(p instanceof AST_Assign))\n            return true;\n        // (a = func)() —or— new (a = Object)()\n        if (p instanceof AST_Call && p.expression === this)\n            return true;\n        // (a = foo) ? bar : baz\n        if (p instanceof AST_Conditional && p.condition === this)\n            return true;\n        // (a = foo)[\"prop\"] —or— (a = foo).prop\n        if (p instanceof AST_PropAccess && p.expression === this)\n            return true;\n        // ({a, b} = {a: 1, b: 2}), a destructuring assignment\n        if (this instanceof AST_Assign && this.left instanceof AST_Destructuring && this.left.is_array === false)\n            return true;\n    });\n\n    /* -----[ PRINTERS ]----- */\n\n    DEFPRINT(AST_Directive, function(self, output) {\n        output.print_string(self.value, self.quote);\n        output.semicolon();\n    });\n\n    DEFPRINT(AST_Expansion, function (self, output) {\n        output.print(\"...\");\n        self.expression.print(output);\n    });\n\n    DEFPRINT(AST_Destructuring, function (self, output) {\n        output.print(self.is_array ? \"[\" : \"{\");\n        var len = self.names.length;\n        self.names.forEach(function (name, i) {\n            if (i > 0) output.comma();\n            name.print(output);\n            // If the final element is a hole, we need to make sure it\n            // doesn't look like a trailing comma, by inserting an actual\n            // trailing comma.\n            if (i == len - 1 && name instanceof AST_Hole) output.comma();\n        });\n        output.print(self.is_array ? \"]\" : \"}\");\n    });\n\n    DEFPRINT(AST_Debugger, function(self, output) {\n        output.print(\"debugger\");\n        output.semicolon();\n    });\n\n    /* -----[ statements ]----- */\n\n    function display_body(body, is_toplevel, output, allow_directives) {\n        var last = body.length - 1;\n        output.in_directive = allow_directives;\n        body.forEach(function(stmt, i) {\n            if (output.in_directive === true && !(stmt instanceof AST_Directive ||\n                stmt instanceof AST_EmptyStatement ||\n                (stmt instanceof AST_SimpleStatement && stmt.body instanceof AST_String)\n            )) {\n                output.in_directive = false;\n            }\n            if (!(stmt instanceof AST_EmptyStatement)) {\n                output.indent();\n                stmt.print(output);\n                if (!(i == last && is_toplevel)) {\n                    output.newline();\n                    if (is_toplevel) output.newline();\n                }\n            }\n            if (output.in_directive === true &&\n                stmt instanceof AST_SimpleStatement &&\n                stmt.body instanceof AST_String\n            ) {\n                output.in_directive = false;\n            }\n        });\n        output.in_directive = false;\n    }\n\n    AST_StatementWithBody.DEFMETHOD(\"_do_print_body\", function(output) {\n        force_statement(this.body, output);\n    });\n\n    DEFPRINT(AST_Statement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_Toplevel, function(self, output) {\n        display_body(self.body, true, output, true);\n        output.print(\"\");\n    });\n    DEFPRINT(AST_LabeledStatement, function(self, output) {\n        self.label.print(output);\n        output.colon();\n        self.body.print(output);\n    });\n    DEFPRINT(AST_SimpleStatement, function(self, output) {\n        self.body.print(output);\n        output.semicolon();\n    });\n    function print_braced_empty(self, output) {\n        output.print(\"{\");\n        output.with_indent(output.next_indent(), function() {\n            output.append_comments(self, true);\n        });\n        output.print(\"}\");\n    }\n    function print_braced(self, output, allow_directives) {\n        if (self.body.length > 0) {\n            output.with_block(function() {\n                display_body(self.body, false, output, allow_directives);\n            });\n        } else print_braced_empty(self, output);\n    }\n    DEFPRINT(AST_BlockStatement, function(self, output) {\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_EmptyStatement, function(self, output) {\n        output.semicolon();\n    });\n    DEFPRINT(AST_Do, function(self, output) {\n        output.print(\"do\");\n        output.space();\n        make_block(self.body, output);\n        output.space();\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.semicolon();\n    });\n    DEFPRINT(AST_While, function(self, output) {\n        output.print(\"while\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_For, function(self, output) {\n        output.print(\"for\");\n        output.space();\n        output.with_parens(function() {\n            if (self.init) {\n                if (self.init instanceof AST_Definitions) {\n                    self.init.print(output);\n                } else {\n                    parenthesize_for_noin(self.init, output, true);\n                }\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.condition) {\n                self.condition.print(output);\n                output.print(\";\");\n                output.space();\n            } else {\n                output.print(\";\");\n            }\n            if (self.step) {\n                self.step.print(output);\n            }\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_ForIn, function(self, output) {\n        output.print(\"for\");\n        if (self.await) {\n            output.space();\n            output.print(\"await\");\n        }\n        output.space();\n        output.with_parens(function() {\n            self.init.print(output);\n            output.space();\n            output.print(self instanceof AST_ForOf ? \"of\" : \"in\");\n            output.space();\n            self.object.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_With, function(self, output) {\n        output.print(\"with\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        self._do_print_body(output);\n    });\n\n    /* -----[ functions ]----- */\n    AST_Lambda.DEFMETHOD(\"_do_print\", function(output, nokeyword) {\n        var self = this;\n        if (!nokeyword) {\n            if (self.async) {\n                output.print(\"async\");\n                output.space();\n            }\n            output.print(\"function\");\n            if (self.is_generator) {\n                output.star();\n            }\n            if (self.name) {\n                output.space();\n            }\n        }\n        if (self.name instanceof AST_Symbol) {\n            self.name.print(output);\n        } else if (nokeyword && self.name instanceof AST_Node) {\n            output.with_square(function() {\n                self.name.print(output); // Computed method name\n            });\n        }\n        output.with_parens(function() {\n            self.argnames.forEach(function(arg, i) {\n                if (i) output.comma();\n                arg.print(output);\n            });\n        });\n        output.space();\n        print_braced(self, output, true);\n    });\n    DEFPRINT(AST_Lambda, function(self, output) {\n        self._do_print(output);\n    });\n\n    DEFPRINT(AST_PrefixedTemplateString, function(self, output) {\n        var tag = self.prefix;\n        var parenthesize_tag = tag instanceof AST_Lambda\n            || tag instanceof AST_Binary\n            || tag instanceof AST_Conditional\n            || tag instanceof AST_Sequence\n            || tag instanceof AST_Unary\n            || tag instanceof AST_Dot && tag.expression instanceof AST_Object;\n        if (parenthesize_tag) output.print(\"(\");\n        self.prefix.print(output);\n        if (parenthesize_tag) output.print(\")\");\n        self.template_string.print(output);\n    });\n    DEFPRINT(AST_TemplateString, function(self, output) {\n        var is_tagged = output.parent() instanceof AST_PrefixedTemplateString;\n\n        output.print(\"`\");\n        for (var i = 0; i < self.segments.length; i++) {\n            if (!(self.segments[i] instanceof AST_TemplateSegment)) {\n                output.print(\"${\");\n                self.segments[i].print(output);\n                output.print(\"}\");\n            } else if (is_tagged) {\n                output.print(self.segments[i].raw);\n            } else {\n                output.print_template_string_chars(self.segments[i].value);\n            }\n        }\n        output.print(\"`\");\n    });\n    DEFPRINT(AST_TemplateSegment, function(self, output) {\n        output.print_template_string_chars(self.value);\n    });\n\n    AST_Arrow.DEFMETHOD(\"_do_print\", function(output) {\n        var self = this;\n        var parent = output.parent();\n        var needs_parens = (parent instanceof AST_Binary && !(parent instanceof AST_Assign)) ||\n            parent instanceof AST_Unary ||\n            (parent instanceof AST_Call && self === parent.expression);\n        if (needs_parens) { output.print(\"(\"); }\n        if (self.async) {\n            output.print(\"async\");\n            output.space();\n        }\n        if (self.argnames.length === 1 && self.argnames[0] instanceof AST_Symbol) {\n            self.argnames[0].print(output);\n        } else {\n            output.with_parens(function() {\n                self.argnames.forEach(function(arg, i) {\n                    if (i) output.comma();\n                    arg.print(output);\n                });\n            });\n        }\n        output.space();\n        output.print(\"=>\");\n        output.space();\n        const first_statement = self.body[0];\n        if (\n            self.body.length === 1\n            && first_statement instanceof AST_Return\n        ) {\n            const returned = first_statement.value;\n            if (!returned) {\n                output.print(\"{}\");\n            } else if (left_is_object(returned)) {\n                output.print(\"(\");\n                returned.print(output);\n                output.print(\")\");\n            } else {\n                returned.print(output);\n            }\n        } else {\n            print_braced(self, output);\n        }\n        if (needs_parens) { output.print(\")\"); }\n    });\n\n    /* -----[ exits ]----- */\n    AST_Exit.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.value) {\n            output.space();\n            const comments = this.value.start.comments_before;\n            if (comments && comments.length && !output.printed_comments.has(comments)) {\n                output.print(\"(\");\n                this.value.print(output);\n                output.print(\")\");\n            } else {\n                this.value.print(output);\n            }\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Return, function(self, output) {\n        self._do_print(output, \"return\");\n    });\n    DEFPRINT(AST_Throw, function(self, output) {\n        self._do_print(output, \"throw\");\n    });\n\n    /* -----[ yield ]----- */\n\n    DEFPRINT(AST_Yield, function(self, output) {\n        var star = self.is_star ? \"*\" : \"\";\n        output.print(\"yield\" + star);\n        if (self.expression) {\n            output.space();\n            self.expression.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Await, function(self, output) {\n        output.print(\"await\");\n        output.space();\n        var e = self.expression;\n        var parens = !(\n               e instanceof AST_Call\n            || e instanceof AST_SymbolRef\n            || e instanceof AST_PropAccess\n            || e instanceof AST_Unary\n            || e instanceof AST_Constant\n            || e instanceof AST_Await\n            || e instanceof AST_Object\n        );\n        if (parens) output.print(\"(\");\n        self.expression.print(output);\n        if (parens) output.print(\")\");\n    });\n\n    /* -----[ loop control ]----- */\n    AST_LoopControl.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        if (this.label) {\n            output.space();\n            this.label.print(output);\n        }\n        output.semicolon();\n    });\n    DEFPRINT(AST_Break, function(self, output) {\n        self._do_print(output, \"break\");\n    });\n    DEFPRINT(AST_Continue, function(self, output) {\n        self._do_print(output, \"continue\");\n    });\n\n    /* -----[ if ]----- */\n    function make_then(self, output) {\n        var b = self.body;\n        if (output.option(\"braces\")\n            || output.option(\"ie8\") && b instanceof AST_Do)\n            return make_block(b, output);\n        // The squeezer replaces \"block\"-s that contain only a single\n        // statement with the statement itself; technically, the AST\n        // is correct, but this can create problems when we output an\n        // IF having an ELSE clause where the THEN clause ends in an\n        // IF *without* an ELSE block (then the outer ELSE would refer\n        // to the inner IF).  This function checks for this case and\n        // adds the block braces if needed.\n        if (!b) return output.force_semicolon();\n        while (true) {\n            if (b instanceof AST_If) {\n                if (!b.alternative) {\n                    make_block(self.body, output);\n                    return;\n                }\n                b = b.alternative;\n            } else if (b instanceof AST_StatementWithBody) {\n                b = b.body;\n            } else break;\n        }\n        force_statement(self.body, output);\n    }\n    DEFPRINT(AST_If, function(self, output) {\n        output.print(\"if\");\n        output.space();\n        output.with_parens(function() {\n            self.condition.print(output);\n        });\n        output.space();\n        if (self.alternative) {\n            make_then(self, output);\n            output.space();\n            output.print(\"else\");\n            output.space();\n            if (self.alternative instanceof AST_If)\n                self.alternative.print(output);\n            else\n                force_statement(self.alternative, output);\n        } else {\n            self._do_print_body(output);\n        }\n    });\n\n    /* -----[ switch ]----- */\n    DEFPRINT(AST_Switch, function(self, output) {\n        output.print(\"switch\");\n        output.space();\n        output.with_parens(function() {\n            self.expression.print(output);\n        });\n        output.space();\n        var last = self.body.length - 1;\n        if (last < 0) print_braced_empty(self, output);\n        else output.with_block(function() {\n            self.body.forEach(function(branch, i) {\n                output.indent(true);\n                branch.print(output);\n                if (i < last && branch.body.length > 0)\n                    output.newline();\n            });\n        });\n    });\n    AST_SwitchBranch.DEFMETHOD(\"_do_print_body\", function(output) {\n        output.newline();\n        this.body.forEach(function(stmt) {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    });\n    DEFPRINT(AST_Default, function(self, output) {\n        output.print(\"default:\");\n        self._do_print_body(output);\n    });\n    DEFPRINT(AST_Case, function(self, output) {\n        output.print(\"case\");\n        output.space();\n        self.expression.print(output);\n        output.print(\":\");\n        self._do_print_body(output);\n    });\n\n    /* -----[ exceptions ]----- */\n    DEFPRINT(AST_Try, function(self, output) {\n        output.print(\"try\");\n        output.space();\n        print_braced(self, output);\n        if (self.bcatch) {\n            output.space();\n            self.bcatch.print(output);\n        }\n        if (self.bfinally) {\n            output.space();\n            self.bfinally.print(output);\n        }\n    });\n    DEFPRINT(AST_Catch, function(self, output) {\n        output.print(\"catch\");\n        if (self.argname) {\n            output.space();\n            output.with_parens(function() {\n                self.argname.print(output);\n            });\n        }\n        output.space();\n        print_braced(self, output);\n    });\n    DEFPRINT(AST_Finally, function(self, output) {\n        output.print(\"finally\");\n        output.space();\n        print_braced(self, output);\n    });\n\n    /* -----[ var/const ]----- */\n    AST_Definitions.DEFMETHOD(\"_do_print\", function(output, kind) {\n        output.print(kind);\n        output.space();\n        this.definitions.forEach(function(def, i) {\n            if (i) output.comma();\n            def.print(output);\n        });\n        var p = output.parent();\n        var in_for = p instanceof AST_For || p instanceof AST_ForIn;\n        var output_semicolon = !in_for || p && p.init !== this;\n        if (output_semicolon)\n            output.semicolon();\n    });\n    DEFPRINT(AST_Let, function(self, output) {\n        self._do_print(output, \"let\");\n    });\n    DEFPRINT(AST_Var, function(self, output) {\n        self._do_print(output, \"var\");\n    });\n    DEFPRINT(AST_Const, function(self, output) {\n        self._do_print(output, \"const\");\n    });\n    DEFPRINT(AST_Import, function(self, output) {\n        output.print(\"import\");\n        output.space();\n        if (self.imported_name) {\n            self.imported_name.print(output);\n        }\n        if (self.imported_name && self.imported_names) {\n            output.print(\",\");\n            output.space();\n        }\n        if (self.imported_names) {\n            if (self.imported_names.length === 1 && self.imported_names[0].foreign_name.name === \"*\") {\n                self.imported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.imported_names.forEach(function (name_import, i) {\n                    output.space();\n                    name_import.print(output);\n                    if (i < self.imported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        }\n        if (self.imported_name || self.imported_names) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n        }\n        self.module_name.print(output);\n        output.semicolon();\n    });\n    DEFPRINT(AST_ImportMeta, function(self, output) {\n        output.print(\"import.meta\");\n    });\n\n    DEFPRINT(AST_NameMapping, function(self, output) {\n        var is_import = output.parent() instanceof AST_Import;\n        var definition = self.name.definition();\n        var names_are_different =\n            (definition && definition.mangled_name || self.name.name) !==\n            self.foreign_name.name;\n        if (names_are_different) {\n            if (is_import) {\n                output.print(self.foreign_name.name);\n            } else {\n                self.name.print(output);\n            }\n            output.space();\n            output.print(\"as\");\n            output.space();\n            if (is_import) {\n                self.name.print(output);\n            } else {\n                output.print(self.foreign_name.name);\n            }\n        } else {\n            self.name.print(output);\n        }\n    });\n\n    DEFPRINT(AST_Export, function(self, output) {\n        output.print(\"export\");\n        output.space();\n        if (self.is_default) {\n            output.print(\"default\");\n            output.space();\n        }\n        if (self.exported_names) {\n            if (self.exported_names.length === 1 && self.exported_names[0].name.name === \"*\") {\n                self.exported_names[0].print(output);\n            } else {\n                output.print(\"{\");\n                self.exported_names.forEach(function(name_export, i) {\n                    output.space();\n                    name_export.print(output);\n                    if (i < self.exported_names.length - 1) {\n                        output.print(\",\");\n                    }\n                });\n                output.space();\n                output.print(\"}\");\n            }\n        } else if (self.exported_value) {\n            self.exported_value.print(output);\n        } else if (self.exported_definition) {\n            self.exported_definition.print(output);\n            if (self.exported_definition instanceof AST_Definitions) return;\n        }\n        if (self.module_name) {\n            output.space();\n            output.print(\"from\");\n            output.space();\n            self.module_name.print(output);\n        }\n        if (self.exported_value\n                && !(self.exported_value instanceof AST_Defun ||\n                    self.exported_value instanceof AST_Function ||\n                    self.exported_value instanceof AST_Class)\n            || self.module_name\n            || self.exported_names\n        ) {\n            output.semicolon();\n        }\n    });\n\n    function parenthesize_for_noin(node, output, noin) {\n        var parens = false;\n        // need to take some precautions here:\n        //    https://github.com/mishoo/UglifyJS2/issues/60\n        if (noin) {\n            parens = walk(node, node => {\n                if (node instanceof AST_Scope) return true;\n                if (node instanceof AST_Binary && node.operator == \"in\") {\n                    return walk_abort;  // makes walk() return true\n                }\n            });\n        }\n        node.print(output, parens);\n    }\n\n    DEFPRINT(AST_VarDef, function(self, output) {\n        self.name.print(output);\n        if (self.value) {\n            output.space();\n            output.print(\"=\");\n            output.space();\n            var p = output.parent(1);\n            var noin = p instanceof AST_For || p instanceof AST_ForIn;\n            parenthesize_for_noin(self.value, output, noin);\n        }\n    });\n\n    /* -----[ other expressions ]----- */\n    DEFPRINT(AST_Call, function(self, output) {\n        self.expression.print(output);\n        if (self instanceof AST_New && self.args.length === 0)\n            return;\n        if (self.expression instanceof AST_Call || self.expression instanceof AST_Lambda) {\n            output.add_mapping(self.start);\n        }\n        if (self.optional) output.print(\"?.\");\n        output.with_parens(function() {\n            self.args.forEach(function(expr, i) {\n                if (i) output.comma();\n                expr.print(output);\n            });\n        });\n    });\n    DEFPRINT(AST_New, function(self, output) {\n        output.print(\"new\");\n        output.space();\n        AST_Call.prototype._codegen(self, output);\n    });\n\n    AST_Sequence.DEFMETHOD(\"_do_print\", function(output) {\n        this.expressions.forEach(function(node, index) {\n            if (index > 0) {\n                output.comma();\n                if (output.should_break()) {\n                    output.newline();\n                    output.indent();\n                }\n            }\n            node.print(output);\n        });\n    });\n    DEFPRINT(AST_Sequence, function(self, output) {\n        self._do_print(output);\n        // var p = output.parent();\n        // if (p instanceof AST_Statement) {\n        //     output.with_indent(output.next_indent(), function(){\n        //         self._do_print(output);\n        //     });\n        // } else {\n        //     self._do_print(output);\n        // }\n    });\n    DEFPRINT(AST_Dot, function(self, output) {\n        var expr = self.expression;\n        expr.print(output);\n        var prop = self.property;\n        var print_computed = RESERVED_WORDS.has(prop)\n            ? output.option(\"ie8\")\n            : !is_identifier_string(\n                prop,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            );\n\n        if (self.optional) output.print(\"?.\");\n\n        if (print_computed) {\n            output.print(\"[\");\n            output.add_mapping(self.end);\n            output.print_string(prop);\n            output.print(\"]\");\n        } else {\n            if (expr instanceof AST_Number && expr.getValue() >= 0) {\n                if (!/[xa-f.)]/i.test(output.last())) {\n                    output.print(\".\");\n                }\n            }\n            if (!self.optional) output.print(\".\");\n            // the name after dot would be mapped about here.\n            output.add_mapping(self.end);\n            output.print_name(prop);\n        }\n    });\n    DEFPRINT(AST_Sub, function(self, output) {\n        self.expression.print(output);\n        if (self.optional) output.print(\"?.\");\n        output.print(\"[\");\n        self.property.print(output);\n        output.print(\"]\");\n    });\n    DEFPRINT(AST_Chain, function(self, output) {\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPrefix, function(self, output) {\n        var op = self.operator;\n        output.print(op);\n        if (/^[a-z]/i.test(op)\n            || (/[+-]$/.test(op)\n                && self.expression instanceof AST_UnaryPrefix\n                && /^[+-]/.test(self.expression.operator))) {\n            output.space();\n        }\n        self.expression.print(output);\n    });\n    DEFPRINT(AST_UnaryPostfix, function(self, output) {\n        self.expression.print(output);\n        output.print(self.operator);\n    });\n    DEFPRINT(AST_Binary, function(self, output) {\n        var op = self.operator;\n        self.left.print(output);\n        if (op[0] == \">\" /* \">>\" \">>>\" \">\" \">=\" */\n            && self.left instanceof AST_UnaryPostfix\n            && self.left.operator == \"--\") {\n            // space is mandatory to avoid outputting -->\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        output.print(op);\n        if ((op == \"<\" || op == \"<<\")\n            && self.right instanceof AST_UnaryPrefix\n            && self.right.operator == \"!\"\n            && self.right.expression instanceof AST_UnaryPrefix\n            && self.right.expression.operator == \"--\") {\n            // space is mandatory to avoid outputting <!--\n            output.print(\" \");\n        } else {\n            // the space is optional depending on \"beautify\"\n            output.space();\n        }\n        self.right.print(output);\n    });\n    DEFPRINT(AST_Conditional, function(self, output) {\n        self.condition.print(output);\n        output.space();\n        output.print(\"?\");\n        output.space();\n        self.consequent.print(output);\n        output.space();\n        output.colon();\n        self.alternative.print(output);\n    });\n\n    /* -----[ literals ]----- */\n    DEFPRINT(AST_Array, function(self, output) {\n        output.with_square(function() {\n            var a = self.elements, len = a.length;\n            if (len > 0) output.space();\n            a.forEach(function(exp, i) {\n                if (i) output.comma();\n                exp.print(output);\n                // If the final element is a hole, we need to make sure it\n                // doesn't look like a trailing comma, by inserting an actual\n                // trailing comma.\n                if (i === len - 1 && exp instanceof AST_Hole)\n                  output.comma();\n            });\n            if (len > 0) output.space();\n        });\n    });\n    DEFPRINT(AST_Object, function(self, output) {\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.print(\",\");\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else print_braced_empty(self, output);\n    });\n    DEFPRINT(AST_Class, function(self, output) {\n        output.print(\"class\");\n        output.space();\n        if (self.name) {\n            self.name.print(output);\n            output.space();\n        }\n        if (self.extends) {\n            var parens = (\n                   !(self.extends instanceof AST_SymbolRef)\n                && !(self.extends instanceof AST_PropAccess)\n                && !(self.extends instanceof AST_ClassExpression)\n                && !(self.extends instanceof AST_Function)\n            );\n            output.print(\"extends\");\n            if (parens) {\n                output.print(\"(\");\n            } else {\n                output.space();\n            }\n            self.extends.print(output);\n            if (parens) {\n                output.print(\")\");\n            } else {\n                output.space();\n            }\n        }\n        if (self.properties.length > 0) output.with_block(function() {\n            self.properties.forEach(function(prop, i) {\n                if (i) {\n                    output.newline();\n                }\n                output.indent();\n                prop.print(output);\n            });\n            output.newline();\n        });\n        else output.print(\"{}\");\n    });\n    DEFPRINT(AST_NewTarget, function(self, output) {\n        output.print(\"new.target\");\n    });\n\n    function print_property_name(key, quote, output) {\n        if (output.option(\"quote_keys\")) {\n            return output.print_string(key);\n        }\n        if (\"\" + +key == key && key >= 0) {\n            if (output.option(\"keep_numbers\")) {\n                return output.print(key);\n            }\n            return output.print(make_num(key));\n        }\n        var print_string = RESERVED_WORDS.has(key)\n            ? output.option(\"ie8\")\n            : (\n                output.option(\"ecma\") < 2015 || output.option(\"safari10\")\n                    ? !is_basic_identifier_string(key)\n                    : !is_identifier_string(key, true)\n            );\n        if (print_string || (quote && output.option(\"keep_quoted_props\"))) {\n            return output.print_string(key, quote);\n        }\n        return output.print_name(key);\n    }\n\n    DEFPRINT(AST_ObjectKeyVal, function(self, output) {\n        function get_name(self) {\n            var def = self.definition();\n            return def ? def.mangled_name || def.name : self.name;\n        }\n\n        var allowShortHand = output.option(\"shorthand\");\n        if (allowShortHand &&\n            self.value instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value) === self.key &&\n            !RESERVED_WORDS.has(self.key)\n        ) {\n            print_property_name(self.key, self.quote, output);\n\n        } else if (allowShortHand &&\n            self.value instanceof AST_DefaultAssign &&\n            self.value.left instanceof AST_Symbol &&\n            is_identifier_string(\n                self.key,\n                output.option(\"ecma\") >= 2015 || output.option(\"safari10\")\n            ) &&\n            get_name(self.value.left) === self.key\n        ) {\n            print_property_name(self.key, self.quote, output);\n            output.space();\n            output.print(\"=\");\n            output.space();\n            self.value.right.print(output);\n        } else {\n            if (!(self.key instanceof AST_Node)) {\n                print_property_name(self.key, self.quote, output);\n            } else {\n                output.with_square(function() {\n                    self.key.print(output);\n                });\n            }\n            output.colon();\n            self.value.print(output);\n        }\n    });\n    DEFPRINT(AST_ClassProperty, (self, output) => {\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n\n        if (self.key instanceof AST_SymbolClassProperty) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.print(\"[\");\n            self.key.print(output);\n            output.print(\"]\");\n        }\n\n        if (self.value) {\n            output.print(\"=\");\n            self.value.print(output);\n        }\n\n        output.semicolon();\n    });\n    AST_ObjectProperty.DEFMETHOD(\"_print_getter_setter\", function(type, output) {\n        var self = this;\n        if (self.static) {\n            output.print(\"static\");\n            output.space();\n        }\n        if (type) {\n            output.print(type);\n            output.space();\n        }\n        if (self.key instanceof AST_SymbolMethod) {\n            print_property_name(self.key.name, self.quote, output);\n        } else {\n            output.with_square(function() {\n                self.key.print(output);\n            });\n        }\n        self.value._do_print(output, true);\n    });\n    DEFPRINT(AST_ObjectSetter, function(self, output) {\n        self._print_getter_setter(\"set\", output);\n    });\n    DEFPRINT(AST_ObjectGetter, function(self, output) {\n        self._print_getter_setter(\"get\", output);\n    });\n    DEFPRINT(AST_ConciseMethod, function(self, output) {\n        var type;\n        if (self.is_generator && self.async) {\n            type = \"async*\";\n        } else if (self.is_generator) {\n            type = \"*\";\n        } else if (self.async) {\n            type = \"async\";\n        }\n        self._print_getter_setter(type, output);\n    });\n    AST_Symbol.DEFMETHOD(\"_do_print\", function(output) {\n        var def = this.definition();\n        output.print_name(def ? def.mangled_name || def.name : this.name);\n    });\n    DEFPRINT(AST_Symbol, function (self, output) {\n        self._do_print(output);\n    });\n    DEFPRINT(AST_Hole, noop);\n    DEFPRINT(AST_This, function(self, output) {\n        output.print(\"this\");\n    });\n    DEFPRINT(AST_Super, function(self, output) {\n        output.print(\"super\");\n    });\n    DEFPRINT(AST_Constant, function(self, output) {\n        output.print(self.getValue());\n    });\n    DEFPRINT(AST_String, function(self, output) {\n        output.print_string(self.getValue(), self.quote, output.in_directive);\n    });\n    DEFPRINT(AST_Number, function(self, output) {\n        if ((output.option(\"keep_numbers\") || output.use_asm) && self.raw) {\n            output.print(self.raw);\n        } else {\n            output.print(make_num(self.getValue()));\n        }\n    });\n    DEFPRINT(AST_BigInt, function(self, output) {\n        output.print(self.getValue() + \"n\");\n    });\n\n    const r_slash_script = /(<\\s*\\/\\s*script)/i;\n    const slash_script_replace = (_, $1) => $1.replace(\"/\", \"\\\\/\");\n    DEFPRINT(AST_RegExp, function(self, output) {\n        let { source, flags } = self.getValue();\n        source = regexp_source_fix(source);\n        flags = flags ? sort_regexp_flags(flags) : \"\";\n        source = source.replace(r_slash_script, slash_script_replace);\n        output.print(output.to_utf8(`/${source}/${flags}`));\n        const parent = output.parent();\n        if (\n            parent instanceof AST_Binary\n            && /^\\w/.test(parent.operator)\n            && parent.left === self\n        ) {\n            output.print(\" \");\n        }\n    });\n\n    function force_statement(stat, output) {\n        if (output.option(\"braces\")) {\n            make_block(stat, output);\n        } else {\n            if (!stat || stat instanceof AST_EmptyStatement)\n                output.force_semicolon();\n            else\n                stat.print(output);\n        }\n    }\n\n    function best_of(a) {\n        var best = a[0], len = best.length;\n        for (var i = 1; i < a.length; ++i) {\n            if (a[i].length < len) {\n                best = a[i];\n                len = best.length;\n            }\n        }\n        return best;\n    }\n\n    function make_num(num) {\n        var str = num.toString(10).replace(/^0\\./, \".\").replace(\"e+\", \"e\");\n        var candidates = [ str ];\n        if (Math.floor(num) === num) {\n            if (num < 0) {\n                candidates.push(\"-0x\" + (-num).toString(16).toLowerCase());\n            } else {\n                candidates.push(\"0x\" + num.toString(16).toLowerCase());\n            }\n        }\n        var match, len, digits;\n        if (match = /^\\.0+/.exec(str)) {\n            len = match[0].length;\n            digits = str.slice(len);\n            candidates.push(digits + \"e-\" + (digits.length + len - 1));\n        } else if (match = /0+$/.exec(str)) {\n            len = match[0].length;\n            candidates.push(str.slice(0, -len) + \"e\" + len);\n        } else if (match = /^(\\d)\\.(\\d+)e(-?\\d+)$/.exec(str)) {\n            candidates.push(match[1] + match[2] + \"e\" + (match[3] - match[2].length));\n        }\n        return best_of(candidates);\n    }\n\n    function make_block(stmt, output) {\n        if (!stmt || stmt instanceof AST_EmptyStatement)\n            output.print(\"{}\");\n        else if (stmt instanceof AST_BlockStatement)\n            stmt.print(output);\n        else output.with_block(function() {\n            output.indent();\n            stmt.print(output);\n            output.newline();\n        });\n    }\n\n    /* -----[ source map generators ]----- */\n\n    function DEFMAP(nodetype, generator) {\n        nodetype.forEach(function(nodetype) {\n            nodetype.DEFMETHOD(\"add_source_map\", generator);\n        });\n    }\n\n    DEFMAP([\n        // We could easily add info for ALL nodes, but it seems to me that\n        // would be quite wasteful, hence this noop in the base class.\n        AST_Node,\n        // since the label symbol will mark it\n        AST_LabeledStatement,\n        AST_Toplevel,\n    ], noop);\n\n    // XXX: I'm not exactly sure if we need it for all of these nodes,\n    // or if we should add even more.\n    DEFMAP([\n        AST_Array,\n        AST_BlockStatement,\n        AST_Catch,\n        AST_Class,\n        AST_Constant,\n        AST_Debugger,\n        AST_Definitions,\n        AST_Directive,\n        AST_Finally,\n        AST_Jump,\n        AST_Lambda,\n        AST_New,\n        AST_Object,\n        AST_StatementWithBody,\n        AST_Symbol,\n        AST_Switch,\n        AST_SwitchBranch,\n        AST_TemplateString,\n        AST_TemplateSegment,\n        AST_Try,\n    ], function(output) {\n        output.add_mapping(this.start);\n    });\n\n    DEFMAP([\n        AST_ObjectGetter,\n        AST_ObjectSetter,\n    ], function(output) {\n        output.add_mapping(this.start, this.key.name);\n    });\n\n    DEFMAP([ AST_ObjectProperty ], function(output) {\n        output.add_mapping(this.start, this.key);\n    });\n})();\n\nexport {\n    OutputStream,\n};\n"]},"metadata":{},"sourceType":"module"}