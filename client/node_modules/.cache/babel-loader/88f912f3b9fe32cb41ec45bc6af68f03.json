{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getPackageVersion = getPackageVersion;\n\nvar _fs = require(\"fs\");\n\nvar _findUp = _interopRequireDefault(require(\"next/dist/compiled/find-up\"));\n\nvar _json = _interopRequireDefault(require(\"next/dist/compiled/json5\"));\n\nvar path = _interopRequireWildcard(require(\"path\"));\n\nvar _resolveRequest = require(\"./resolve-request\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nlet cachedDeps;\n\nasync function getDependencies({\n  cwd\n}) {\n  if (cachedDeps) {\n    return cachedDeps;\n  }\n\n  const configurationPath = await (0, _findUp.default)('package.json', {\n    cwd\n  });\n\n  if (!configurationPath) {\n    return cachedDeps = {\n      dependencies: {},\n      devDependencies: {}\n    };\n  }\n\n  const content = await _fs.promises.readFile(configurationPath, 'utf-8');\n\n  const packageJson = _json.default.parse(content);\n\n  const {\n    dependencies = {},\n    devDependencies = {}\n  } = packageJson || {};\n  return cachedDeps = {\n    dependencies,\n    devDependencies\n  };\n}\n\nasync function getPackageVersion({\n  cwd,\n  name\n}) {\n  const {\n    dependencies,\n    devDependencies\n  } = await getDependencies({\n    cwd\n  });\n\n  if (!(dependencies[name] || devDependencies[name])) {\n    return null;\n  }\n\n  const cwd2 = cwd.endsWith(path.posix.sep) || cwd.endsWith(path.win32.sep) ? cwd : `${cwd}/`;\n\n  try {\n    var _JSON5$parse$version;\n\n    const targetPath = (0, _resolveRequest.resolveRequest)(`${name}/package.json`, cwd2);\n    const targetContent = await _fs.promises.readFile(targetPath, 'utf-8');\n    return (_JSON5$parse$version = _json.default.parse(targetContent).version) != null ? _JSON5$parse$version : null;\n  } catch (_unused) {\n    return null;\n  }\n}","map":{"version":3,"sources":["../../lib/get-package-version.ts"],"names":["configurationPath","cachedDeps","dependencies","devDependencies","content","fs","packageJson","JSON5","getDependencies","cwd2","cwd","path","targetPath","name","targetContent"],"mappings":";;;;;AAAA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,0BAAA,CAAA,CAAA;;AACA,IAAA,IAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA;;AAAA,IAAA,UAAA;;AAEA,eAAA,eAAA,CAA+B;AAA/B,EAAA;AAA+B,CAA/B,EAIqC;AACnC,MAAA,UAAA,EAAgB;AACd,WAAA,UAAA;AAGF;;AAAA,QAAMA,iBAAqC,GAAG,MAAM,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,cAAA,EAAuB;AAA3E,IAAA;AAA2E,GAAvB,CAApD;;AAGA,MAAI,CAAJ,iBAAA,EAAwB;AACtB,WAAQC,UAAU,GAAG;AAAEC,MAAAA,YAAY,EAAd,EAAA;AAAoBC,MAAAA,eAAe,EAAxD;AAAqB,KAArB;AAGF;;AAAA,QAAMC,OAAO,GAAG,MAAMC,GAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,iBAAAA,EAAtB,OAAsBA,CAAtB;;AACA,QAAMC,WAAgB,GAAGC,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAzB,OAAyBA,CAAzB;;AAEA,QAAM;AAAEL,IAAAA,YAAY,GAAd,EAAA;AAAqBC,IAAAA,eAAe,GAApC;AAAA,MAA8CG,WAAW,IAA/D,EAAA;AACA,SAAQL,UAAU,GAAG;AAAA,IAAA,YAAA;AAArB,IAAA;AAAqB,GAArB;AAGK;;AAAA,eAAA,iBAAA,CAAiC;AAAA,EAAA,GAAA;AAAjC,EAAA;AAAiC,CAAjC,EAMoB;AACzB,QAAM;AAAA,IAAA,YAAA;AAAA,IAAA;AAAA,MAAoC,MAAMO,eAAe,CAAC;AAAhE,IAAA;AAAgE,GAAD,CAA/D;;AACA,MAAI,EAAEN,YAAY,CAAZA,IAAY,CAAZA,IAAsBC,eAAe,CAA3C,IAA2C,CAAvC,CAAJ,EAAoD;AAClD,WAAA,IAAA;AAGF;;AAAA,QAAMM,IAAI,GACRC,GAAG,CAAHA,QAAAA,CAAaC,IAAI,CAAJA,KAAAA,CAAbD,GAAAA,KAAgCA,GAAG,CAAHA,QAAAA,CAAaC,IAAI,CAAJA,KAAAA,CAA7CD,GAAgCA,CAAhCA,GAAAA,GAAAA,GAEK,GAAEA,GAHT,GAAA;;AAKA,MAAI;AAAA,QAAA,oBAAA;;AACF,UAAME,UAAU,GAAG,CAAA,GAAA,eAAA,CAAA,cAAA,EAAgB,GAAEC,IAAlB,eAAA,EAAnB,IAAmB,CAAnB;AACA,UAAMC,aAAa,GAAG,MAAMT,GAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,UAAAA,EAA5B,OAA4BA,CAA5B;AACA,WAAA,CAAA,oBAAA,GAAOE,KAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CAAAA,aAAAA,EAAP,OAAA,KAAA,IAAA,GAAA,oBAAA,GAAA,IAAA;AACA,GAJF,CAIE,OAAA,OAAA,EAAM;AACN,WAAA,IAAA;AAEH;AAAA","sourcesContent":["import { promises as fs } from 'fs'\nimport findUp from 'next/dist/compiled/find-up'\nimport JSON5 from 'next/dist/compiled/json5'\nimport * as path from 'path'\nimport { resolveRequest } from './resolve-request'\n\ntype PackageJsonDependencies = {\n  dependencies: Record<string, string>\n  devDependencies: Record<string, string>\n}\n\nlet cachedDeps: PackageJsonDependencies\n\nasync function getDependencies({\n  cwd,\n}: {\n  cwd: string\n}): Promise<PackageJsonDependencies> {\n  if (cachedDeps) {\n    return cachedDeps\n  }\n\n  const configurationPath: string | undefined = await findUp('package.json', {\n    cwd,\n  })\n  if (!configurationPath) {\n    return (cachedDeps = { dependencies: {}, devDependencies: {} })\n  }\n\n  const content = await fs.readFile(configurationPath, 'utf-8')\n  const packageJson: any = JSON5.parse(content)\n\n  const { dependencies = {}, devDependencies = {} } = packageJson || {}\n  return (cachedDeps = { dependencies, devDependencies })\n}\n\nexport async function getPackageVersion({\n  cwd,\n  name,\n}: {\n  cwd: string\n  name: string\n}): Promise<string | null> {\n  const { dependencies, devDependencies } = await getDependencies({ cwd })\n  if (!(dependencies[name] || devDependencies[name])) {\n    return null\n  }\n\n  const cwd2 =\n    cwd.endsWith(path.posix.sep) || cwd.endsWith(path.win32.sep)\n      ? cwd\n      : `${cwd}/`\n\n  try {\n    const targetPath = resolveRequest(`${name}/package.json`, cwd2)\n    const targetContent = await fs.readFile(targetPath, 'utf-8')\n    return JSON5.parse(targetContent).version ?? null\n  } catch {\n    return null\n  }\n}\n"]},"metadata":{},"sourceType":"script"}