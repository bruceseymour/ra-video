{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.plugin = exports.unshiftLoader = exports.loader = void 0;\n\nvar _lodash = _interopRequireDefault(require(\"next/dist/compiled/lodash.curry\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst loader = (0, _lodash.default)(function loader(rule, config) {\n  if (!config.module) {\n    config.module = {\n      rules: []\n    };\n  }\n\n  if (rule.oneOf) {\n    const existing = config.module.rules.find(arrayRule => arrayRule.oneOf);\n\n    if (existing) {\n      existing.oneOf.push(...rule.oneOf);\n      return config;\n    }\n  }\n\n  config.module.rules.push(rule);\n  return config;\n});\nexports.loader = loader;\nconst unshiftLoader = (0, _lodash.default)(function unshiftLoader(rule, config) {\n  if (!config.module) {\n    config.module = {\n      rules: []\n    };\n  }\n\n  if (rule.oneOf) {\n    const existing = config.module.rules.find(arrayRule => arrayRule.oneOf);\n\n    if (existing) {\n      existing.oneOf.unshift(...rule.oneOf);\n      return config;\n    }\n  }\n\n  config.module.rules.unshift(rule);\n  return config;\n});\nexports.unshiftLoader = unshiftLoader;\nconst plugin = (0, _lodash.default)(function plugin(p, config) {\n  if (!config.plugins) {\n    config.plugins = [];\n  }\n\n  config.plugins.push(p);\n  return config;\n});\nexports.plugin = plugin;","map":{"version":3,"sources":["../../../../build/webpack/config/helpers.ts"],"names":["loader","config","rules","rule","existing","arrayRule","unshiftLoader","plugin"],"mappings":";;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;;;;;AAGO;;AAAA,MAAMA,MAAM,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAM,SAAA,MAAA,CAAA,IAAA,EAAA,MAAA,EAG1B;AACA,MAAI,CAACC,MAAM,CAAX,MAAA,EAAoB;AAClBA,IAAAA,MAAM,CAANA,MAAAA,GAAgB;AAAEC,MAAAA,KAAK,EAAvBD;AAAgB,KAAhBA;AAGF;;AAAA,MAAIE,IAAI,CAAR,KAAA,EAAgB;AACd,UAAMC,QAAQ,GAAGH,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAA0BI,SAAD,IAAeA,SAAS,CAAlE,KAAiBJ,CAAjB;;AACA,QAAA,QAAA,EAAc;AACZG,MAAAA,QAAQ,CAARA,KAAAA,CAAAA,IAAAA,CAAqB,GAAGD,IAAI,CAA5BC,KAAAA;AACA,aAAA,MAAA;AAEH;AAEDH;;AAAAA,EAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,IAAAA;AACA,SAAA,MAAA;AAjBK,CAAe,CAAf;;AAoBA,MAAMK,aAAa,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAM,SAAA,aAAA,CAAA,IAAA,EAAA,MAAA,EAGjC;AACA,MAAI,CAACL,MAAM,CAAX,MAAA,EAAoB;AAClBA,IAAAA,MAAM,CAANA,MAAAA,GAAgB;AAAEC,MAAAA,KAAK,EAAvBD;AAAgB,KAAhBA;AAGF;;AAAA,MAAIE,IAAI,CAAR,KAAA,EAAgB;AACd,UAAMC,QAAQ,GAAGH,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAA0BI,SAAD,IAAeA,SAAS,CAAlE,KAAiBJ,CAAjB;;AACA,QAAA,QAAA,EAAc;AACZG,MAAAA,QAAQ,CAARA,KAAAA,CAAAA,OAAAA,CAAwB,GAAGD,IAAI,CAA/BC,KAAAA;AACA,aAAA,MAAA;AAEH;AAEDH;;AAAAA,EAAAA,MAAM,CAANA,MAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA;AACA,SAAA,MAAA;AAjBK,CAAsB,CAAtB;;AAoBA,MAAMM,MAAM,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAM,SAAA,MAAA,CAAA,CAAA,EAAA,MAAA,EAAkD;AAC5E,MAAI,CAACN,MAAM,CAAX,OAAA,EAAqB;AACnBA,IAAAA,MAAM,CAANA,OAAAA,GAAAA,EAAAA;AAEFA;;AAAAA,EAAAA,MAAM,CAANA,OAAAA,CAAAA,IAAAA,CAAAA,CAAAA;AACA,SAAA,MAAA;AALK,CAAe,CAAf","sourcesContent":["import curry from 'next/dist/compiled/lodash.curry'\nimport { Configuration, Plugin, RuleSetRule } from 'webpack'\n\nexport const loader = curry(function loader(\n  rule: RuleSetRule,\n  config: Configuration\n) {\n  if (!config.module) {\n    config.module = { rules: [] }\n  }\n\n  if (rule.oneOf) {\n    const existing = config.module.rules.find((arrayRule) => arrayRule.oneOf)\n    if (existing) {\n      existing.oneOf!.push(...rule.oneOf)\n      return config\n    }\n  }\n\n  config.module.rules.push(rule)\n  return config\n})\n\nexport const unshiftLoader = curry(function unshiftLoader(\n  rule: RuleSetRule,\n  config: Configuration\n) {\n  if (!config.module) {\n    config.module = { rules: [] }\n  }\n\n  if (rule.oneOf) {\n    const existing = config.module.rules.find((arrayRule) => arrayRule.oneOf)\n    if (existing) {\n      existing.oneOf!.unshift(...rule.oneOf)\n      return config\n    }\n  }\n\n  config.module.rules.unshift(rule)\n  return config\n})\n\nexport const plugin = curry(function plugin(p: Plugin, config: Configuration) {\n  if (!config.plugins) {\n    config.plugins = []\n  }\n  config.plugins.push(p)\n  return config\n})\n"]},"metadata":{},"sourceType":"script"}