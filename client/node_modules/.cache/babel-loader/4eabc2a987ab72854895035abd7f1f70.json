{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.collectPages = collectPages;\nexports.printTreeView = printTreeView;\nexports.printCustomRoutes = printCustomRoutes;\nexports.difference = difference;\nexports.getJsPageSizeInKb = getJsPageSizeInKb;\nexports.buildStaticPaths = buildStaticPaths;\nexports.isPageStatic = isPageStatic;\nexports.hasCustomGetInitialProps = hasCustomGetInitialProps;\nexports.getNamedExports = getNamedExports;\n\nrequire(\"../next-server/server/node-polyfill-fetch\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _gzipSize = _interopRequireDefault(require(\"next/dist/compiled/gzip-size\"));\n\nvar _textTable = _interopRequireDefault(require(\"next/dist/compiled/text-table\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _reactIs = require(\"react-is\");\n\nvar _stripAnsi = _interopRequireDefault(require(\"next/dist/compiled/strip-ansi\"));\n\nvar _constants = require(\"../lib/constants\");\n\nvar _prettyBytes = _interopRequireDefault(require(\"../lib/pretty-bytes\"));\n\nvar _recursiveReaddir = require(\"../lib/recursive-readdir\");\n\nvar _utils = require(\"../next-server/lib/router/utils\");\n\nvar _isDynamic = require(\"../next-server/lib/router/utils/is-dynamic\");\n\nvar _escapePathDelimiters = _interopRequireDefault(require(\"../next-server/lib/router/utils/escape-path-delimiters\"));\n\nvar _findPageFile = require(\"../server/lib/find-page-file\");\n\nvar _normalizePagePath = require(\"../next-server/server/normalize-page-path\");\n\nvar _normalizeTrailingSlash = require(\"../client/normalize-trailing-slash\");\n\nvar _normalizeLocalePath = require(\"../next-server/lib/i18n/normalize-locale-path\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst fileGzipStats = {};\n\nconst fsStatGzip = file => {\n  if (fileGzipStats[file]) return fileGzipStats[file];\n  fileGzipStats[file] = _gzipSize.default.file(file);\n  return fileGzipStats[file];\n};\n\nfunction collectPages(directory, pageExtensions) {\n  return (0, _recursiveReaddir.recursiveReadDir)(directory, new RegExp(`\\\\.(?:${pageExtensions.join('|')})$`));\n}\n\nasync function printTreeView(list, pageInfos, serverless, {\n  distPath,\n  buildId,\n  pagesDir,\n  pageExtensions,\n  buildManifest,\n  useStatic404\n}) {\n  const getPrettySize = _size => {\n    const size = (0, _prettyBytes.default)(_size); // green for 0-130kb\n\n    if (_size < 130 * 1000) return _chalk.default.green(size); // yellow for 130-170kb\n\n    if (_size < 170 * 1000) return _chalk.default.yellow(size); // red for >= 170kb\n\n    return _chalk.default.red.bold(size);\n  };\n\n  const getCleanName = fileName => fileName // Trim off `static/`\n  .replace(/^static\\//, '') // Re-add `static/` for root files\n  .replace(/^<buildId>/, 'static') // Remove file hash\n  .replace(/[.-]([0-9a-z]{6})[0-9a-z]{14}(?=\\.)/, '.$1');\n\n  const messages = [['Page', 'Size', 'First Load JS'].map(entry => _chalk.default.underline(entry))];\n  const hasCustomApp = await (0, _findPageFile.findPageFile)(pagesDir, '/_app', pageExtensions);\n  pageInfos.set('/404', { ...(pageInfos.get('/404') || pageInfos.get('/_error')),\n    static: useStatic404\n  });\n\n  if (!list.includes('/404')) {\n    list = [...list, '/404'];\n  }\n\n  const sizeData = await computeFromManifest(buildManifest, distPath, pageInfos);\n  const pageList = list.slice().filter(e => !(e === '/_document' || e === '/_error' || !hasCustomApp && e === '/_app')).sort((a, b) => a.localeCompare(b));\n  pageList.forEach((item, i, arr) => {\n    var _buildManifest$pages$, _pageInfo$ssgPageRout;\n\n    const symbol = i === 0 ? arr.length === 1 ? '─' : '┌' : i === arr.length - 1 ? '└' : '├';\n    const pageInfo = pageInfos.get(item);\n    const ampFirst = buildManifest.ampFirstPages.includes(item);\n    messages.push([`${symbol} ${item === '/_app' ? ' ' : pageInfo != null && pageInfo.static ? '○' : pageInfo != null && pageInfo.isSsg ? '●' : 'λ'} ${pageInfo != null && pageInfo.initialRevalidateSeconds ? `${item} (ISR: ${pageInfo == null ? void 0 : pageInfo.initialRevalidateSeconds} Seconds)` : item}`, pageInfo ? ampFirst ? _chalk.default.cyan('AMP') : pageInfo.size >= 0 ? (0, _prettyBytes.default)(pageInfo.size) : '' : '', pageInfo ? ampFirst ? _chalk.default.cyan('AMP') : pageInfo.size >= 0 ? getPrettySize(pageInfo.totalSize) : '' : '']);\n    const uniqueCssFiles = ((_buildManifest$pages$ = buildManifest.pages[item]) == null ? void 0 : _buildManifest$pages$.filter(file => file.endsWith('.css') && sizeData.uniqueFiles.includes(file))) || [];\n\n    if (uniqueCssFiles.length > 0) {\n      const contSymbol = i === arr.length - 1 ? ' ' : '├';\n      uniqueCssFiles.forEach((file, index, {\n        length\n      }) => {\n        const innerSymbol = index === length - 1 ? '└' : '├';\n        messages.push([`${contSymbol}   ${innerSymbol} ${getCleanName(file)}`, (0, _prettyBytes.default)(sizeData.sizeUniqueFiles[file]), '']);\n      });\n    }\n\n    if (pageInfo != null && (_pageInfo$ssgPageRout = pageInfo.ssgPageRoutes) != null && _pageInfo$ssgPageRout.length) {\n      const totalRoutes = pageInfo.ssgPageRoutes.length;\n      const previewPages = totalRoutes === 4 ? 4 : 3;\n      const contSymbol = i === arr.length - 1 ? ' ' : '├';\n      const routes = pageInfo.ssgPageRoutes.slice(0, previewPages);\n\n      if (totalRoutes > previewPages) {\n        const remaining = totalRoutes - previewPages;\n        routes.push(`[+${remaining} more paths]`);\n      }\n\n      routes.forEach((slug, index, {\n        length\n      }) => {\n        const innerSymbol = index === length - 1 ? '└' : '├';\n        messages.push([`${contSymbol}   ${innerSymbol} ${slug}`, '', '']);\n      });\n    }\n  });\n  const sharedFilesSize = sizeData.sizeCommonFiles;\n  const sharedFiles = sizeData.sizeCommonFile;\n  messages.push(['+ First Load JS shared by all', getPrettySize(sharedFilesSize), '']);\n  const sharedFileKeys = Object.keys(sharedFiles);\n  const sharedCssFiles = [];\n  [...sharedFileKeys.filter(file => {\n    if (file.endsWith('.css')) {\n      sharedCssFiles.push(file);\n      return false;\n    }\n\n    return true;\n  }).map(e => e.replace(buildId, '<buildId>')).sort(), ...sharedCssFiles.map(e => e.replace(buildId, '<buildId>')).sort()].forEach((fileName, index, {\n    length\n  }) => {\n    const innerSymbol = index === length - 1 ? '└' : '├';\n    const originalName = fileName.replace('<buildId>', buildId);\n    const cleanName = getCleanName(fileName);\n    messages.push([`  ${innerSymbol} ${cleanName}`, (0, _prettyBytes.default)(sharedFiles[originalName]), '']);\n  });\n  console.log((0, _textTable.default)(messages, {\n    align: ['l', 'l', 'r'],\n    stringLength: str => (0, _stripAnsi.default)(str).length\n  }));\n  console.log();\n  console.log((0, _textTable.default)([['λ', serverless ? '(Lambda)' : '(Server)', `server-side renders at runtime (uses ${_chalk.default.cyan('getInitialProps')} or ${_chalk.default.cyan('getServerSideProps')})`], ['○', '(Static)', 'automatically rendered as static HTML (uses no initial props)'], ['●', '(SSG)', `automatically generated as static HTML + JSON (uses ${_chalk.default.cyan('getStaticProps')})`], ['', '(ISR)', `incremental static regeneration (uses revalidate in ${_chalk.default.cyan('getStaticProps')})`]], {\n    align: ['l', 'l', 'l'],\n    stringLength: str => (0, _stripAnsi.default)(str).length\n  }));\n  console.log();\n}\n\nfunction printCustomRoutes({\n  redirects,\n  rewrites,\n  headers\n}) {\n  const printRoutes = (routes, type) => {\n    const isRedirects = type === 'Redirects';\n    const isHeaders = type === 'Headers';\n    console.log(_chalk.default.underline(type));\n    console.log();\n    /*\n    ┌ source\n    ├ permanent/statusCode\n    └ destination\n    */\n\n    const routesStr = routes.map(route => {\n      let routeStr = `┌ source: ${route.source}\\n`;\n\n      if (!isHeaders) {\n        const r = route;\n        routeStr += `${isRedirects ? '├' : '└'} destination: ${r.destination}\\n`;\n      }\n\n      if (isRedirects) {\n        const r = route;\n        routeStr += `└ ${r.statusCode ? `status: ${r.statusCode}` : `permanent: ${r.permanent}`}\\n`;\n      }\n\n      if (isHeaders) {\n        const r = route;\n        routeStr += `└ headers:\\n`;\n\n        for (let i = 0; i < r.headers.length; i++) {\n          const header = r.headers[i];\n          const last = i === headers.length - 1;\n          routeStr += `  ${last ? '└' : '├'} ${header.key}: ${header.value}\\n`;\n        }\n      }\n\n      return routeStr;\n    }).join('\\n');\n    console.log(routesStr, '\\n');\n  };\n\n  if (redirects.length) {\n    printRoutes(redirects, 'Redirects');\n  }\n\n  if (rewrites.length) {\n    printRoutes(rewrites, 'Rewrites');\n  }\n\n  if (headers.length) {\n    printRoutes(headers, 'Headers');\n  }\n}\n\nlet cachedBuildManifest;\nlet lastCompute;\nlet lastComputePageInfo;\n\nasync function computeFromManifest(manifest, distPath, pageInfos) {\n  if (Object.is(cachedBuildManifest, manifest) && lastComputePageInfo === !!pageInfos) {\n    return lastCompute;\n  }\n\n  let expected = 0;\n  const files = new Map();\n  Object.keys(manifest.pages).forEach(key => {\n    if (pageInfos) {\n      const pageInfo = pageInfos.get(key); // don't include AMP pages since they don't rely on shared bundles\n      // AMP First pages are not under the pageInfos key\n\n      if (pageInfo != null && pageInfo.isHybridAmp) {\n        return;\n      }\n    }\n\n    ++expected;\n    manifest.pages[key].forEach(file => {\n      if (key === '/_app') {\n        files.set(file, Infinity);\n      } else if (files.has(file)) {\n        files.set(file, files.get(file) + 1);\n      } else {\n        files.set(file, 1);\n      }\n    });\n  });\n  const commonFiles = [...files.entries()].filter(([, len]) => len === expected || len === Infinity).map(([f]) => f);\n  const uniqueFiles = [...files.entries()].filter(([, len]) => len === 1).map(([f]) => f);\n  let stats;\n\n  try {\n    stats = await Promise.all(commonFiles.map(async f => [f, await fsStatGzip(_path.default.join(distPath, f))]));\n  } catch (_) {\n    stats = [];\n  }\n\n  let uniqueStats;\n\n  try {\n    uniqueStats = await Promise.all(uniqueFiles.map(async f => [f, await fsStatGzip(_path.default.join(distPath, f))]));\n  } catch (_) {\n    uniqueStats = [];\n  }\n\n  lastCompute = {\n    commonFiles,\n    uniqueFiles,\n    sizeUniqueFiles: uniqueStats.reduce((obj, n) => Object.assign(obj, {\n      [n[0]]: n[1]\n    }), {}),\n    sizeCommonFile: stats.reduce((obj, n) => Object.assign(obj, {\n      [n[0]]: n[1]\n    }), {}),\n    sizeCommonFiles: stats.reduce((size, [f, stat]) => {\n      if (f.endsWith('.css')) return size;\n      return size + stat;\n    }, 0)\n  };\n  cachedBuildManifest = manifest;\n  lastComputePageInfo = !!pageInfos;\n  return lastCompute;\n}\n\nfunction difference(main, sub) {\n  const a = new Set(main);\n  const b = new Set(sub);\n  return [...a].filter(x => !b.has(x));\n}\n\nfunction intersect(main, sub) {\n  const a = new Set(main);\n  const b = new Set(sub);\n  return [...new Set([...a].filter(x => b.has(x)))];\n}\n\nfunction sum(a) {\n  return a.reduce((size, stat) => size + stat, 0);\n}\n\nasync function getJsPageSizeInKb(page, distPath, buildManifest) {\n  const data = await computeFromManifest(buildManifest, distPath);\n\n  const fnFilterJs = entry => entry.endsWith('.js');\n\n  const pageFiles = (buildManifest.pages[(0, _normalizePagePath.denormalizePagePath)(page)] || []).filter(fnFilterJs);\n  const appFiles = (buildManifest.pages['/_app'] || []).filter(fnFilterJs);\n\n  const fnMapRealPath = dep => `${distPath}/${dep}`;\n\n  const allFilesReal = [...new Set([...pageFiles, ...appFiles])].map(fnMapRealPath);\n  const selfFilesReal = difference(intersect(pageFiles, data.uniqueFiles), data.commonFiles).map(fnMapRealPath);\n\n  try {\n    // Doesn't use `Promise.all`, as we'd double compute duplicate files. This\n    // function is memoized, so the second one will instantly resolve.\n    const allFilesSize = sum(await Promise.all(allFilesReal.map(fsStatGzip)));\n    const selfFilesSize = sum(await Promise.all(selfFilesReal.map(fsStatGzip)));\n    return [selfFilesSize, allFilesSize];\n  } catch (_) {}\n\n  return [-1, -1];\n}\n\nasync function buildStaticPaths(page, getStaticPaths, locales, defaultLocale) {\n  const prerenderPaths = new Set();\n  const encodedPrerenderPaths = new Set();\n\n  const _routeRegex = (0, _utils.getRouteRegex)(page);\n\n  const _routeMatcher = (0, _utils.getRouteMatcher)(_routeRegex); // Get the default list of allowed params.\n\n\n  const _validParamKeys = Object.keys(_routeMatcher(page));\n\n  const staticPathsResult = await getStaticPaths({\n    locales,\n    defaultLocale\n  });\n  const expectedReturnVal = `Expected: { paths: [], fallback: boolean }\\n` + `See here for more info: https://err.sh/vercel/next.js/invalid-getstaticpaths-value`;\n\n  if (!staticPathsResult || typeof staticPathsResult !== 'object' || Array.isArray(staticPathsResult)) {\n    throw new Error(`Invalid value returned from getStaticPaths in ${page}. Received ${typeof staticPathsResult} ${expectedReturnVal}`);\n  }\n\n  const invalidStaticPathKeys = Object.keys(staticPathsResult).filter(key => !(key === 'paths' || key === 'fallback'));\n\n  if (invalidStaticPathKeys.length > 0) {\n    throw new Error(`Extra keys returned from getStaticPaths in ${page} (${invalidStaticPathKeys.join(', ')}) ${expectedReturnVal}`);\n  }\n\n  if (!(typeof staticPathsResult.fallback === 'boolean' || staticPathsResult.fallback === 'blocking')) {\n    throw new Error(`The \\`fallback\\` key must be returned from getStaticPaths in ${page}.\\n` + expectedReturnVal);\n  }\n\n  const toPrerender = staticPathsResult.paths;\n\n  if (!Array.isArray(toPrerender)) {\n    throw new Error(`Invalid \\`paths\\` value returned from getStaticPaths in ${page}.\\n` + `\\`paths\\` must be an array of strings or objects of shape { params: [key: string]: string }`);\n  }\n\n  toPrerender.forEach(entry => {\n    // For a string-provided path, we must make sure it matches the dynamic\n    // route.\n    if (typeof entry === 'string') {\n      entry = (0, _normalizeTrailingSlash.removePathTrailingSlash)(entry);\n      const localePathResult = (0, _normalizeLocalePath.normalizeLocalePath)(entry, locales);\n      let cleanedEntry = entry;\n\n      if (localePathResult.detectedLocale) {\n        cleanedEntry = entry.substr(localePathResult.detectedLocale.length + 1);\n      } else if (defaultLocale) {\n        entry = `/${defaultLocale}${entry}`;\n      }\n\n      const result = _routeMatcher(cleanedEntry);\n\n      if (!result) {\n        throw new Error(`The provided path \\`${cleanedEntry}\\` does not match the page: \\`${page}\\`.`);\n      } // If leveraging the string paths variant the entry should already be\n      // encoded so we decode the segments ensuring we only escape path\n      // delimiters\n\n\n      prerenderPaths.add(entry.split('/').map(segment => (0, _escapePathDelimiters.default)(decodeURIComponent(segment), true)).join('/'));\n      encodedPrerenderPaths.add(entry);\n    } // For the object-provided path, we must make sure it specifies all\n    // required keys.\n    else {\n        const invalidKeys = Object.keys(entry).filter(key => key !== 'params' && key !== 'locale');\n\n        if (invalidKeys.length) {\n          throw new Error(`Additional keys were returned from \\`getStaticPaths\\` in page \"${page}\". ` + `URL Parameters intended for this dynamic route must be nested under the \\`params\\` key, i.e.:` + `\\n\\n\\treturn { params: { ${_validParamKeys.map(k => `${k}: ...`).join(', ')} } }` + `\\n\\nKeys that need to be moved: ${invalidKeys.join(', ')}.\\n`);\n        }\n\n        const {\n          params = {}\n        } = entry;\n        let builtPage = page;\n        let encodedBuiltPage = page;\n\n        _validParamKeys.forEach(validParamKey => {\n          const {\n            repeat,\n            optional\n          } = _routeRegex.groups[validParamKey];\n          let paramValue = params[validParamKey];\n\n          if (optional && params.hasOwnProperty(validParamKey) && (paramValue === null || paramValue === undefined || paramValue === false)) {\n            paramValue = [];\n          }\n\n          if (repeat && !Array.isArray(paramValue) || !repeat && typeof paramValue !== 'string') {\n            throw new Error(`A required parameter (${validParamKey}) was not provided as ${repeat ? 'an array' : 'a string'} in getStaticPaths for ${page}`);\n          }\n\n          let replaced = `[${repeat ? '...' : ''}${validParamKey}]`;\n\n          if (optional) {\n            replaced = `[${replaced}]`;\n          }\n\n          builtPage = builtPage.replace(replaced, repeat ? paramValue.map(segment => (0, _escapePathDelimiters.default)(segment, true)).join('/') : (0, _escapePathDelimiters.default)(paramValue, true)).replace(/(?!^)\\/$/, '');\n          encodedBuiltPage = encodedBuiltPage.replace(replaced, repeat ? paramValue.map(encodeURIComponent).join('/') : encodeURIComponent(paramValue)).replace(/(?!^)\\/$/, '');\n        });\n\n        if (entry.locale && !(locales != null && locales.includes(entry.locale))) {\n          throw new Error(`Invalid locale returned from getStaticPaths for ${page}, the locale ${entry.locale} is not specified in next.config.js`);\n        }\n\n        const curLocale = entry.locale || defaultLocale || '';\n        prerenderPaths.add(`${curLocale ? `/${curLocale}` : ''}${curLocale && builtPage === '/' ? '' : builtPage}`);\n        encodedPrerenderPaths.add(`${curLocale ? `/${curLocale}` : ''}${curLocale && encodedBuiltPage === '/' ? '' : encodedBuiltPage}`);\n      }\n  });\n  return {\n    paths: [...prerenderPaths],\n    fallback: staticPathsResult.fallback,\n    encodedPaths: [...encodedPrerenderPaths]\n  };\n}\n\nasync function isPageStatic(page, serverBundle, runtimeEnvConfig, locales, defaultLocale) {\n  try {\n    require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig);\n\n    const mod = await require(serverBundle);\n    const Comp = await (mod.default || mod);\n\n    if (!Comp || !(0, _reactIs.isValidElementType)(Comp) || typeof Comp === 'string') {\n      throw new Error('INVALID_DEFAULT_EXPORT');\n    }\n\n    const hasGetInitialProps = !!Comp.getInitialProps;\n    const hasStaticProps = !!(await mod.getStaticProps);\n    const hasStaticPaths = !!(await mod.getStaticPaths);\n    const hasServerProps = !!(await mod.getServerSideProps);\n    const hasLegacyServerProps = !!(await mod.unstable_getServerProps);\n    const hasLegacyStaticProps = !!(await mod.unstable_getStaticProps);\n    const hasLegacyStaticPaths = !!(await mod.unstable_getStaticPaths);\n    const hasLegacyStaticParams = !!(await mod.unstable_getStaticParams);\n\n    if (hasLegacyStaticParams) {\n      throw new Error(`unstable_getStaticParams was replaced with getStaticPaths. Please update your code.`);\n    }\n\n    if (hasLegacyStaticPaths) {\n      throw new Error(`unstable_getStaticPaths was replaced with getStaticPaths. Please update your code.`);\n    }\n\n    if (hasLegacyStaticProps) {\n      throw new Error(`unstable_getStaticProps was replaced with getStaticProps. Please update your code.`);\n    }\n\n    if (hasLegacyServerProps) {\n      throw new Error(`unstable_getServerProps was replaced with getServerSideProps. Please update your code.`);\n    } // A page cannot be prerendered _and_ define a data requirement. That's\n    // contradictory!\n\n\n    if (hasGetInitialProps && hasStaticProps) {\n      throw new Error(_constants.SSG_GET_INITIAL_PROPS_CONFLICT);\n    }\n\n    if (hasGetInitialProps && hasServerProps) {\n      throw new Error(_constants.SERVER_PROPS_GET_INIT_PROPS_CONFLICT);\n    }\n\n    if (hasStaticProps && hasServerProps) {\n      throw new Error(_constants.SERVER_PROPS_SSG_CONFLICT);\n    }\n\n    const pageIsDynamic = (0, _isDynamic.isDynamicRoute)(page); // A page cannot have static parameters if it is not a dynamic page.\n\n    if (hasStaticProps && hasStaticPaths && !pageIsDynamic) {\n      throw new Error(`getStaticPaths can only be used with dynamic pages, not '${page}'.` + `\\nLearn more: https://nextjs.org/docs/routing/dynamic-routes`);\n    }\n\n    if (hasStaticProps && pageIsDynamic && !hasStaticPaths) {\n      throw new Error(`getStaticPaths is required for dynamic SSG pages and is missing for '${page}'.` + `\\nRead more: https://err.sh/next.js/invalid-getstaticpaths-value`);\n    }\n\n    let prerenderRoutes;\n    let encodedPrerenderRoutes;\n    let prerenderFallback;\n\n    if (hasStaticProps && hasStaticPaths) {\n      ;\n      ({\n        paths: prerenderRoutes,\n        fallback: prerenderFallback,\n        encodedPaths: encodedPrerenderRoutes\n      } = await buildStaticPaths(page, mod.getStaticPaths, locales, defaultLocale));\n    }\n\n    const isNextImageImported = global.__NEXT_IMAGE_IMPORTED;\n    const config = mod.config || {};\n    return {\n      isStatic: !hasStaticProps && !hasGetInitialProps && !hasServerProps,\n      isHybridAmp: config.amp === 'hybrid',\n      isAmpOnly: config.amp === true,\n      prerenderRoutes,\n      prerenderFallback,\n      encodedPrerenderRoutes,\n      hasStaticProps,\n      hasServerProps,\n      isNextImageImported\n    };\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') return {};\n    throw err;\n  }\n}\n\nasync function hasCustomGetInitialProps(bundle, runtimeEnvConfig, checkingApp) {\n  require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig);\n\n  let mod = require(bundle);\n\n  if (checkingApp) {\n    mod = (await mod._app) || mod.default || mod;\n  } else {\n    mod = mod.default || mod;\n  }\n\n  mod = await mod;\n  return mod.getInitialProps !== mod.origGetInitialProps;\n}\n\nfunction getNamedExports(bundle, runtimeEnvConfig) {\n  require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig);\n\n  return Object.keys(require(bundle));\n}","map":{"version":3,"sources":["../../build/utils.ts"],"names":["fileGzipStats","fsStatGzip","file","gzipSize","pageExtensions","getPrettySize","_size","size","chalk","getCleanName","fileName","messages","entry","hasCustomApp","pageInfos","static","list","sizeData","computeFromManifest","pageList","e","a","symbol","i","arr","pageInfo","ampFirst","buildManifest","item","initialRevalidateSeconds","uniqueCssFiles","contSymbol","innerSymbol","index","length","totalRoutes","previewPages","routes","remaining","slug","sharedFilesSize","sharedFiles","sharedFileKeys","Object","sharedCssFiles","originalName","cleanName","console","align","stringLength","str","serverless","printRoutes","isRedirects","type","isHeaders","routesStr","route","routeStr","source","r","destination","statusCode","permanent","header","last","headers","key","value","redirects","rewrites","lastComputePageInfo","expected","files","manifest","commonFiles","len","uniqueFiles","stats","Promise","path","uniqueStats","lastCompute","sizeUniqueFiles","n","sizeCommonFile","sizeCommonFiles","f","cachedBuildManifest","b","x","data","fnFilterJs","pageFiles","appFiles","fnMapRealPath","dep","distPath","allFilesReal","selfFilesReal","difference","intersect","allFilesSize","sum","selfFilesSize","prerenderPaths","encodedPrerenderPaths","_routeRegex","_routeMatcher","_validParamKeys","staticPathsResult","getStaticPaths","expectedReturnVal","Array","page","invalidStaticPathKeys","toPrerender","localePathResult","cleanedEntry","defaultLocale","result","segment","decodeURIComponent","invalidKeys","k","params","builtPage","encodedBuiltPage","validParamKey","paramValue","optional","repeat","replaced","encodeURIComponent","locales","locale","curLocale","paths","fallback","encodedPaths","require","mod","Comp","hasGetInitialProps","hasStaticProps","hasStaticPaths","hasServerProps","hasLegacyServerProps","hasLegacyStaticProps","hasLegacyStaticPaths","hasLegacyStaticParams","SSG_GET_INITIAL_PROPS_CONFLICT","SERVER_PROPS_GET_INIT_PROPS_CONFLICT","SERVER_PROPS_SSG_CONFLICT","pageIsDynamic","buildStaticPaths","isNextImageImported","global","config","isStatic","isHybridAmp","isAmpOnly","err"],"mappings":"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","sourcesContent":["import '../next-server/server/node-polyfill-fetch'\nimport chalk from 'chalk'\nimport gzipSize from 'next/dist/compiled/gzip-size'\nimport textTable from 'next/dist/compiled/text-table'\nimport path from 'path'\nimport { isValidElementType } from 'react-is'\nimport stripAnsi from 'next/dist/compiled/strip-ansi'\nimport {\n  Redirect,\n  Rewrite,\n  Header,\n  CustomRoutes,\n} from '../lib/load-custom-routes'\nimport {\n  SSG_GET_INITIAL_PROPS_CONFLICT,\n  SERVER_PROPS_GET_INIT_PROPS_CONFLICT,\n  SERVER_PROPS_SSG_CONFLICT,\n} from '../lib/constants'\nimport prettyBytes from '../lib/pretty-bytes'\nimport { recursiveReadDir } from '../lib/recursive-readdir'\nimport { getRouteMatcher, getRouteRegex } from '../next-server/lib/router/utils'\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\nimport escapePathDelimiters from '../next-server/lib/router/utils/escape-path-delimiters'\nimport { findPageFile } from '../server/lib/find-page-file'\nimport { GetStaticPaths } from 'next/types'\nimport { denormalizePagePath } from '../next-server/server/normalize-page-path'\nimport { BuildManifest } from '../next-server/server/get-page-files'\nimport { removePathTrailingSlash } from '../client/normalize-trailing-slash'\nimport { UnwrapPromise } from '../lib/coalesced-function'\nimport { normalizeLocalePath } from '../next-server/lib/i18n/normalize-locale-path'\n\nconst fileGzipStats: { [k: string]: Promise<number> } = {}\nconst fsStatGzip = (file: string) => {\n  if (fileGzipStats[file]) return fileGzipStats[file]\n  fileGzipStats[file] = gzipSize.file(file)\n  return fileGzipStats[file]\n}\n\nexport function collectPages(\n  directory: string,\n  pageExtensions: string[]\n): Promise<string[]> {\n  return recursiveReadDir(\n    directory,\n    new RegExp(`\\\\.(?:${pageExtensions.join('|')})$`)\n  )\n}\n\nexport interface PageInfo {\n  isHybridAmp?: boolean\n  size: number\n  totalSize: number\n  static: boolean\n  isSsg: boolean\n  ssgPageRoutes: string[] | null\n  initialRevalidateSeconds: number | false\n}\n\nexport async function printTreeView(\n  list: readonly string[],\n  pageInfos: Map<string, PageInfo>,\n  serverless: boolean,\n  {\n    distPath,\n    buildId,\n    pagesDir,\n    pageExtensions,\n    buildManifest,\n    useStatic404,\n  }: {\n    distPath: string\n    buildId: string\n    pagesDir: string\n    pageExtensions: string[]\n    buildManifest: BuildManifest\n    useStatic404: boolean\n  }\n) {\n  const getPrettySize = (_size: number): string => {\n    const size = prettyBytes(_size)\n    // green for 0-130kb\n    if (_size < 130 * 1000) return chalk.green(size)\n    // yellow for 130-170kb\n    if (_size < 170 * 1000) return chalk.yellow(size)\n    // red for >= 170kb\n    return chalk.red.bold(size)\n  }\n\n  const getCleanName = (fileName: string) =>\n    fileName\n      // Trim off `static/`\n      .replace(/^static\\//, '')\n      // Re-add `static/` for root files\n      .replace(/^<buildId>/, 'static')\n      // Remove file hash\n      .replace(/[.-]([0-9a-z]{6})[0-9a-z]{14}(?=\\.)/, '.$1')\n\n  const messages: [string, string, string][] = [\n    ['Page', 'Size', 'First Load JS'].map((entry) =>\n      chalk.underline(entry)\n    ) as [string, string, string],\n  ]\n\n  const hasCustomApp = await findPageFile(pagesDir, '/_app', pageExtensions)\n\n  pageInfos.set('/404', {\n    ...(pageInfos.get('/404') || pageInfos.get('/_error')),\n    static: useStatic404,\n  } as any)\n\n  if (!list.includes('/404')) {\n    list = [...list, '/404']\n  }\n\n  const sizeData = await computeFromManifest(buildManifest, distPath, pageInfos)\n\n  const pageList = list\n    .slice()\n    .filter(\n      (e) =>\n        !(\n          e === '/_document' ||\n          e === '/_error' ||\n          (!hasCustomApp && e === '/_app')\n        )\n    )\n    .sort((a, b) => a.localeCompare(b))\n\n  pageList.forEach((item, i, arr) => {\n    const symbol =\n      i === 0\n        ? arr.length === 1\n          ? '─'\n          : '┌'\n        : i === arr.length - 1\n        ? '└'\n        : '├'\n\n    const pageInfo = pageInfos.get(item)\n    const ampFirst = buildManifest.ampFirstPages.includes(item)\n\n    messages.push([\n      `${symbol} ${\n        item === '/_app'\n          ? ' '\n          : pageInfo?.static\n          ? '○'\n          : pageInfo?.isSsg\n          ? '●'\n          : 'λ'\n      } ${\n        pageInfo?.initialRevalidateSeconds\n          ? `${item} (ISR: ${pageInfo?.initialRevalidateSeconds} Seconds)`\n          : item\n      }`,\n      pageInfo\n        ? ampFirst\n          ? chalk.cyan('AMP')\n          : pageInfo.size >= 0\n          ? prettyBytes(pageInfo.size)\n          : ''\n        : '',\n      pageInfo\n        ? ampFirst\n          ? chalk.cyan('AMP')\n          : pageInfo.size >= 0\n          ? getPrettySize(pageInfo.totalSize)\n          : ''\n        : '',\n    ])\n\n    const uniqueCssFiles =\n      buildManifest.pages[item]?.filter(\n        (file) => file.endsWith('.css') && sizeData.uniqueFiles.includes(file)\n      ) || []\n\n    if (uniqueCssFiles.length > 0) {\n      const contSymbol = i === arr.length - 1 ? ' ' : '├'\n\n      uniqueCssFiles.forEach((file, index, { length }) => {\n        const innerSymbol = index === length - 1 ? '└' : '├'\n        messages.push([\n          `${contSymbol}   ${innerSymbol} ${getCleanName(file)}`,\n          prettyBytes(sizeData.sizeUniqueFiles[file]),\n          '',\n        ])\n      })\n    }\n\n    if (pageInfo?.ssgPageRoutes?.length) {\n      const totalRoutes = pageInfo.ssgPageRoutes.length\n      const previewPages = totalRoutes === 4 ? 4 : 3\n      const contSymbol = i === arr.length - 1 ? ' ' : '├'\n\n      const routes = pageInfo.ssgPageRoutes.slice(0, previewPages)\n      if (totalRoutes > previewPages) {\n        const remaining = totalRoutes - previewPages\n        routes.push(`[+${remaining} more paths]`)\n      }\n\n      routes.forEach((slug, index, { length }) => {\n        const innerSymbol = index === length - 1 ? '└' : '├'\n        messages.push([`${contSymbol}   ${innerSymbol} ${slug}`, '', ''])\n      })\n    }\n  })\n\n  const sharedFilesSize = sizeData.sizeCommonFiles\n  const sharedFiles = sizeData.sizeCommonFile\n\n  messages.push([\n    '+ First Load JS shared by all',\n    getPrettySize(sharedFilesSize),\n    '',\n  ])\n  const sharedFileKeys = Object.keys(sharedFiles)\n  const sharedCssFiles: string[] = []\n  ;[\n    ...sharedFileKeys\n      .filter((file) => {\n        if (file.endsWith('.css')) {\n          sharedCssFiles.push(file)\n          return false\n        }\n        return true\n      })\n      .map((e) => e.replace(buildId, '<buildId>'))\n      .sort(),\n    ...sharedCssFiles.map((e) => e.replace(buildId, '<buildId>')).sort(),\n  ].forEach((fileName, index, { length }) => {\n    const innerSymbol = index === length - 1 ? '└' : '├'\n\n    const originalName = fileName.replace('<buildId>', buildId)\n    const cleanName = getCleanName(fileName)\n\n    messages.push([\n      `  ${innerSymbol} ${cleanName}`,\n      prettyBytes(sharedFiles[originalName]),\n      '',\n    ])\n  })\n\n  console.log(\n    textTable(messages, {\n      align: ['l', 'l', 'r'],\n      stringLength: (str) => stripAnsi(str).length,\n    })\n  )\n\n  console.log()\n  console.log(\n    textTable(\n      [\n        [\n          'λ',\n          serverless ? '(Lambda)' : '(Server)',\n          `server-side renders at runtime (uses ${chalk.cyan(\n            'getInitialProps'\n          )} or ${chalk.cyan('getServerSideProps')})`,\n        ],\n        [\n          '○',\n          '(Static)',\n          'automatically rendered as static HTML (uses no initial props)',\n        ],\n        [\n          '●',\n          '(SSG)',\n          `automatically generated as static HTML + JSON (uses ${chalk.cyan(\n            'getStaticProps'\n          )})`,\n        ],\n        [\n          '',\n          '(ISR)',\n          `incremental static regeneration (uses revalidate in ${chalk.cyan(\n            'getStaticProps'\n          )})`,\n        ],\n      ] as [string, string, string][],\n      {\n        align: ['l', 'l', 'l'],\n        stringLength: (str) => stripAnsi(str).length,\n      }\n    )\n  )\n\n  console.log()\n}\n\nexport function printCustomRoutes({\n  redirects,\n  rewrites,\n  headers,\n}: CustomRoutes) {\n  const printRoutes = (\n    routes: Redirect[] | Rewrite[] | Header[],\n    type: 'Redirects' | 'Rewrites' | 'Headers'\n  ) => {\n    const isRedirects = type === 'Redirects'\n    const isHeaders = type === 'Headers'\n    console.log(chalk.underline(type))\n    console.log()\n\n    /*\n        ┌ source\n        ├ permanent/statusCode\n        └ destination\n     */\n    const routesStr = (routes as any[])\n      .map((route: { source: string }) => {\n        let routeStr = `┌ source: ${route.source}\\n`\n\n        if (!isHeaders) {\n          const r = route as Rewrite\n          routeStr += `${isRedirects ? '├' : '└'} destination: ${\n            r.destination\n          }\\n`\n        }\n        if (isRedirects) {\n          const r = route as Redirect\n          routeStr += `└ ${\n            r.statusCode\n              ? `status: ${r.statusCode}`\n              : `permanent: ${r.permanent}`\n          }\\n`\n        }\n\n        if (isHeaders) {\n          const r = route as Header\n          routeStr += `└ headers:\\n`\n\n          for (let i = 0; i < r.headers.length; i++) {\n            const header = r.headers[i]\n            const last = i === headers.length - 1\n\n            routeStr += `  ${last ? '└' : '├'} ${header.key}: ${header.value}\\n`\n          }\n        }\n\n        return routeStr\n      })\n      .join('\\n')\n\n    console.log(routesStr, '\\n')\n  }\n\n  if (redirects.length) {\n    printRoutes(redirects, 'Redirects')\n  }\n  if (rewrites.length) {\n    printRoutes(rewrites, 'Rewrites')\n  }\n  if (headers.length) {\n    printRoutes(headers, 'Headers')\n  }\n}\n\ntype ComputeManifestShape = {\n  commonFiles: string[]\n  uniqueFiles: string[]\n  sizeUniqueFiles: { [file: string]: number }\n  sizeCommonFile: { [file: string]: number }\n  sizeCommonFiles: number\n}\n\nlet cachedBuildManifest: BuildManifest | undefined\n\nlet lastCompute: ComputeManifestShape | undefined\nlet lastComputePageInfo: boolean | undefined\n\nasync function computeFromManifest(\n  manifest: BuildManifest,\n  distPath: string,\n  pageInfos?: Map<string, PageInfo>\n): Promise<ComputeManifestShape> {\n  if (\n    Object.is(cachedBuildManifest, manifest) &&\n    lastComputePageInfo === !!pageInfos\n  ) {\n    return lastCompute!\n  }\n\n  let expected = 0\n  const files = new Map<string, number>()\n  Object.keys(manifest.pages).forEach((key) => {\n    if (pageInfos) {\n      const pageInfo = pageInfos.get(key)\n      // don't include AMP pages since they don't rely on shared bundles\n      // AMP First pages are not under the pageInfos key\n      if (pageInfo?.isHybridAmp) {\n        return\n      }\n    }\n\n    ++expected\n    manifest.pages[key].forEach((file) => {\n      if (key === '/_app') {\n        files.set(file, Infinity)\n      } else if (files.has(file)) {\n        files.set(file, files.get(file)! + 1)\n      } else {\n        files.set(file, 1)\n      }\n    })\n  })\n\n  const commonFiles = [...files.entries()]\n    .filter(([, len]) => len === expected || len === Infinity)\n    .map(([f]) => f)\n  const uniqueFiles = [...files.entries()]\n    .filter(([, len]) => len === 1)\n    .map(([f]) => f)\n\n  let stats: [string, number][]\n  try {\n    stats = await Promise.all(\n      commonFiles.map(\n        async (f) =>\n          [f, await fsStatGzip(path.join(distPath, f))] as [string, number]\n      )\n    )\n  } catch (_) {\n    stats = []\n  }\n\n  let uniqueStats: [string, number][]\n  try {\n    uniqueStats = await Promise.all(\n      uniqueFiles.map(\n        async (f) =>\n          [f, await fsStatGzip(path.join(distPath, f))] as [string, number]\n      )\n    )\n  } catch (_) {\n    uniqueStats = []\n  }\n\n  lastCompute = {\n    commonFiles,\n    uniqueFiles,\n    sizeUniqueFiles: uniqueStats.reduce(\n      (obj, n) => Object.assign(obj, { [n[0]]: n[1] }),\n      {}\n    ),\n    sizeCommonFile: stats.reduce(\n      (obj, n) => Object.assign(obj, { [n[0]]: n[1] }),\n      {}\n    ),\n    sizeCommonFiles: stats.reduce((size, [f, stat]) => {\n      if (f.endsWith('.css')) return size\n      return size + stat\n    }, 0),\n  }\n\n  cachedBuildManifest = manifest\n  lastComputePageInfo = !!pageInfos\n  return lastCompute!\n}\n\nexport function difference<T>(main: T[] | Set<T>, sub: T[] | Set<T>): T[] {\n  const a = new Set(main)\n  const b = new Set(sub)\n  return [...a].filter((x) => !b.has(x))\n}\n\nfunction intersect<T>(main: T[], sub: T[]): T[] {\n  const a = new Set(main)\n  const b = new Set(sub)\n  return [...new Set([...a].filter((x) => b.has(x)))]\n}\n\nfunction sum(a: number[]): number {\n  return a.reduce((size, stat) => size + stat, 0)\n}\n\nexport async function getJsPageSizeInKb(\n  page: string,\n  distPath: string,\n  buildManifest: BuildManifest\n): Promise<[number, number]> {\n  const data = await computeFromManifest(buildManifest, distPath)\n\n  const fnFilterJs = (entry: string) => entry.endsWith('.js')\n\n  const pageFiles = (\n    buildManifest.pages[denormalizePagePath(page)] || []\n  ).filter(fnFilterJs)\n  const appFiles = (buildManifest.pages['/_app'] || []).filter(fnFilterJs)\n\n  const fnMapRealPath = (dep: string) => `${distPath}/${dep}`\n\n  const allFilesReal = [...new Set([...pageFiles, ...appFiles])].map(\n    fnMapRealPath\n  )\n  const selfFilesReal = difference(\n    intersect(pageFiles, data.uniqueFiles),\n    data.commonFiles\n  ).map(fnMapRealPath)\n\n  try {\n    // Doesn't use `Promise.all`, as we'd double compute duplicate files. This\n    // function is memoized, so the second one will instantly resolve.\n    const allFilesSize = sum(await Promise.all(allFilesReal.map(fsStatGzip)))\n    const selfFilesSize = sum(await Promise.all(selfFilesReal.map(fsStatGzip)))\n\n    return [selfFilesSize, allFilesSize]\n  } catch (_) {}\n  return [-1, -1]\n}\n\nexport async function buildStaticPaths(\n  page: string,\n  getStaticPaths: GetStaticPaths,\n  locales?: string[],\n  defaultLocale?: string\n): Promise<\n  Omit<UnwrapPromise<ReturnType<GetStaticPaths>>, 'paths'> & {\n    paths: string[]\n    encodedPaths: string[]\n  }\n> {\n  const prerenderPaths = new Set<string>()\n  const encodedPrerenderPaths = new Set<string>()\n  const _routeRegex = getRouteRegex(page)\n  const _routeMatcher = getRouteMatcher(_routeRegex)\n\n  // Get the default list of allowed params.\n  const _validParamKeys = Object.keys(_routeMatcher(page))\n\n  const staticPathsResult = await getStaticPaths({ locales, defaultLocale })\n\n  const expectedReturnVal =\n    `Expected: { paths: [], fallback: boolean }\\n` +\n    `See here for more info: https://err.sh/vercel/next.js/invalid-getstaticpaths-value`\n\n  if (\n    !staticPathsResult ||\n    typeof staticPathsResult !== 'object' ||\n    Array.isArray(staticPathsResult)\n  ) {\n    throw new Error(\n      `Invalid value returned from getStaticPaths in ${page}. Received ${typeof staticPathsResult} ${expectedReturnVal}`\n    )\n  }\n\n  const invalidStaticPathKeys = Object.keys(staticPathsResult).filter(\n    (key) => !(key === 'paths' || key === 'fallback')\n  )\n\n  if (invalidStaticPathKeys.length > 0) {\n    throw new Error(\n      `Extra keys returned from getStaticPaths in ${page} (${invalidStaticPathKeys.join(\n        ', '\n      )}) ${expectedReturnVal}`\n    )\n  }\n\n  if (\n    !(\n      typeof staticPathsResult.fallback === 'boolean' ||\n      staticPathsResult.fallback === 'blocking'\n    )\n  ) {\n    throw new Error(\n      `The \\`fallback\\` key must be returned from getStaticPaths in ${page}.\\n` +\n        expectedReturnVal\n    )\n  }\n\n  const toPrerender = staticPathsResult.paths\n\n  if (!Array.isArray(toPrerender)) {\n    throw new Error(\n      `Invalid \\`paths\\` value returned from getStaticPaths in ${page}.\\n` +\n        `\\`paths\\` must be an array of strings or objects of shape { params: [key: string]: string }`\n    )\n  }\n\n  toPrerender.forEach((entry) => {\n    // For a string-provided path, we must make sure it matches the dynamic\n    // route.\n    if (typeof entry === 'string') {\n      entry = removePathTrailingSlash(entry)\n\n      const localePathResult = normalizeLocalePath(entry, locales)\n      let cleanedEntry = entry\n\n      if (localePathResult.detectedLocale) {\n        cleanedEntry = entry.substr(localePathResult.detectedLocale.length + 1)\n      } else if (defaultLocale) {\n        entry = `/${defaultLocale}${entry}`\n      }\n\n      const result = _routeMatcher(cleanedEntry)\n      if (!result) {\n        throw new Error(\n          `The provided path \\`${cleanedEntry}\\` does not match the page: \\`${page}\\`.`\n        )\n      }\n\n      // If leveraging the string paths variant the entry should already be\n      // encoded so we decode the segments ensuring we only escape path\n      // delimiters\n      prerenderPaths.add(\n        entry\n          .split('/')\n          .map((segment) =>\n            escapePathDelimiters(decodeURIComponent(segment), true)\n          )\n          .join('/')\n      )\n      encodedPrerenderPaths.add(entry)\n    }\n    // For the object-provided path, we must make sure it specifies all\n    // required keys.\n    else {\n      const invalidKeys = Object.keys(entry).filter(\n        (key) => key !== 'params' && key !== 'locale'\n      )\n\n      if (invalidKeys.length) {\n        throw new Error(\n          `Additional keys were returned from \\`getStaticPaths\\` in page \"${page}\". ` +\n            `URL Parameters intended for this dynamic route must be nested under the \\`params\\` key, i.e.:` +\n            `\\n\\n\\treturn { params: { ${_validParamKeys\n              .map((k) => `${k}: ...`)\n              .join(', ')} } }` +\n            `\\n\\nKeys that need to be moved: ${invalidKeys.join(', ')}.\\n`\n        )\n      }\n\n      const { params = {} } = entry\n      let builtPage = page\n      let encodedBuiltPage = page\n\n      _validParamKeys.forEach((validParamKey) => {\n        const { repeat, optional } = _routeRegex.groups[validParamKey]\n        let paramValue = params[validParamKey]\n        if (\n          optional &&\n          params.hasOwnProperty(validParamKey) &&\n          (paramValue === null ||\n            paramValue === undefined ||\n            (paramValue as any) === false)\n        ) {\n          paramValue = []\n        }\n        if (\n          (repeat && !Array.isArray(paramValue)) ||\n          (!repeat && typeof paramValue !== 'string')\n        ) {\n          throw new Error(\n            `A required parameter (${validParamKey}) was not provided as ${\n              repeat ? 'an array' : 'a string'\n            } in getStaticPaths for ${page}`\n          )\n        }\n        let replaced = `[${repeat ? '...' : ''}${validParamKey}]`\n        if (optional) {\n          replaced = `[${replaced}]`\n        }\n        builtPage = builtPage\n          .replace(\n            replaced,\n            repeat\n              ? (paramValue as string[])\n                  .map((segment) => escapePathDelimiters(segment, true))\n                  .join('/')\n              : escapePathDelimiters(paramValue as string, true)\n          )\n          .replace(/(?!^)\\/$/, '')\n\n        encodedBuiltPage = encodedBuiltPage\n          .replace(\n            replaced,\n            repeat\n              ? (paramValue as string[]).map(encodeURIComponent).join('/')\n              : encodeURIComponent(paramValue as string)\n          )\n          .replace(/(?!^)\\/$/, '')\n      })\n\n      if (entry.locale && !locales?.includes(entry.locale)) {\n        throw new Error(\n          `Invalid locale returned from getStaticPaths for ${page}, the locale ${entry.locale} is not specified in next.config.js`\n        )\n      }\n      const curLocale = entry.locale || defaultLocale || ''\n\n      prerenderPaths.add(\n        `${curLocale ? `/${curLocale}` : ''}${\n          curLocale && builtPage === '/' ? '' : builtPage\n        }`\n      )\n      encodedPrerenderPaths.add(\n        `${curLocale ? `/${curLocale}` : ''}${\n          curLocale && encodedBuiltPage === '/' ? '' : encodedBuiltPage\n        }`\n      )\n    }\n  })\n\n  return {\n    paths: [...prerenderPaths],\n    fallback: staticPathsResult.fallback,\n    encodedPaths: [...encodedPrerenderPaths],\n  }\n}\n\nexport async function isPageStatic(\n  page: string,\n  serverBundle: string,\n  runtimeEnvConfig: any,\n  locales?: string[],\n  defaultLocale?: string\n): Promise<{\n  isStatic?: boolean\n  isAmpOnly?: boolean\n  isHybridAmp?: boolean\n  hasServerProps?: boolean\n  hasStaticProps?: boolean\n  prerenderRoutes?: string[]\n  encodedPrerenderRoutes?: string[]\n  prerenderFallback?: boolean | 'blocking'\n  isNextImageImported?: boolean\n}> {\n  try {\n    require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig)\n    const mod = await require(serverBundle)\n    const Comp = await (mod.default || mod)\n\n    if (!Comp || !isValidElementType(Comp) || typeof Comp === 'string') {\n      throw new Error('INVALID_DEFAULT_EXPORT')\n    }\n\n    const hasGetInitialProps = !!(Comp as any).getInitialProps\n    const hasStaticProps = !!(await mod.getStaticProps)\n    const hasStaticPaths = !!(await mod.getStaticPaths)\n    const hasServerProps = !!(await mod.getServerSideProps)\n    const hasLegacyServerProps = !!(await mod.unstable_getServerProps)\n    const hasLegacyStaticProps = !!(await mod.unstable_getStaticProps)\n    const hasLegacyStaticPaths = !!(await mod.unstable_getStaticPaths)\n    const hasLegacyStaticParams = !!(await mod.unstable_getStaticParams)\n\n    if (hasLegacyStaticParams) {\n      throw new Error(\n        `unstable_getStaticParams was replaced with getStaticPaths. Please update your code.`\n      )\n    }\n\n    if (hasLegacyStaticPaths) {\n      throw new Error(\n        `unstable_getStaticPaths was replaced with getStaticPaths. Please update your code.`\n      )\n    }\n\n    if (hasLegacyStaticProps) {\n      throw new Error(\n        `unstable_getStaticProps was replaced with getStaticProps. Please update your code.`\n      )\n    }\n\n    if (hasLegacyServerProps) {\n      throw new Error(\n        `unstable_getServerProps was replaced with getServerSideProps. Please update your code.`\n      )\n    }\n\n    // A page cannot be prerendered _and_ define a data requirement. That's\n    // contradictory!\n    if (hasGetInitialProps && hasStaticProps) {\n      throw new Error(SSG_GET_INITIAL_PROPS_CONFLICT)\n    }\n\n    if (hasGetInitialProps && hasServerProps) {\n      throw new Error(SERVER_PROPS_GET_INIT_PROPS_CONFLICT)\n    }\n\n    if (hasStaticProps && hasServerProps) {\n      throw new Error(SERVER_PROPS_SSG_CONFLICT)\n    }\n\n    const pageIsDynamic = isDynamicRoute(page)\n    // A page cannot have static parameters if it is not a dynamic page.\n    if (hasStaticProps && hasStaticPaths && !pageIsDynamic) {\n      throw new Error(\n        `getStaticPaths can only be used with dynamic pages, not '${page}'.` +\n          `\\nLearn more: https://nextjs.org/docs/routing/dynamic-routes`\n      )\n    }\n\n    if (hasStaticProps && pageIsDynamic && !hasStaticPaths) {\n      throw new Error(\n        `getStaticPaths is required for dynamic SSG pages and is missing for '${page}'.` +\n          `\\nRead more: https://err.sh/next.js/invalid-getstaticpaths-value`\n      )\n    }\n\n    let prerenderRoutes: Array<string> | undefined\n    let encodedPrerenderRoutes: Array<string> | undefined\n    let prerenderFallback: boolean | 'blocking' | undefined\n    if (hasStaticProps && hasStaticPaths) {\n      ;({\n        paths: prerenderRoutes,\n        fallback: prerenderFallback,\n        encodedPaths: encodedPrerenderRoutes,\n      } = await buildStaticPaths(\n        page,\n        mod.getStaticPaths,\n        locales,\n        defaultLocale\n      ))\n    }\n\n    const isNextImageImported = (global as any).__NEXT_IMAGE_IMPORTED\n    const config = mod.config || {}\n    return {\n      isStatic: !hasStaticProps && !hasGetInitialProps && !hasServerProps,\n      isHybridAmp: config.amp === 'hybrid',\n      isAmpOnly: config.amp === true,\n      prerenderRoutes,\n      prerenderFallback,\n      encodedPrerenderRoutes,\n      hasStaticProps,\n      hasServerProps,\n      isNextImageImported,\n    }\n  } catch (err) {\n    if (err.code === 'MODULE_NOT_FOUND') return {}\n    throw err\n  }\n}\n\nexport async function hasCustomGetInitialProps(\n  bundle: string,\n  runtimeEnvConfig: any,\n  checkingApp: boolean\n): Promise<boolean> {\n  require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig)\n  let mod = require(bundle)\n\n  if (checkingApp) {\n    mod = (await mod._app) || mod.default || mod\n  } else {\n    mod = mod.default || mod\n  }\n  mod = await mod\n  return mod.getInitialProps !== mod.origGetInitialProps\n}\n\nexport function getNamedExports(\n  bundle: string,\n  runtimeEnvConfig: any\n): Array<string> {\n  require('../next-server/lib/runtime-config').setConfig(runtimeEnvConfig)\n  return Object.keys(require(bundle))\n}\n"]},"metadata":{},"sourceType":"script"}