{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  minify\n} = require('terser');\n\nconst {\n  remove\n} = require('../NodeUtils');\n\nconst normalizeWhitespace = require('normalize-html-whitespace');\n\nconst htmlEscape = require('../htmlEscape'); // Ignore comments of the form <!-- __AAAA_BBBB___ --> by default (used by Next.js)\n\n\nconst COMMENT_DEFAULT_IGNORE = /^\\s*__[a-bA-Z0-9_-]+__\\s*$/;\n/**\n * MinifyHtml - minifies files size by:\n *\n * - minifying inline JSON\n * - minifying inline amp-script using https://www.npmjs.com/package/terser\n * - collapsing whitespace outside of pre, script, style and area.\n * - removing comments\n *\n * This transformer supports the following options:\n *\n * - `minify [Boolean]`: Enables HTML minification. The default is `true`.\n */\n\nclass MinifyHtml {\n  constructor(config) {\n    this.opts = {\n      minify: config.minify !== false,\n      minifyAmpScript: true,\n      minifyJSON: true,\n      collapseWhitespace: true,\n      removeComments: true,\n      canCollapseWhitespace: true,\n      inBody: false,\n      commentIgnorePattern: COMMENT_DEFAULT_IGNORE\n    };\n    this.log = config.log.tag('MinifyHtml');\n  }\n\n  async transform(tree) {\n    if (!this.opts.minify) {\n      return;\n    } // store nodes for later deletion to avoid changing the tree structure\n    // while iterating the DOM\n\n\n    const nodesToRemove = []; // recursively walk through all nodes and minify if possible\n\n    await this.minifyNode(tree, this.opts, nodesToRemove);\n\n    for (const node of nodesToRemove) {\n      remove(node);\n    }\n  }\n\n  async minifyNode(node, opts, nodesToRemove) {\n    if (node.type === 'text') {\n      this.minifyTextNode(node, opts, nodesToRemove);\n    } else if (node.type === 'comment') {\n      this.minifyCommentNode(node, opts, nodesToRemove);\n    } else if (node.tagName === 'script') {\n      await this.minifyScriptNode(node, opts);\n    } // update options based on the current node\n\n\n    const childOpts = Object.assign({}, opts);\n\n    if (opts.canCollapseWhitespace && !this.canCollapseWhitespace(node.tagName)) {\n      childOpts.canCollapseWhitespace = false;\n    }\n\n    if (node.tagName === 'head' || node.tagName === 'html') {\n      childOpts.inBody = false;\n    } else if (node.tagName === 'body') {\n      childOpts.inBody = true;\n    } // minify all child nodes\n\n\n    const childPromises = [];\n\n    for (const child of node.children || []) {\n      childPromises.push(this.minifyNode(child, childOpts, nodesToRemove));\n    }\n\n    return Promise.all(childPromises);\n  }\n\n  minifyTextNode(node, opts, nodesToRemove) {\n    if (!node.data || !opts.collapseWhitespace) {\n      return;\n    }\n\n    if (opts.canCollapseWhitespace) {\n      node.data = normalizeWhitespace(node.data);\n    }\n\n    if (!opts.inBody) {\n      node.data = node.data.trim();\n    } // remove empty nodes\n\n\n    if (node.data.length === 0) {\n      nodesToRemove.push(node);\n    }\n  }\n\n  minifyCommentNode(node, opts, nodesToRemove) {\n    if (!node.data || !opts.removeComments) {\n      return;\n    }\n\n    if (opts.commentIgnorePattern.test(node.data)) {\n      return;\n    }\n\n    nodesToRemove.push(node);\n  }\n\n  async minifyScriptNode(node, opts) {\n    const isJson = this.isJson(node);\n    const isAmpScript = !isJson && this.isInlineAmpScript(node);\n\n    for (const child of node.children || []) {\n      if (!child.data) {\n        continue;\n      }\n\n      if (isJson && opts.minifyJSON) {\n        this.minifyJson(child);\n      } else if (isAmpScript && opts.minifyAmpScript) {\n        await this.minifyAmpScript(child);\n      }\n    }\n  }\n\n  async minifyAmpScript(child) {\n    try {\n      const result = await minify(child.data, {});\n\n      if (result.error) {\n        this.log.warn('Could not minify inline amp-script', child.data, `${result.error.name}: ${result.error.message}`);\n        return;\n      }\n\n      child.data = result.code;\n    } catch (e) {\n      this.log.warn('Failed minifying inline amp-script', e);\n    }\n  }\n\n  minifyJson(child) {\n    try {\n      let jsonString = JSON.stringify(JSON.parse(child.data), null, '');\n      jsonString = htmlEscape(jsonString);\n      child.data = jsonString;\n    } catch (e) {\n      // log invalid JSON, but don't fail\n      this.log.warn('Invalid JSON', child.data);\n    }\n  }\n\n  isInlineAmpScript(node) {\n    return node.attribs && node.attribs.type === 'text/plain' && node.attribs.target === 'amp-script';\n  }\n\n  isJson(node) {\n    return node.attribs && (node.attribs.type === 'application/json' || node.attribs.type === 'application/ld+json');\n  }\n\n  canCollapseWhitespace(tagName) {\n    return 'script' !== tagName && 'style' !== tagName && 'pre' !== tagName && 'textarea' !== tagName;\n  }\n\n  canTrimWhitespace(tagName) {\n    return tagName !== 'pre' && tagName !== 'textarea';\n  }\n\n}\n\nmodule.exports = MinifyHtml;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/MinifyHtml.js"],"names":["minify","require","remove","normalizeWhitespace","htmlEscape","COMMENT_DEFAULT_IGNORE","MinifyHtml","constructor","config","opts","minifyAmpScript","minifyJSON","collapseWhitespace","removeComments","canCollapseWhitespace","inBody","commentIgnorePattern","log","tag","transform","tree","nodesToRemove","minifyNode","node","type","minifyTextNode","minifyCommentNode","tagName","minifyScriptNode","childOpts","Object","assign","childPromises","child","children","push","Promise","all","data","trim","length","test","isJson","isAmpScript","isInlineAmpScript","minifyJson","result","error","warn","name","message","code","e","jsonString","JSON","stringify","parse","attribs","target","canTrimWhitespace","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {minify} = require('terser');\nconst {remove} = require('../NodeUtils');\nconst normalizeWhitespace = require('normalize-html-whitespace');\nconst htmlEscape = require('../htmlEscape');\n\n// Ignore comments of the form <!-- __AAAA_BBBB___ --> by default (used by Next.js)\nconst COMMENT_DEFAULT_IGNORE = /^\\s*__[a-bA-Z0-9_-]+__\\s*$/;\n\n/**\n * MinifyHtml - minifies files size by:\n *\n * - minifying inline JSON\n * - minifying inline amp-script using https://www.npmjs.com/package/terser\n * - collapsing whitespace outside of pre, script, style and area.\n * - removing comments\n *\n * This transformer supports the following options:\n *\n * - `minify [Boolean]`: Enables HTML minification. The default is `true`.\n */\nclass MinifyHtml {\n  constructor(config) {\n    this.opts = {\n      minify: config.minify !== false,\n      minifyAmpScript: true,\n      minifyJSON: true,\n      collapseWhitespace: true,\n      removeComments: true,\n      canCollapseWhitespace: true,\n      inBody: false,\n      commentIgnorePattern: COMMENT_DEFAULT_IGNORE,\n    };\n    this.log = config.log.tag('MinifyHtml');\n  }\n  async transform(tree) {\n    if (!this.opts.minify) {\n      return;\n    }\n    // store nodes for later deletion to avoid changing the tree structure\n    // while iterating the DOM\n    const nodesToRemove = [];\n    // recursively walk through all nodes and minify if possible\n    await this.minifyNode(tree, this.opts, nodesToRemove);\n    for (const node of nodesToRemove) {\n      remove(node);\n    }\n  }\n\n  async minifyNode(node, opts, nodesToRemove) {\n    if (node.type === 'text') {\n      this.minifyTextNode(node, opts, nodesToRemove);\n    } else if (node.type === 'comment') {\n      this.minifyCommentNode(node, opts, nodesToRemove);\n    } else if (node.tagName === 'script') {\n      await this.minifyScriptNode(node, opts);\n    }\n    // update options based on the current node\n    const childOpts = Object.assign({}, opts);\n    if (opts.canCollapseWhitespace && !this.canCollapseWhitespace(node.tagName)) {\n      childOpts.canCollapseWhitespace = false;\n    }\n    if (node.tagName === 'head' || node.tagName === 'html') {\n      childOpts.inBody = false;\n    } else if (node.tagName === 'body') {\n      childOpts.inBody = true;\n    }\n    // minify all child nodes\n    const childPromises = [];\n    for (const child of node.children || []) {\n      childPromises.push(this.minifyNode(child, childOpts, nodesToRemove));\n    }\n    return Promise.all(childPromises);\n  }\n\n  minifyTextNode(node, opts, nodesToRemove) {\n    if (!node.data || !opts.collapseWhitespace) {\n      return;\n    }\n    if (opts.canCollapseWhitespace) {\n      node.data = normalizeWhitespace(node.data);\n    }\n    if (!opts.inBody) {\n      node.data = node.data.trim();\n    }\n    // remove empty nodes\n    if (node.data.length === 0) {\n      nodesToRemove.push(node);\n    }\n  }\n\n  minifyCommentNode(node, opts, nodesToRemove) {\n    if (!node.data || !opts.removeComments) {\n      return;\n    }\n    if (opts.commentIgnorePattern.test(node.data)) {\n      return;\n    }\n    nodesToRemove.push(node);\n  }\n\n  async minifyScriptNode(node, opts) {\n    const isJson = this.isJson(node);\n    const isAmpScript = !isJson && this.isInlineAmpScript(node);\n    for (const child of node.children || []) {\n      if (!child.data) {\n        continue;\n      }\n      if (isJson && opts.minifyJSON) {\n        this.minifyJson(child);\n      } else if (isAmpScript && opts.minifyAmpScript) {\n        await this.minifyAmpScript(child);\n      }\n    }\n  }\n\n  async minifyAmpScript(child) {\n    try {\n      const result = await minify(child.data, {});\n      if (result.error) {\n        this.log.warn(\n          'Could not minify inline amp-script',\n          child.data,\n          `${result.error.name}: ${result.error.message}`\n        );\n        return;\n      }\n      child.data = result.code;\n    } catch (e) {\n      this.log.warn('Failed minifying inline amp-script', e);\n    }\n  }\n\n  minifyJson(child) {\n    try {\n      let jsonString = JSON.stringify(JSON.parse(child.data), null, '');\n      jsonString = htmlEscape(jsonString);\n      child.data = jsonString;\n    } catch (e) {\n      // log invalid JSON, but don't fail\n      this.log.warn('Invalid JSON', child.data);\n    }\n  }\n\n  isInlineAmpScript(node) {\n    return (\n      node.attribs && node.attribs.type === 'text/plain' && node.attribs.target === 'amp-script'\n    );\n  }\n\n  isJson(node) {\n    return (\n      node.attribs &&\n      (node.attribs.type === 'application/json' || node.attribs.type === 'application/ld+json')\n    );\n  }\n\n  canCollapseWhitespace(tagName) {\n    return (\n      'script' !== tagName && 'style' !== tagName && 'pre' !== tagName && 'textarea' !== tagName\n    );\n  }\n\n  canTrimWhitespace(tagName) {\n    return tagName !== 'pre' && tagName !== 'textarea';\n  }\n}\n\nmodule.exports = MinifyHtml;\n"]},"metadata":{},"sourceType":"script"}