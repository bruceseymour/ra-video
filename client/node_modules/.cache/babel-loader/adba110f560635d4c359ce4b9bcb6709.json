{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.hasNecessaryDependencies = hasNecessaryDependencies;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _fileExists = require(\"../file-exists\");\n\nvar _oxfordCommaList = require(\"../oxford-comma-list\");\n\nvar _resolveRequest = require(\"../resolve-request\");\n\nvar _FatalTypeScriptError = require(\"./FatalTypeScriptError\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst requiredPackages = [{\n  file: 'typescript',\n  pkg: 'typescript'\n}, {\n  file: '@types/react/index.d.ts',\n  pkg: '@types/react'\n}, {\n  file: '@types/node/index.d.ts',\n  pkg: '@types/node'\n}];\n\nasync function hasNecessaryDependencies(baseDir) {\n  let resolutions = new Map();\n  const missingPackages = requiredPackages.filter(p => {\n    try {\n      resolutions.set(p.pkg, (0, _resolveRequest.resolveRequest)(p.file, _path.default.join(baseDir, '/')));\n      return false;\n    } catch (_) {\n      return true;\n    }\n  });\n\n  if (missingPackages.length < 1) {\n    return {\n      resolvedTypeScript: resolutions.get('typescript')\n    };\n  }\n\n  const packagesHuman = (0, _oxfordCommaList.getOxfordCommaList)(missingPackages.map(p => p.pkg));\n  const packagesCli = missingPackages.map(p => p.pkg).join(' ');\n\n  const yarnLockFile = _path.default.join(baseDir, 'yarn.lock');\n\n  const isYarn = await (0, _fileExists.fileExists)(yarnLockFile).catch(() => false);\n  throw new _FatalTypeScriptError.FatalTypeScriptError(_chalk.default.bold.red(`It looks like you're trying to use TypeScript but do not have the required package(s) installed.`) + '\\n\\n' + _chalk.default.bold(`Please install ${_chalk.default.bold(packagesHuman)} by running:`) + '\\n\\n' + `\\t${_chalk.default.bold.cyan((isYarn ? 'yarn add --dev' : 'npm install --save-dev') + ' ' + packagesCli)}` + '\\n\\n' + _chalk.default.bold('If you are not trying to use TypeScript, please remove the ' + _chalk.default.cyan('tsconfig.json') + ' file from your package root (and any TypeScript files in your pages directory).') + '\\n');\n}","map":{"version":3,"sources":["../../../lib/typescript/hasNecessaryDependencies.ts"],"names":["requiredPackages","file","pkg","resolutions","missingPackages","p","path","resolvedTypeScript","packagesHuman","packagesCli","yarnLockFile","isYarn","FatalTypeScriptError","chalk"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,gBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,gBAAgB,GAAG,CACvB;AAAEC,EAAAA,IAAI,EAAN,YAAA;AAAsBC,EAAAA,GAAG,EADF;AACvB,CADuB,EAEvB;AAAED,EAAAA,IAAI,EAAN,yBAAA;AAAmCC,EAAAA,GAAG,EAFf;AAEvB,CAFuB,EAGvB;AAAED,EAAAA,IAAI,EAAN,wBAAA;AAAkCC,EAAAA,GAAG,EAHvC;AAGE,CAHuB,CAAzB;;AAUO,eAAA,wBAAA,CAAA,OAAA,EAE2B;AAChC,MAAIC,WAAW,GAAG,IAAlB,GAAkB,EAAlB;AAEA,QAAMC,eAAe,GAAGJ,gBAAgB,CAAhBA,MAAAA,CAAyBK,CAAD,IAAO;AACrD,QAAI;AACFF,MAAAA,WAAW,CAAXA,GAAAA,CAAgBE,CAAC,CAAjBF,GAAAA,EAAuB,CAAA,GAAA,eAAA,CAAA,cAAA,EAAeE,CAAC,CAAhB,IAAA,EAAuBC,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAA9CH,GAA8CG,CAAvB,CAAvBH;AACA,aAAA,KAAA;AACA,KAHF,CAGE,OAAA,CAAA,EAAU;AACV,aAAA,IAAA;AAEH;AAPD,GAAwBH,CAAxB;;AASA,MAAII,eAAe,CAAfA,MAAAA,GAAJ,CAAA,EAAgC;AAC9B,WAAO;AAAEG,MAAAA,kBAAkB,EAAEJ,WAAW,CAAXA,GAAAA,CAA7B,YAA6BA;AAAtB,KAAP;AAGF;;AAAA,QAAMK,aAAa,GAAG,CAAA,GAAA,gBAAA,CAAA,kBAAA,EAAmBJ,eAAe,CAAfA,GAAAA,CAAqBC,CAAD,IAAOA,CAAC,CAArE,GAAyCD,CAAnB,CAAtB;AACA,QAAMK,WAAW,GAAGL,eAAe,CAAfA,GAAAA,CAAqBC,CAAD,IAAOA,CAAC,CAA5BD,GAAAA,EAAAA,IAAAA,CAApB,GAAoBA,CAApB;;AAEA,QAAMM,YAAY,GAAGJ,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,OAAAA,EAArB,WAAqBA,CAArB;;AACA,QAAMK,MAAM,GAAG,MAAM,CAAA,GAAA,WAAA,CAAA,UAAA,EAAA,YAAA,EAAA,KAAA,CAA+B,MAApD,KAAqB,CAArB;AAEA,QAAM,IAAIC,qBAAAA,CAAJ,oBAAA,CACJC,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,GAAAA,CAAAA,kGAAAA,IAAAA,MAAAA,GAIEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAY,kBAAiBA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,aAAAA,CAJ/BA,cAIEA,CAJFA,GAAAA,MAAAA,GAMG,KAAIA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,IAAAA,CACH,CAACF,MAAM,GAAA,gBAAA,GAAP,wBAAA,IAAA,GAAA,GADGE,WAAAA,CANPA,EAAAA,GAAAA,MAAAA,GAYEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CACE,gEACEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CADF,eACEA,CADF,GAbJA,kFAYEA,CAZFA,GADF,IAAM,CAAN;AAoBD","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\nimport { fileExists } from '../file-exists'\nimport { getOxfordCommaList } from '../oxford-comma-list'\nimport { resolveRequest } from '../resolve-request'\nimport { FatalTypeScriptError } from './FatalTypeScriptError'\n\nconst requiredPackages = [\n  { file: 'typescript', pkg: 'typescript' },\n  { file: '@types/react/index.d.ts', pkg: '@types/react' },\n  { file: '@types/node/index.d.ts', pkg: '@types/node' },\n]\n\nexport type NecessaryDependencies = {\n  resolvedTypeScript: string\n}\n\nexport async function hasNecessaryDependencies(\n  baseDir: string\n): Promise<NecessaryDependencies> {\n  let resolutions = new Map<string, string>()\n\n  const missingPackages = requiredPackages.filter((p) => {\n    try {\n      resolutions.set(p.pkg, resolveRequest(p.file, path.join(baseDir, '/')))\n      return false\n    } catch (_) {\n      return true\n    }\n  })\n\n  if (missingPackages.length < 1) {\n    return { resolvedTypeScript: resolutions.get('typescript')! }\n  }\n\n  const packagesHuman = getOxfordCommaList(missingPackages.map((p) => p.pkg))\n  const packagesCli = missingPackages.map((p) => p.pkg).join(' ')\n\n  const yarnLockFile = path.join(baseDir, 'yarn.lock')\n  const isYarn = await fileExists(yarnLockFile).catch(() => false)\n\n  throw new FatalTypeScriptError(\n    chalk.bold.red(\n      `It looks like you're trying to use TypeScript but do not have the required package(s) installed.`\n    ) +\n      '\\n\\n' +\n      chalk.bold(`Please install ${chalk.bold(packagesHuman)} by running:`) +\n      '\\n\\n' +\n      `\\t${chalk.bold.cyan(\n        (isYarn ? 'yarn add --dev' : 'npm install --save-dev') +\n          ' ' +\n          packagesCli\n      )}` +\n      '\\n\\n' +\n      chalk.bold(\n        'If you are not trying to use TypeScript, please remove the ' +\n          chalk.cyan('tsconfig.json') +\n          ' file from your package root (and any TypeScript files in your pages directory).'\n      ) +\n      '\\n'\n  )\n}\n"]},"metadata":{},"sourceType":"script"}