{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getPostCssPlugins = getPostCssPlugins;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _findConfig = require(\"../../../../../lib/find-config\");\n\nvar _resolveRequest = require(\"../../../../../lib/resolve-request\");\n\nvar _browserslist = _interopRequireDefault(require(\"browserslist\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst genericErrorText = 'Malformed PostCSS Configuration';\n\nfunction getError_NullConfig(pluginName) {\n  return `${_chalk.default.red.bold('Error')}: Your PostCSS configuration for '${pluginName}' cannot have ${_chalk.default.bold('null')} configuration.\\nTo disable '${pluginName}', pass ${_chalk.default.bold('false')}, otherwise, pass ${_chalk.default.bold('true')} or a configuration object.`;\n}\n\nfunction isIgnoredPlugin(pluginPath) {\n  const ignoredRegex = /(?:^|[\\\\/])(postcss-modules-values|postcss-modules-scope|postcss-modules-extract-imports|postcss-modules-local-by-default|postcss-modules)(?:[\\\\/]|$)/i;\n  const match = ignoredRegex.exec(pluginPath);\n\n  if (match == null) {\n    return false;\n  }\n\n  const plugin = match.pop();\n  console.warn(`${_chalk.default.yellow.bold('Warning')}: Please remove the ${_chalk.default.underline(plugin)} plugin from your PostCSS configuration. ` + `This plugin is automatically configured by Next.js.\\n` + 'Read more: https://err.sh/next.js/postcss-ignored-plugin');\n  return true;\n}\n\nasync function loadPlugin(dir, pluginName, options) {\n  if (options === false || isIgnoredPlugin(pluginName)) {\n    return false;\n  }\n\n  if (options == null) {\n    console.error(getError_NullConfig(pluginName));\n    throw new Error(genericErrorText);\n  }\n\n  const pluginPath = (0, _resolveRequest.resolveRequest)(pluginName, `${dir}/`);\n\n  if (isIgnoredPlugin(pluginPath)) {\n    return false;\n  } else if (options === true) {\n    return require(pluginPath);\n  } else {\n    const keys = Object.keys(options);\n\n    if (keys.length === 0) {\n      return require(pluginPath);\n    }\n\n    return require(pluginPath)(options);\n  }\n}\n\nfunction getDefaultPlugins(baseDirectory, isProduction) {\n  var _browsers;\n\n  let browsers;\n\n  try {\n    browsers = _browserslist.default.loadConfig({\n      path: baseDirectory,\n      env: isProduction ? 'production' : 'development'\n    });\n  } catch (_unused) {}\n\n  return [require.resolve('next/dist/compiled/postcss-flexbugs-fixes'), [require.resolve('next/dist/compiled/postcss-preset-env'), {\n    browsers: (_browsers = browsers) != null ? _browsers : ['defaults'],\n    autoprefixer: {\n      // Disable legacy flexbox support\n      flexbox: 'no-2009'\n    },\n    // Enable CSS features that have shipped to the\n    // web platform, i.e. in 2+ browsers unflagged.\n    stage: 3,\n    features: {\n      'custom-properties': false\n    }\n  }]];\n}\n\nasync function getPostCssPlugins(dir, isProduction, defaults = false) {\n  let config = defaults ? null : await (0, _findConfig.findConfig)(dir, 'postcss');\n\n  if (config == null) {\n    config = {\n      plugins: getDefaultPlugins(dir, isProduction)\n    };\n  }\n\n  if (typeof config === 'function') {\n    throw new Error(`Your custom PostCSS configuration may not export a function. Please export a plain object instead.\\n` + 'Read more: https://err.sh/next.js/postcss-function');\n  } // Warn user about configuration keys which are not respected\n\n\n  const invalidKey = Object.keys(config).find(key => key !== 'plugins');\n\n  if (invalidKey) {\n    console.warn(`${_chalk.default.yellow.bold('Warning')}: Your PostCSS configuration defines a field which is not supported (\\`${invalidKey}\\`). ` + `Please remove this configuration value.`);\n  } // Enforce the user provided plugins if the configuration file is present\n\n\n  let plugins = config.plugins;\n\n  if (plugins == null || typeof plugins !== 'object') {\n    throw new Error(`Your custom PostCSS configuration must export a \\`plugins\\` key.`);\n  }\n\n  if (!Array.isArray(plugins)) {\n    // Capture variable so TypeScript is happy\n    const pc = plugins;\n    plugins = Object.keys(plugins).reduce((acc, curr) => {\n      const p = pc[curr];\n\n      if (typeof p === 'undefined') {\n        console.error(getError_NullConfig(curr));\n        throw new Error(genericErrorText);\n      }\n\n      acc.push([curr, p]);\n      return acc;\n    }, []);\n  }\n\n  const parsed = [];\n  plugins.forEach(plugin => {\n    if (plugin == null) {\n      console.warn(`${_chalk.default.yellow.bold('Warning')}: A ${_chalk.default.bold('null')} PostCSS plugin was provided. This entry will be ignored.`);\n    } else if (typeof plugin === 'string') {\n      parsed.push([plugin, true]);\n    } else if (Array.isArray(plugin)) {\n      const pluginName = plugin[0];\n      const pluginConfig = plugin[1];\n\n      if (typeof pluginName === 'string' && (typeof pluginConfig === 'boolean' || typeof pluginConfig === 'object')) {\n        parsed.push([pluginName, pluginConfig]);\n      } else {\n        if (typeof pluginName !== 'string') {\n          console.error(`${_chalk.default.red.bold('Error')}: A PostCSS Plugin must be provided as a ${_chalk.default.bold('string')}. Instead, we got: '${pluginName}'.\\n` + 'Read more: https://err.sh/next.js/postcss-shape');\n        } else {\n          console.error(`${_chalk.default.red.bold('Error')}: A PostCSS Plugin was passed as an array but did not provide its configuration ('${pluginName}').\\n` + 'Read more: https://err.sh/next.js/postcss-shape');\n        }\n\n        throw new Error(genericErrorText);\n      }\n    } else if (typeof plugin === 'function') {\n      console.error(`${_chalk.default.red.bold('Error')}: A PostCSS Plugin was passed as a function using require(), but it must be provided as a ${_chalk.default.bold('string')}.\\nRead more: https://err.sh/next.js/postcss-shape`);\n      throw new Error(genericErrorText);\n    } else {\n      console.error(`${_chalk.default.red.bold('Error')}: An unknown PostCSS plugin was provided (${plugin}).\\n` + 'Read more: https://err.sh/next.js/postcss-shape');\n      throw new Error(genericErrorText);\n    }\n  });\n  const resolved = await Promise.all(parsed.map(p => loadPlugin(dir, p[0], p[1])));\n  const filtered = resolved.filter(Boolean);\n  return filtered;\n}","map":{"version":3,"sources":["../../../../../../build/webpack/config/blocks/css/plugins.ts"],"names":["genericErrorText","chalk","pluginName","ignoredRegex","match","plugin","console","options","isIgnoredPlugin","getError_NullConfig","pluginPath","dir","require","keys","Object","browsers","browserslist","path","env","isProduction","autoprefixer","flexbox","stage","features","defaults","config","plugins","getDefaultPlugins","invalidKey","key","Array","pc","p","acc","parsed","pluginConfig","resolved","Promise","loadPlugin","filtered"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { findConfig } from '../../../../../lib/find-config'\nimport { resolveRequest } from '../../../../../lib/resolve-request'\nimport browserslist from 'browserslist'\n\ntype CssPluginCollection_Array = (string | [string, boolean | object])[]\n\ntype CssPluginCollection_Object = { [key: string]: object | boolean }\n\ntype CssPluginCollection =\n  | CssPluginCollection_Array\n  | CssPluginCollection_Object\n\ntype CssPluginShape = [string, object | boolean]\n\nconst genericErrorText = 'Malformed PostCSS Configuration'\n\nfunction getError_NullConfig(pluginName: string) {\n  return `${chalk.red.bold(\n    'Error'\n  )}: Your PostCSS configuration for '${pluginName}' cannot have ${chalk.bold(\n    'null'\n  )} configuration.\\nTo disable '${pluginName}', pass ${chalk.bold(\n    'false'\n  )}, otherwise, pass ${chalk.bold('true')} or a configuration object.`\n}\n\nfunction isIgnoredPlugin(pluginPath: string): boolean {\n  const ignoredRegex = /(?:^|[\\\\/])(postcss-modules-values|postcss-modules-scope|postcss-modules-extract-imports|postcss-modules-local-by-default|postcss-modules)(?:[\\\\/]|$)/i\n  const match = ignoredRegex.exec(pluginPath)\n  if (match == null) {\n    return false\n  }\n\n  const plugin = match.pop()!\n  console.warn(\n    `${chalk.yellow.bold('Warning')}: Please remove the ${chalk.underline(\n      plugin\n    )} plugin from your PostCSS configuration. ` +\n      `This plugin is automatically configured by Next.js.\\n` +\n      'Read more: https://err.sh/next.js/postcss-ignored-plugin'\n  )\n  return true\n}\n\nasync function loadPlugin(\n  dir: string,\n  pluginName: string,\n  options: boolean | object\n): Promise<import('postcss').AcceptedPlugin | false> {\n  if (options === false || isIgnoredPlugin(pluginName)) {\n    return false\n  }\n\n  if (options == null) {\n    console.error(getError_NullConfig(pluginName))\n    throw new Error(genericErrorText)\n  }\n\n  const pluginPath = resolveRequest(pluginName, `${dir}/`)\n  if (isIgnoredPlugin(pluginPath)) {\n    return false\n  } else if (options === true) {\n    return require(pluginPath)\n  } else {\n    const keys = Object.keys(options)\n    if (keys.length === 0) {\n      return require(pluginPath)\n    }\n    return require(pluginPath)(options)\n  }\n}\n\nfunction getDefaultPlugins(\n  baseDirectory: string,\n  isProduction: boolean\n): CssPluginCollection {\n  let browsers: any\n  try {\n    browsers = browserslist.loadConfig({\n      path: baseDirectory,\n      env: isProduction ? 'production' : 'development',\n    })\n  } catch {}\n\n  return [\n    require.resolve('next/dist/compiled/postcss-flexbugs-fixes'),\n    [\n      require.resolve('next/dist/compiled/postcss-preset-env'),\n      {\n        browsers: browsers ?? ['defaults'],\n        autoprefixer: {\n          // Disable legacy flexbox support\n          flexbox: 'no-2009',\n        },\n        // Enable CSS features that have shipped to the\n        // web platform, i.e. in 2+ browsers unflagged.\n        stage: 3,\n        features: {\n          'custom-properties': false,\n        },\n      },\n    ],\n  ]\n}\n\nexport async function getPostCssPlugins(\n  dir: string,\n  isProduction: boolean,\n  defaults: boolean = false\n): Promise<import('postcss').AcceptedPlugin[]> {\n  let config = defaults\n    ? null\n    : await findConfig<{ plugins: CssPluginCollection }>(dir, 'postcss')\n\n  if (config == null) {\n    config = { plugins: getDefaultPlugins(dir, isProduction) }\n  }\n\n  if (typeof config === 'function') {\n    throw new Error(\n      `Your custom PostCSS configuration may not export a function. Please export a plain object instead.\\n` +\n        'Read more: https://err.sh/next.js/postcss-function'\n    )\n  }\n\n  // Warn user about configuration keys which are not respected\n  const invalidKey = Object.keys(config).find((key) => key !== 'plugins')\n  if (invalidKey) {\n    console.warn(\n      `${chalk.yellow.bold(\n        'Warning'\n      )}: Your PostCSS configuration defines a field which is not supported (\\`${invalidKey}\\`). ` +\n        `Please remove this configuration value.`\n    )\n  }\n\n  // Enforce the user provided plugins if the configuration file is present\n  let plugins = config.plugins\n  if (plugins == null || typeof plugins !== 'object') {\n    throw new Error(\n      `Your custom PostCSS configuration must export a \\`plugins\\` key.`\n    )\n  }\n\n  if (!Array.isArray(plugins)) {\n    // Capture variable so TypeScript is happy\n    const pc = plugins\n\n    plugins = Object.keys(plugins).reduce((acc, curr) => {\n      const p = pc[curr]\n      if (typeof p === 'undefined') {\n        console.error(getError_NullConfig(curr))\n        throw new Error(genericErrorText)\n      }\n\n      acc.push([curr, p])\n      return acc\n    }, [] as CssPluginCollection_Array)\n  }\n\n  const parsed: CssPluginShape[] = []\n  plugins.forEach((plugin) => {\n    if (plugin == null) {\n      console.warn(\n        `${chalk.yellow.bold('Warning')}: A ${chalk.bold(\n          'null'\n        )} PostCSS plugin was provided. This entry will be ignored.`\n      )\n    } else if (typeof plugin === 'string') {\n      parsed.push([plugin, true])\n    } else if (Array.isArray(plugin)) {\n      const pluginName = plugin[0]\n      const pluginConfig = plugin[1]\n      if (\n        typeof pluginName === 'string' &&\n        (typeof pluginConfig === 'boolean' || typeof pluginConfig === 'object')\n      ) {\n        parsed.push([pluginName, pluginConfig])\n      } else {\n        if (typeof pluginName !== 'string') {\n          console.error(\n            `${chalk.red.bold(\n              'Error'\n            )}: A PostCSS Plugin must be provided as a ${chalk.bold(\n              'string'\n            )}. Instead, we got: '${pluginName}'.\\n` +\n              'Read more: https://err.sh/next.js/postcss-shape'\n          )\n        } else {\n          console.error(\n            `${chalk.red.bold(\n              'Error'\n            )}: A PostCSS Plugin was passed as an array but did not provide its configuration ('${pluginName}').\\n` +\n              'Read more: https://err.sh/next.js/postcss-shape'\n          )\n        }\n        throw new Error(genericErrorText)\n      }\n    } else if (typeof plugin === 'function') {\n      console.error(\n        `${chalk.red.bold(\n          'Error'\n        )}: A PostCSS Plugin was passed as a function using require(), but it must be provided as a ${chalk.bold(\n          'string'\n        )}.\\nRead more: https://err.sh/next.js/postcss-shape`\n      )\n      throw new Error(genericErrorText)\n    } else {\n      console.error(\n        `${chalk.red.bold(\n          'Error'\n        )}: An unknown PostCSS plugin was provided (${plugin}).\\n` +\n          'Read more: https://err.sh/next.js/postcss-shape'\n      )\n      throw new Error(genericErrorText)\n    }\n  })\n\n  const resolved = await Promise.all(\n    parsed.map((p) => loadPlugin(dir, p[0], p[1]))\n  )\n  const filtered: import('postcss').AcceptedPlugin[] = resolved.filter(\n    Boolean\n  ) as import('postcss').AcceptedPlugin[]\n\n  return filtered\n}\n"]},"metadata":{},"sourceType":"script"}