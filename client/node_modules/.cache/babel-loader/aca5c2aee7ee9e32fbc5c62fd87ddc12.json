{"ast":null,"code":"/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  insertAfter,\n  createElement,\n  firstChildByTag\n} = require('../NodeUtils');\n\nconst {\n  findMetaViewport\n} = require('../HtmlDomHelper');\n/**\n * Adds a preconnect instruction to `fonts.gstatic.com` when the Google Fonts CSS\n * is used in the page.\n *\n * The Google Fonts CSS requests fonts `https://fonts.gstatic.com` after it is loaded.\n * Browsers only connect to this domain after the CSS has been downloaded and the CSSOM has been\n * constructed.\n *\n * By preconnecting earlier, the DNS resolution, TCP connection and SSL handshake are performed\n * sooner, saving up to 1 second on regular 3G networks, resulting on the Fonts being loaded\n * earlier.\n *\n * The transformer will only issue the preconnect instruction if Google Fonts is used on the page.\n */\n\n\nclass GoogleFontsPreconnect {\n  constructor(config) {\n    this.log_ = config.log.tag('GoogleFontsPreconnect');\n  }\n\n  transform(root) {\n    const html = firstChildByTag(root, 'html');\n\n    if (!html) {\n      return;\n    }\n\n    const head = firstChildByTag(html, 'head');\n\n    if (!head) {\n      return;\n    }\n\n    for (let node = head.firstChild; node !== null; node = node.nextSibling) {\n      if (this.isGoogleFontsLinkNode_(node)) {\n        // Preconnect to fonts.gstatic.com, where the final fonts are downloaded.\n        const linkPreconnect = createElement('link', {\n          rel: 'dns-prefetch preconnect',\n          href: 'https://fonts.gstatic.com',\n          crossorigin: ''\n        });\n        const referenceNode = findMetaViewport(head);\n        insertAfter(head, linkPreconnect, referenceNode);\n        this.log_.debug('adding <link rel=\"dns=prefetch preconnect\" href=\"' + linkPreconnect.attribs.href + '\">'); // We only need 1 preconnect, so we can skip the remaining elements and return.\n\n        return;\n      }\n    }\n  }\n\n  isGoogleFontsLinkNode_(node) {\n    return node.tagName === 'link' && node.attribs.rel === 'stylesheet' && node.attribs.href.startsWith('https://fonts.googleapis.com');\n  }\n\n}\n/** @module GoogleFontsPreconnect */\n\n\nmodule.exports = GoogleFontsPreconnect;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/GoogleFontsPreconnect.js"],"names":["insertAfter","createElement","firstChildByTag","require","findMetaViewport","GoogleFontsPreconnect","constructor","config","log_","log","tag","transform","root","html","head","node","firstChild","nextSibling","isGoogleFontsLinkNode_","linkPreconnect","rel","href","crossorigin","referenceNode","debug","attribs","tagName","startsWith","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAACA,EAAAA,WAAD;AAAcC,EAAAA,aAAd;AAA6BC,EAAAA;AAA7B,IAAgDC,OAAO,CAAC,cAAD,CAA7D;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAqBD,OAAO,CAAC,kBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,qBAAN,CAA4B;AAC1BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,IAAL,GAAYD,MAAM,CAACE,GAAP,CAAWC,GAAX,CAAe,uBAAf,CAAZ;AACD;;AAEDC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,UAAMC,IAAI,GAAGX,eAAe,CAACU,IAAD,EAAO,MAAP,CAA5B;;AACA,QAAI,CAACC,IAAL,EAAW;AACT;AACD;;AACD,UAAMC,IAAI,GAAGZ,eAAe,CAACW,IAAD,EAAO,MAAP,CAA5B;;AACA,QAAI,CAACC,IAAL,EAAW;AACT;AACD;;AAED,SAAK,IAAIC,IAAI,GAAGD,IAAI,CAACE,UAArB,EAAiCD,IAAI,KAAK,IAA1C,EAAgDA,IAAI,GAAGA,IAAI,CAACE,WAA5D,EAAyE;AACvE,UAAI,KAAKC,sBAAL,CAA4BH,IAA5B,CAAJ,EAAuC;AACrC;AACA,cAAMI,cAAc,GAAGlB,aAAa,CAAC,MAAD,EAAS;AAC3CmB,UAAAA,GAAG,EAAE,yBADsC;AAE3CC,UAAAA,IAAI,EAAE,2BAFqC;AAG3CC,UAAAA,WAAW,EAAE;AAH8B,SAAT,CAApC;AAKA,cAAMC,aAAa,GAAGnB,gBAAgB,CAACU,IAAD,CAAtC;AACAd,QAAAA,WAAW,CAACc,IAAD,EAAOK,cAAP,EAAuBI,aAAvB,CAAX;AACA,aAAKf,IAAL,CAAUgB,KAAV,CACE,sDAAsDL,cAAc,CAACM,OAAf,CAAuBJ,IAA7E,GAAoF,IADtF,EATqC,CAarC;;AACA;AACD;AACF;AACF;;AAEDH,EAAAA,sBAAsB,CAACH,IAAD,EAAO;AAC3B,WACEA,IAAI,CAACW,OAAL,KAAiB,MAAjB,IACAX,IAAI,CAACU,OAAL,CAAaL,GAAb,KAAqB,YADrB,IAEAL,IAAI,CAACU,OAAL,CAAaJ,IAAb,CAAkBM,UAAlB,CAA6B,8BAA7B,CAHF;AAKD;;AAzCyB;AA4C5B;;;AACAC,MAAM,CAACC,OAAP,GAAiBxB,qBAAjB","sourcesContent":["/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nconst {insertAfter, createElement, firstChildByTag} = require('../NodeUtils');\nconst {findMetaViewport} = require('../HtmlDomHelper');\n\n/**\n * Adds a preconnect instruction to `fonts.gstatic.com` when the Google Fonts CSS\n * is used in the page.\n *\n * The Google Fonts CSS requests fonts `https://fonts.gstatic.com` after it is loaded.\n * Browsers only connect to this domain after the CSS has been downloaded and the CSSOM has been\n * constructed.\n *\n * By preconnecting earlier, the DNS resolution, TCP connection and SSL handshake are performed\n * sooner, saving up to 1 second on regular 3G networks, resulting on the Fonts being loaded\n * earlier.\n *\n * The transformer will only issue the preconnect instruction if Google Fonts is used on the page.\n */\nclass GoogleFontsPreconnect {\n  constructor(config) {\n    this.log_ = config.log.tag('GoogleFontsPreconnect');\n  }\n\n  transform(root) {\n    const html = firstChildByTag(root, 'html');\n    if (!html) {\n      return;\n    }\n    const head = firstChildByTag(html, 'head');\n    if (!head) {\n      return;\n    }\n\n    for (let node = head.firstChild; node !== null; node = node.nextSibling) {\n      if (this.isGoogleFontsLinkNode_(node)) {\n        // Preconnect to fonts.gstatic.com, where the final fonts are downloaded.\n        const linkPreconnect = createElement('link', {\n          rel: 'dns-prefetch preconnect',\n          href: 'https://fonts.gstatic.com',\n          crossorigin: '',\n        });\n        const referenceNode = findMetaViewport(head);\n        insertAfter(head, linkPreconnect, referenceNode);\n        this.log_.debug(\n          'adding <link rel=\"dns=prefetch preconnect\" href=\"' + linkPreconnect.attribs.href + '\">'\n        );\n\n        // We only need 1 preconnect, so we can skip the remaining elements and return.\n        return;\n      }\n    }\n  }\n\n  isGoogleFontsLinkNode_(node) {\n    return (\n      node.tagName === 'link' &&\n      node.attribs.rel === 'stylesheet' &&\n      node.attribs.href.startsWith('https://fonts.googleapis.com')\n    );\n  }\n}\n\n/** @module GoogleFontsPreconnect */\nmodule.exports = GoogleFontsPreconnect;\n"]},"metadata":{},"sourceType":"script"}