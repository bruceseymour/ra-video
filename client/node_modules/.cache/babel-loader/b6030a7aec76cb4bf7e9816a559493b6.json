{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getTypeScriptConfiguration = getTypeScriptConfiguration;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _path = _interopRequireDefault(require(\"path\"));\n\nvar _FatalTypeScriptError = require(\"./FatalTypeScriptError\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nasync function getTypeScriptConfiguration(ts, tsConfigPath) {\n  try {\n    var _result$errors;\n\n    const formatDiagnosticsHost = {\n      getCanonicalFileName: fileName => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => _os.default.EOL\n    };\n    const {\n      config,\n      error\n    } = ts.readConfigFile(tsConfigPath, ts.sys.readFile);\n\n    if (error) {\n      throw new _FatalTypeScriptError.FatalTypeScriptError(ts.formatDiagnostic(error, formatDiagnosticsHost));\n    }\n\n    const result = ts.parseJsonConfigFileContent(config, ts.sys, _path.default.dirname(tsConfigPath));\n\n    if (result.errors) {\n      result.errors = result.errors.filter(({\n        code\n      }) => // No inputs were found in config file\n      code !== 18003);\n    }\n\n    if ((_result$errors = result.errors) != null && _result$errors.length) {\n      throw new _FatalTypeScriptError.FatalTypeScriptError(ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost));\n    }\n\n    return result;\n  } catch (err) {\n    if ((err == null ? void 0 : err.name) === 'SyntaxError') {\n      var _err$message;\n\n      const reason = '\\n' + ((_err$message = err == null ? void 0 : err.message) != null ? _err$message : '');\n      throw new _FatalTypeScriptError.FatalTypeScriptError(_chalk.default.red.bold('Could not parse', _chalk.default.cyan('tsconfig.json') + '.' + ' Please make sure it contains syntactically correct JSON.') + reason);\n    }\n\n    throw err;\n  }\n}","map":{"version":3,"sources":["../../../lib/typescript/getTypeScriptConfiguration.ts"],"names":["formatDiagnosticsHost","getCanonicalFileName","fileName","getCurrentDirectory","ts","getNewLine","os","FatalTypeScriptError","result","path","code","reason","err","chalk"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,KAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;;AACA,IAAA,qBAAA,GAAA,OAAA,CAAA,wBAAA,CAAA;;;;;;AAEO;;AAAA,eAAA,0BAAA,CAAA,EAAA,EAAA,YAAA,EAG4C;AACjD,MAAI;AAAA,QAAA,cAAA;;AACF,UAAMA,qBAAiE,GAAG;AACxEC,MAAAA,oBAAoB,EAAGC,QAAD,IADkD,QAAA;AAExEC,MAAAA,mBAAmB,EAAEC,EAAE,CAAFA,GAAAA,CAFmD,mBAAA;AAGxEC,MAAAA,UAAU,EAAE,MAAMC,GAAAA,CAAAA,OAAAA,CAHpB;AAA0E,KAA1E;AAMA,UAAM;AAAA,MAAA,MAAA;AAAA,MAAA;AAAA,QAAoBF,EAAE,CAAFA,cAAAA,CAAAA,YAAAA,EAAgCA,EAAE,CAAFA,GAAAA,CAA1D,QAA0BA,CAA1B;;AACA,QAAA,KAAA,EAAW;AACT,YAAM,IAAIG,qBAAAA,CAAJ,oBAAA,CACJH,EAAE,CAAFA,gBAAAA,CAAAA,KAAAA,EADF,qBACEA,CADI,CAAN;AAKF;;AAAA,UAAMI,MAAM,GAAGJ,EAAE,CAAFA,0BAAAA,CAAAA,MAAAA,EAEbA,EAAE,CAFWA,GAAAA,EAGbK,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAHF,YAGEA,CAHaL,CAAf;;AAMA,QAAII,MAAM,CAAV,MAAA,EAAmB;AACjB,MAAA,MAAM,CAAN,MAAA,GAAgB,MAAM,CAAN,MAAA,CAAA,MAAA,CACd,CAAC;AAAD,QAAA;AAAC,OAAD,KACE;AACAE,MAAAA,IAAI,KAHR,KAAgB,CAAhB;AAOF;;AAAA,QAAA,CAAA,cAAA,GAAIF,MAAM,CAAV,MAAA,KAAA,IAAA,IAAIA,cAAAA,CAAJ,MAAA,EAA2B;AACzB,YAAM,IAAID,qBAAAA,CAAJ,oBAAA,CACJH,EAAE,CAAFA,gBAAAA,CAAoBI,MAAM,CAANA,MAAAA,CAApBJ,CAAoBI,CAApBJ,EADF,qBACEA,CADI,CAAN;AAKF;;AAAA,WAAA,MAAA;AACA,GAnCF,CAmCE,OAAA,GAAA,EAAY;AACZ,QAAI,CAAA,GAAG,IAAH,IAAA,GAAA,KAAA,CAAA,GAAA,GAAG,CAAH,IAAA,MAAJ,aAAA,EAAiC;AAAA,UAAA,YAAA;;AAC/B,YAAMO,MAAM,GAAG,QAAA,CAAA,YAAA,GAAQC,GAAR,IAAA,IAAQA,GAAR,KAAA,CAAQA,GAAAA,GAAG,CAAX,OAAA,KAAA,IAAA,GAAA,YAAA,GAAf,EAAe,CAAf;AACA,YAAM,IAAIL,qBAAAA,CAAJ,oBAAA,CACJM,MAAAA,CAAAA,OAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,iBAAAA,EAEEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,eAAAA,IAAAA,GAAAA,GAFFA,2DAAAA,IADF,MAAM,CAAN;AASF;;AAAA,UAAA,GAAA;AAEH;AAAA","sourcesContent":["import chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\nimport { FatalTypeScriptError } from './FatalTypeScriptError'\n\nexport async function getTypeScriptConfiguration(\n  ts: typeof import('typescript'),\n  tsConfigPath: string\n): Promise<import('typescript').ParsedCommandLine> {\n  try {\n    const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n      getCanonicalFileName: (fileName: string) => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => os.EOL,\n    }\n\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile)\n    if (error) {\n      throw new FatalTypeScriptError(\n        ts.formatDiagnostic(error, formatDiagnosticsHost)\n      )\n    }\n\n    const result = ts.parseJsonConfigFileContent(\n      config,\n      ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new FatalTypeScriptError(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost)\n      )\n    }\n\n    return result\n  } catch (err) {\n    if (err?.name === 'SyntaxError') {\n      const reason = '\\n' + (err?.message ?? '')\n      throw new FatalTypeScriptError(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') +\n            '.' +\n            ' Please make sure it contains syntactically correct JSON.'\n        ) + reason\n      )\n    }\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"script"}