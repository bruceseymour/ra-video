{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.createPagesMapping = createPagesMapping;\nexports.createEntrypoints = createEntrypoints;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _path = require(\"path\");\n\nvar _querystring = require(\"querystring\");\n\nvar _constants = require(\"../lib/constants\");\n\nvar _config = require(\"../next-server/server/config\");\n\nvar _normalizePagePath = require(\"../next-server/server/normalize-page-path\");\n\nvar _log = require(\"./output/log\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction createPagesMapping(pagePaths, extensions) {\n  const previousPages = {};\n  const pages = pagePaths.reduce((result, pagePath) => {\n    let page = `${pagePath.replace(new RegExp(`\\\\.+(${extensions.join('|')})$`), '').replace(/\\\\/g, '/')}`.replace(/\\/index$/, '');\n    const pageKey = page === '' ? '/' : page;\n\n    if (pageKey in result) {\n      (0, _log.warn)(`Duplicate page detected. ${_chalk.default.cyan((0, _path.join)('pages', previousPages[pageKey]))} and ${_chalk.default.cyan((0, _path.join)('pages', pagePath))} both resolve to ${_chalk.default.cyan(pageKey)}.`);\n    } else {\n      previousPages[pageKey] = pagePath;\n    }\n\n    result[pageKey] = (0, _path.join)(_constants.PAGES_DIR_ALIAS, pagePath).replace(/\\\\/g, '/');\n    return result;\n  }, {});\n  pages['/_app'] = pages['/_app'] || 'next/dist/pages/_app';\n  pages['/_error'] = pages['/_error'] || 'next/dist/pages/_error';\n  pages['/_document'] = pages['/_document'] || 'next/dist/pages/_document';\n  return pages;\n}\n\nfunction createEntrypoints(pages, target, buildId, previewMode, config, loadedEnvFiles) {\n  const client = {};\n  const server = {};\n  const hasRuntimeConfig = Object.keys(config.publicRuntimeConfig).length > 0 || Object.keys(config.serverRuntimeConfig).length > 0;\n  const defaultServerlessOptions = {\n    absoluteAppPath: pages['/_app'],\n    absoluteDocumentPath: pages['/_document'],\n    absoluteErrorPath: pages['/_error'],\n    absolute404Path: pages['/404'] || '',\n    distDir: _constants.DOT_NEXT_ALIAS,\n    buildId,\n    assetPrefix: config.assetPrefix,\n    generateEtags: config.generateEtags,\n    poweredByHeader: config.poweredByHeader,\n    canonicalBase: config.amp.canonicalBase,\n    basePath: config.basePath,\n    runtimeConfig: hasRuntimeConfig ? JSON.stringify({\n      publicRuntimeConfig: config.publicRuntimeConfig,\n      serverRuntimeConfig: config.serverRuntimeConfig\n    }) : '',\n    previewProps: JSON.stringify(previewMode),\n    // base64 encode to make sure contents don't break webpack URL loading\n    loadedEnvFiles: Buffer.from(JSON.stringify(loadedEnvFiles)).toString('base64'),\n    i18n: config.i18n ? JSON.stringify(config.i18n) : ''\n  };\n  Object.keys(pages).forEach(page => {\n    const absolutePagePath = pages[page];\n    const bundleFile = (0, _normalizePagePath.normalizePagePath)(page);\n    const isApiRoute = page.match(_constants.API_ROUTE);\n\n    const clientBundlePath = _path.posix.join('pages', bundleFile);\n\n    const serverBundlePath = _path.posix.join('pages', bundleFile);\n\n    const isLikeServerless = (0, _config.isTargetLikeServerless)(target);\n\n    if (isApiRoute && isLikeServerless) {\n      const serverlessLoaderOptions = {\n        page,\n        absolutePagePath,\n        ...defaultServerlessOptions\n      };\n      server[serverBundlePath] = `next-serverless-loader?${(0, _querystring.stringify)(serverlessLoaderOptions)}!`;\n    } else if (isApiRoute || target === 'server') {\n      server[serverBundlePath] = [absolutePagePath];\n    } else if (isLikeServerless && page !== '/_app' && page !== '/_document') {\n      const serverlessLoaderOptions = {\n        page,\n        absolutePagePath,\n        ...defaultServerlessOptions\n      };\n      server[serverBundlePath] = `next-serverless-loader?${(0, _querystring.stringify)(serverlessLoaderOptions)}!`;\n    }\n\n    if (page === '/_document') {\n      return;\n    }\n\n    if (!isApiRoute) {\n      const pageLoaderOpts = {\n        page,\n        absolutePagePath\n      };\n      const pageLoader = `next-client-pages-loader?${(0, _querystring.stringify)(pageLoaderOpts)}!`; // Make sure next/router is a dependency of _app or else chunk splitting\n      // might cause the router to not be able to load causing hydration\n      // to fail\n\n      client[clientBundlePath] = page === '/_app' ? [pageLoader, require.resolve('../client/router')] : pageLoader;\n    }\n  });\n  return {\n    client,\n    server\n  };\n}","map":{"version":3,"sources":["../../build/entries.ts"],"names":["previousPages","pages","pagePaths","page","pagePath","extensions","pageKey","chalk","result","PAGES_DIR_ALIAS","client","server","hasRuntimeConfig","Object","config","defaultServerlessOptions","absoluteAppPath","absoluteDocumentPath","absoluteErrorPath","absolute404Path","distDir","DOT_NEXT_ALIAS","assetPrefix","generateEtags","poweredByHeader","canonicalBase","basePath","runtimeConfig","JSON","publicRuntimeConfig","serverRuntimeConfig","previewProps","loadedEnvFiles","Buffer","i18n","absolutePagePath","bundleFile","isApiRoute","API_ROUTE","clientBundlePath","posix","serverBundlePath","isLikeServerless","serverlessLoaderOptions","target","pageLoaderOpts","pageLoader","require"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport { posix, join } from 'path'\nimport { stringify } from 'querystring'\nimport { API_ROUTE, DOT_NEXT_ALIAS, PAGES_DIR_ALIAS } from '../lib/constants'\nimport { __ApiPreviewProps } from '../next-server/server/api-utils'\nimport { isTargetLikeServerless } from '../next-server/server/config'\nimport { normalizePagePath } from '../next-server/server/normalize-page-path'\nimport { warn } from './output/log'\nimport { ClientPagesLoaderOptions } from './webpack/loaders/next-client-pages-loader'\nimport { ServerlessLoaderQuery } from './webpack/loaders/next-serverless-loader'\nimport { LoadedEnvFiles } from '@next/env'\nimport { NextConfig } from '../next-server/server/config'\n\ntype PagesMapping = {\n  [page: string]: string\n}\n\nexport function createPagesMapping(\n  pagePaths: string[],\n  extensions: string[]\n): PagesMapping {\n  const previousPages: PagesMapping = {}\n  const pages: PagesMapping = pagePaths.reduce(\n    (result: PagesMapping, pagePath): PagesMapping => {\n      let page = `${pagePath\n        .replace(new RegExp(`\\\\.+(${extensions.join('|')})$`), '')\n        .replace(/\\\\/g, '/')}`.replace(/\\/index$/, '')\n\n      const pageKey = page === '' ? '/' : page\n\n      if (pageKey in result) {\n        warn(\n          `Duplicate page detected. ${chalk.cyan(\n            join('pages', previousPages[pageKey])\n          )} and ${chalk.cyan(\n            join('pages', pagePath)\n          )} both resolve to ${chalk.cyan(pageKey)}.`\n        )\n      } else {\n        previousPages[pageKey] = pagePath\n      }\n      result[pageKey] = join(PAGES_DIR_ALIAS, pagePath).replace(/\\\\/g, '/')\n      return result\n    },\n    {}\n  )\n\n  pages['/_app'] = pages['/_app'] || 'next/dist/pages/_app'\n  pages['/_error'] = pages['/_error'] || 'next/dist/pages/_error'\n  pages['/_document'] = pages['/_document'] || 'next/dist/pages/_document'\n\n  return pages\n}\n\nexport type WebpackEntrypoints = {\n  [bundle: string]: string | string[]\n}\n\ntype Entrypoints = {\n  client: WebpackEntrypoints\n  server: WebpackEntrypoints\n}\n\nexport function createEntrypoints(\n  pages: PagesMapping,\n  target: 'server' | 'serverless' | 'experimental-serverless-trace',\n  buildId: string,\n  previewMode: __ApiPreviewProps,\n  config: NextConfig,\n  loadedEnvFiles: LoadedEnvFiles\n): Entrypoints {\n  const client: WebpackEntrypoints = {}\n  const server: WebpackEntrypoints = {}\n\n  const hasRuntimeConfig =\n    Object.keys(config.publicRuntimeConfig).length > 0 ||\n    Object.keys(config.serverRuntimeConfig).length > 0\n\n  const defaultServerlessOptions = {\n    absoluteAppPath: pages['/_app'],\n    absoluteDocumentPath: pages['/_document'],\n    absoluteErrorPath: pages['/_error'],\n    absolute404Path: pages['/404'] || '',\n    distDir: DOT_NEXT_ALIAS,\n    buildId,\n    assetPrefix: config.assetPrefix,\n    generateEtags: config.generateEtags,\n    poweredByHeader: config.poweredByHeader,\n    canonicalBase: config.amp.canonicalBase,\n    basePath: config.basePath,\n    runtimeConfig: hasRuntimeConfig\n      ? JSON.stringify({\n          publicRuntimeConfig: config.publicRuntimeConfig,\n          serverRuntimeConfig: config.serverRuntimeConfig,\n        })\n      : '',\n    previewProps: JSON.stringify(previewMode),\n    // base64 encode to make sure contents don't break webpack URL loading\n    loadedEnvFiles: Buffer.from(JSON.stringify(loadedEnvFiles)).toString(\n      'base64'\n    ),\n    i18n: config.i18n ? JSON.stringify(config.i18n) : '',\n  }\n\n  Object.keys(pages).forEach((page) => {\n    const absolutePagePath = pages[page]\n    const bundleFile = normalizePagePath(page)\n    const isApiRoute = page.match(API_ROUTE)\n\n    const clientBundlePath = posix.join('pages', bundleFile)\n    const serverBundlePath = posix.join('pages', bundleFile)\n\n    const isLikeServerless = isTargetLikeServerless(target)\n\n    if (isApiRoute && isLikeServerless) {\n      const serverlessLoaderOptions: ServerlessLoaderQuery = {\n        page,\n        absolutePagePath,\n        ...defaultServerlessOptions,\n      }\n      server[serverBundlePath] = `next-serverless-loader?${stringify(\n        serverlessLoaderOptions\n      )}!`\n    } else if (isApiRoute || target === 'server') {\n      server[serverBundlePath] = [absolutePagePath]\n    } else if (isLikeServerless && page !== '/_app' && page !== '/_document') {\n      const serverlessLoaderOptions: ServerlessLoaderQuery = {\n        page,\n        absolutePagePath,\n        ...defaultServerlessOptions,\n      }\n      server[serverBundlePath] = `next-serverless-loader?${stringify(\n        serverlessLoaderOptions\n      )}!`\n    }\n\n    if (page === '/_document') {\n      return\n    }\n\n    if (!isApiRoute) {\n      const pageLoaderOpts: ClientPagesLoaderOptions = {\n        page,\n        absolutePagePath,\n      }\n      const pageLoader = `next-client-pages-loader?${stringify(\n        pageLoaderOpts\n      )}!`\n\n      // Make sure next/router is a dependency of _app or else chunk splitting\n      // might cause the router to not be able to load causing hydration\n      // to fail\n\n      client[clientBundlePath] =\n        page === '/_app'\n          ? [pageLoader, require.resolve('../client/router')]\n          : pageLoader\n    }\n  })\n\n  return {\n    client,\n    server,\n  }\n}\n"]},"metadata":{},"sourceType":"script"}