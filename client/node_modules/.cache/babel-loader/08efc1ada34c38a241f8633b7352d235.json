{"ast":null,"code":"/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst fs = require('fs').promises;\n\nconst {\n  existsSync,\n  mkdirSync\n} = require('fs');\n\nconst crypto = require('crypto');\n\nconst log = require('./Log');\n\nconst LRUCache = require('lru-cache');\n\nconst path = require('path');\n\nconst DEFAULT_OPTS = {\n  baseDir: path.join(__dirname, '.cache'),\n  log,\n  maxItems: 50\n};\n\nclass FileSystemCache {\n  static create(opts = {}) {\n    return new FileSystemCache(Object.assign(DEFAULT_OPTS, opts));\n  }\n\n  constructor(opts) {\n    this.opts = opts;\n    this.cache = new LRUCache(opts.maxItems);\n  }\n\n  async get(key, defaultValue = null) {\n    let value = this.cache.get(key);\n\n    if (value) {\n      return value;\n    }\n\n    const cacheFile = this.createCacheFileName(key);\n\n    try {\n      const content = await fs.readFile(cacheFile, 'utf-8');\n      value = JSON.parse(content);\n      this.cache.set(key, value);\n    } catch (error) {\n      value = defaultValue;\n    }\n\n    return value;\n  }\n\n  async set(key, value) {\n    try {\n      this.cache.set(key, value);\n\n      if (!existsSync(this.opts.baseDir)) {\n        mkdirSync(this.opts.baseDir);\n      }\n\n      const cacheFile = this.createCacheFileName(key);\n      return fs.writeFile(cacheFile, JSON.stringify(value, null, ''), 'utf-8');\n    } catch (e) {\n      this.opts.log.error('Could not write cache file', e);\n    }\n  }\n\n  async clear() {\n    const dir = this.opts.baseDir;\n\n    if (!existsSync(dir)) {\n      return;\n    }\n\n    let entries = await fs.readdir(dir, {\n      withFileTypes: true\n    });\n    await Promise.all(entries.map(entry => {\n      let fullPath = path.join(dir, entry.name);\n      return entry.isFile() && entry.name.endsWith('.json') ? fs.unlink(fullPath) : Promise.resolve();\n    }));\n  }\n\n  createCacheFileName(key) {\n    const keyHash = crypto.createHash('md5').update(key).digest('hex');\n    return path.join(this.opts.baseDir, keyHash + '.json');\n  }\n\n  async deleteDir_(dir) {\n    let entries = await fs.readdir(dir, {\n      withFileTypes: true\n    });\n    await Promise.all(entries.map(entry => {\n      let fullPath = path.join(dir, entry.name);\n      return entry.isDirectory() ? this.deleteDir_(fullPath) : fs.unlink(fullPath);\n    }));\n    await fs.rmdir(dir);\n  }\n\n}\n\nmodule.exports = FileSystemCache;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-core/lib/FileSystemCache.js"],"names":["fs","require","promises","existsSync","mkdirSync","crypto","log","LRUCache","path","DEFAULT_OPTS","baseDir","join","__dirname","maxItems","FileSystemCache","create","opts","Object","assign","constructor","cache","get","key","defaultValue","value","cacheFile","createCacheFileName","content","readFile","JSON","parse","set","error","writeFile","stringify","e","clear","dir","entries","readdir","withFileTypes","Promise","all","map","entry","fullPath","name","isFile","endsWith","unlink","resolve","keyHash","createHash","update","digest","deleteDir_","isDirectory","rmdir","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\nconst fs = require('fs').promises;\nconst {existsSync, mkdirSync} = require('fs');\nconst crypto = require('crypto');\nconst log = require('./Log');\nconst LRUCache = require('lru-cache');\n\nconst path = require('path');\n\nconst DEFAULT_OPTS = {\n  baseDir: path.join(__dirname, '.cache'),\n  log,\n  maxItems: 50,\n};\n\nclass FileSystemCache {\n  static create(opts = {}) {\n    return new FileSystemCache(Object.assign(DEFAULT_OPTS, opts));\n  }\n\n  constructor(opts) {\n    this.opts = opts;\n    this.cache = new LRUCache(opts.maxItems);\n  }\n\n  async get(key, defaultValue = null) {\n    let value = this.cache.get(key);\n    if (value) {\n      return value;\n    }\n    const cacheFile = this.createCacheFileName(key);\n    try {\n      const content = await fs.readFile(cacheFile, 'utf-8');\n      value = JSON.parse(content);\n      this.cache.set(key, value);\n    } catch (error) {\n      value = defaultValue;\n    }\n    return value;\n  }\n\n  async set(key, value) {\n    try {\n      this.cache.set(key, value);\n      if (!existsSync(this.opts.baseDir)) {\n        mkdirSync(this.opts.baseDir);\n      }\n      const cacheFile = this.createCacheFileName(key);\n      return fs.writeFile(cacheFile, JSON.stringify(value, null, ''), 'utf-8');\n    } catch (e) {\n      this.opts.log.error('Could not write cache file', e);\n    }\n  }\n\n  async clear() {\n    const dir = this.opts.baseDir;\n    if (!existsSync(dir)) {\n      return;\n    }\n    let entries = await fs.readdir(dir, {withFileTypes: true});\n    await Promise.all(\n      entries.map((entry) => {\n        let fullPath = path.join(dir, entry.name);\n        return entry.isFile() && entry.name.endsWith('.json')\n          ? fs.unlink(fullPath)\n          : Promise.resolve();\n      })\n    );\n  }\n\n  createCacheFileName(key) {\n    const keyHash = crypto.createHash('md5').update(key).digest('hex');\n    return path.join(this.opts.baseDir, keyHash + '.json');\n  }\n\n  async deleteDir_(dir) {\n    let entries = await fs.readdir(dir, {withFileTypes: true});\n    await Promise.all(\n      entries.map((entry) => {\n        let fullPath = path.join(dir, entry.name);\n        return entry.isDirectory() ? this.deleteDir_(fullPath) : fs.unlink(fullPath);\n      })\n    );\n    await fs.rmdir(dir);\n  }\n}\n\nmodule.exports = FileSystemCache;\n"]},"metadata":{},"sourceType":"script"}