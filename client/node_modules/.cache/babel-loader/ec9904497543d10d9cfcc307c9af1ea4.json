{"ast":null,"code":"/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst PathResolver = require('../PathResolver');\n\nconst {\n  fetchImageDimensions\n} = require('../fetchImageDimensions');\n\nconst {\n  remove,\n  insertAfter,\n  createElement,\n  firstChildByTag,\n  nextNode\n} = require('../NodeUtils');\n\nconst DEFAULT_LAYOUT = 'intrinsic';\nconst LAYOUT_MIN_WIDTH = 320; // minimum mobile device screen width\n\n/**\n * Markdown - ensures markdown compatibility for input HTML\n *\n * This transformer adds out-of-the-box markdown support. This allows\n * using AMP Optimizer to convert HTML documents created from Markdown\n * files into valid AMP. A typical conversion flow would be:\n *\n * README.md => HTML => AMP Optimizer => valid AMP\n *\n * The only thing this transformer does is converting `<img>` tags into\n * either `amp-img` or `amp-anim` tags. All other Markdown features are\n * already supported by AMP. The transformer will try to resolve image\n * dimensions from the actual files. Images larger than 320px will automatically\n * get an intrinsic layout. For image detection to work, an optional dependency\n * `probe-image-size` needs to be installed via NPM.\n *\n * This transformer supports the following options:\n *\n * - `markdown [Boolean]`: enables Markdown HTML support. Default is `false`.\n * - `imageBasePath`: specifies a base path used to resolve an image during build,\n *   this can be a file system path or URL prefix.You can also pass a function\n *   `(imgSrc, params) => '../img/' + imgSrc` for dynamically calculating the image path.\n\n */\n\nclass Markdown {\n  constructor(config) {\n    this.log = config.log;\n    this.enabled = !!config.markdown; // used for resolving image files\n\n    this.pathResolver = new PathResolver(config.imageBasePath);\n  }\n\n  async transform(tree, params) {\n    if (!this.enabled) {\n      return;\n    }\n\n    const html = firstChildByTag(tree, 'html');\n\n    if (!html) {\n      return;\n    }\n\n    const body = firstChildByTag(html, 'body');\n\n    if (!body) {\n      return;\n    }\n\n    let node = body;\n    const promises = [];\n\n    while (node) {\n      const tmpNode = nextNode(node);\n\n      if (node.tagName === 'img') {\n        promises.push(this.transformImg(node, params));\n      }\n\n      node = tmpNode;\n    }\n\n    return Promise.all(promises);\n  }\n\n  async transformImg(imgNode, params) {\n    const src = imgNode.attribs && imgNode.attribs.src;\n\n    if (!src) {\n      return;\n    }\n\n    const resolvedSrc = this.pathResolver.resolve(src, params);\n    let dimensions;\n\n    try {\n      dimensions = await fetchImageDimensions(resolvedSrc);\n    } catch (error) {\n      this.log.warn(error.message); // don't convert images we cannot resolve\n\n      return;\n    }\n\n    const ampImgOrAmpAnim = this.createAmpImgOrAmpAnim(dimensions, imgNode);\n    insertAfter(imgNode.parent, ampImgOrAmpAnim, imgNode);\n    remove(imgNode);\n  }\n\n  createAmpImgOrAmpAnim(dimensions, imgNode) {\n    const ampType = dimensions.type === 'gif' ? 'amp-anim' : 'amp-img';\n    const ampNode = createElement(ampType, imgNode.attribs); // keep height and width if already specified\n\n    ampNode.attribs.width = imgNode.attribs.width || String(dimensions.width);\n    ampNode.attribs.height = imgNode.attribs.height || String(dimensions.height);\n    this.addLayout(ampNode, dimensions);\n    return ampNode;\n  }\n\n  addLayout(node, dimensions) {\n    if (dimensions.width < LAYOUT_MIN_WIDTH) {\n      return;\n    }\n\n    node.attribs.layout = DEFAULT_LAYOUT;\n  }\n\n}\n\nmodule.exports = Markdown;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/Markdown.js"],"names":["PathResolver","require","fetchImageDimensions","remove","insertAfter","createElement","firstChildByTag","nextNode","DEFAULT_LAYOUT","LAYOUT_MIN_WIDTH","Markdown","constructor","config","log","enabled","markdown","pathResolver","imageBasePath","transform","tree","params","html","body","node","promises","tmpNode","tagName","push","transformImg","Promise","all","imgNode","src","attribs","resolvedSrc","resolve","dimensions","error","warn","message","ampImgOrAmpAnim","createAmpImgOrAmpAnim","parent","ampType","type","ampNode","width","String","height","addLayout","layout","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAyBD,OAAO,CAAC,yBAAD,CAAtC;;AACA,MAAM;AAACE,EAAAA,MAAD;AAASC,EAAAA,WAAT;AAAsBC,EAAAA,aAAtB;AAAqCC,EAAAA,eAArC;AAAsDC,EAAAA;AAAtD,IAAkEN,OAAO,CAAC,cAAD,CAA/E;;AAEA,MAAMO,cAAc,GAAG,WAAvB;AACA,MAAMC,gBAAgB,GAAG,GAAzB,C,CAA8B;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKC,GAAL,GAAWD,MAAM,CAACC,GAAlB;AACA,SAAKC,OAAL,GAAe,CAAC,CAACF,MAAM,CAACG,QAAxB,CAFkB,CAGlB;;AACA,SAAKC,YAAL,GAAoB,IAAIhB,YAAJ,CAAiBY,MAAM,CAACK,aAAxB,CAApB;AACD;;AACD,QAAMC,SAAN,CAAgBC,IAAhB,EAAsBC,MAAtB,EAA8B;AAC5B,QAAI,CAAC,KAAKN,OAAV,EAAmB;AACjB;AACD;;AACD,UAAMO,IAAI,GAAGf,eAAe,CAACa,IAAD,EAAO,MAAP,CAA5B;;AACA,QAAI,CAACE,IAAL,EAAW;AACT;AACD;;AACD,UAAMC,IAAI,GAAGhB,eAAe,CAACe,IAAD,EAAO,MAAP,CAA5B;;AACA,QAAI,CAACC,IAAL,EAAW;AACT;AACD;;AACD,QAAIC,IAAI,GAAGD,IAAX;AACA,UAAME,QAAQ,GAAG,EAAjB;;AACA,WAAOD,IAAP,EAAa;AACX,YAAME,OAAO,GAAGlB,QAAQ,CAACgB,IAAD,CAAxB;;AACA,UAAIA,IAAI,CAACG,OAAL,KAAiB,KAArB,EAA4B;AAC1BF,QAAAA,QAAQ,CAACG,IAAT,CAAc,KAAKC,YAAL,CAAkBL,IAAlB,EAAwBH,MAAxB,CAAd;AACD;;AACDG,MAAAA,IAAI,GAAGE,OAAP;AACD;;AACD,WAAOI,OAAO,CAACC,GAAR,CAAYN,QAAZ,CAAP;AACD;;AAED,QAAMI,YAAN,CAAmBG,OAAnB,EAA4BX,MAA5B,EAAoC;AAClC,UAAMY,GAAG,GAAGD,OAAO,CAACE,OAAR,IAAmBF,OAAO,CAACE,OAAR,CAAgBD,GAA/C;;AACA,QAAI,CAACA,GAAL,EAAU;AACR;AACD;;AACD,UAAME,WAAW,GAAG,KAAKlB,YAAL,CAAkBmB,OAAlB,CAA0BH,GAA1B,EAA+BZ,MAA/B,CAApB;AACA,QAAIgB,UAAJ;;AACA,QAAI;AACFA,MAAAA,UAAU,GAAG,MAAMlC,oBAAoB,CAACgC,WAAD,CAAvC;AACD,KAFD,CAEE,OAAOG,KAAP,EAAc;AACd,WAAKxB,GAAL,CAASyB,IAAT,CAAcD,KAAK,CAACE,OAApB,EADc,CAEd;;AACA;AACD;;AACD,UAAMC,eAAe,GAAG,KAAKC,qBAAL,CAA2BL,UAA3B,EAAuCL,OAAvC,CAAxB;AACA3B,IAAAA,WAAW,CAAC2B,OAAO,CAACW,MAAT,EAAiBF,eAAjB,EAAkCT,OAAlC,CAAX;AACA5B,IAAAA,MAAM,CAAC4B,OAAD,CAAN;AACD;;AAEDU,EAAAA,qBAAqB,CAACL,UAAD,EAAaL,OAAb,EAAsB;AACzC,UAAMY,OAAO,GAAGP,UAAU,CAACQ,IAAX,KAAoB,KAApB,GAA4B,UAA5B,GAAyC,SAAzD;AACA,UAAMC,OAAO,GAAGxC,aAAa,CAACsC,OAAD,EAAUZ,OAAO,CAACE,OAAlB,CAA7B,CAFyC,CAGzC;;AACAY,IAAAA,OAAO,CAACZ,OAAR,CAAgBa,KAAhB,GAAwBf,OAAO,CAACE,OAAR,CAAgBa,KAAhB,IAAyBC,MAAM,CAACX,UAAU,CAACU,KAAZ,CAAvD;AACAD,IAAAA,OAAO,CAACZ,OAAR,CAAgBe,MAAhB,GAAyBjB,OAAO,CAACE,OAAR,CAAgBe,MAAhB,IAA0BD,MAAM,CAACX,UAAU,CAACY,MAAZ,CAAzD;AACA,SAAKC,SAAL,CAAeJ,OAAf,EAAwBT,UAAxB;AACA,WAAOS,OAAP;AACD;;AAEDI,EAAAA,SAAS,CAAC1B,IAAD,EAAOa,UAAP,EAAmB;AAC1B,QAAIA,UAAU,CAACU,KAAX,GAAmBrC,gBAAvB,EAAyC;AACvC;AACD;;AACDc,IAAAA,IAAI,CAACU,OAAL,CAAaiB,MAAb,GAAsB1C,cAAtB;AACD;;AAjEY;;AAoEf2C,MAAM,CAACC,OAAP,GAAiB1C,QAAjB","sourcesContent":["/**\n * Copyright 2020 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst PathResolver = require('../PathResolver');\nconst {fetchImageDimensions} = require('../fetchImageDimensions');\nconst {remove, insertAfter, createElement, firstChildByTag, nextNode} = require('../NodeUtils');\n\nconst DEFAULT_LAYOUT = 'intrinsic';\nconst LAYOUT_MIN_WIDTH = 320; // minimum mobile device screen width\n\n/**\n * Markdown - ensures markdown compatibility for input HTML\n *\n * This transformer adds out-of-the-box markdown support. This allows\n * using AMP Optimizer to convert HTML documents created from Markdown\n * files into valid AMP. A typical conversion flow would be:\n *\n * README.md => HTML => AMP Optimizer => valid AMP\n *\n * The only thing this transformer does is converting `<img>` tags into\n * either `amp-img` or `amp-anim` tags. All other Markdown features are\n * already supported by AMP. The transformer will try to resolve image\n * dimensions from the actual files. Images larger than 320px will automatically\n * get an intrinsic layout. For image detection to work, an optional dependency\n * `probe-image-size` needs to be installed via NPM.\n *\n * This transformer supports the following options:\n *\n * - `markdown [Boolean]`: enables Markdown HTML support. Default is `false`.\n * - `imageBasePath`: specifies a base path used to resolve an image during build,\n *   this can be a file system path or URL prefix.You can also pass a function\n *   `(imgSrc, params) => '../img/' + imgSrc` for dynamically calculating the image path.\n\n */\nclass Markdown {\n  constructor(config) {\n    this.log = config.log;\n    this.enabled = !!config.markdown;\n    // used for resolving image files\n    this.pathResolver = new PathResolver(config.imageBasePath);\n  }\n  async transform(tree, params) {\n    if (!this.enabled) {\n      return;\n    }\n    const html = firstChildByTag(tree, 'html');\n    if (!html) {\n      return;\n    }\n    const body = firstChildByTag(html, 'body');\n    if (!body) {\n      return;\n    }\n    let node = body;\n    const promises = [];\n    while (node) {\n      const tmpNode = nextNode(node);\n      if (node.tagName === 'img') {\n        promises.push(this.transformImg(node, params));\n      }\n      node = tmpNode;\n    }\n    return Promise.all(promises);\n  }\n\n  async transformImg(imgNode, params) {\n    const src = imgNode.attribs && imgNode.attribs.src;\n    if (!src) {\n      return;\n    }\n    const resolvedSrc = this.pathResolver.resolve(src, params);\n    let dimensions;\n    try {\n      dimensions = await fetchImageDimensions(resolvedSrc);\n    } catch (error) {\n      this.log.warn(error.message);\n      // don't convert images we cannot resolve\n      return;\n    }\n    const ampImgOrAmpAnim = this.createAmpImgOrAmpAnim(dimensions, imgNode);\n    insertAfter(imgNode.parent, ampImgOrAmpAnim, imgNode);\n    remove(imgNode);\n  }\n\n  createAmpImgOrAmpAnim(dimensions, imgNode) {\n    const ampType = dimensions.type === 'gif' ? 'amp-anim' : 'amp-img';\n    const ampNode = createElement(ampType, imgNode.attribs);\n    // keep height and width if already specified\n    ampNode.attribs.width = imgNode.attribs.width || String(dimensions.width);\n    ampNode.attribs.height = imgNode.attribs.height || String(dimensions.height);\n    this.addLayout(ampNode, dimensions);\n    return ampNode;\n  }\n\n  addLayout(node, dimensions) {\n    if (dimensions.width < LAYOUT_MIN_WIDTH) {\n      return;\n    }\n    node.attribs.layout = DEFAULT_LAYOUT;\n  }\n}\n\nmodule.exports = Markdown;\n"]},"metadata":{},"sourceType":"script"}