{"ast":null,"code":"/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// This solution is temporary and will be replaced when\n// https://github.com/ampproject/amp-toolbox/issues/378 is resolved.\nconst crypto = require('crypto');\n\nconst SUPPORTED_ALGORITHMS = new Set(['sha384']);\nconst DEFAULT_ALGORITHM = 'sha384';\n/**\n * Calculates the hash of the given input and returns a valid CSP string for use\n * with amp-script.\n *\n * @param {string|DataView} src - Input script\n * @param {Object} [options] - The options object\n * @param {string} [options.algorithm] - Algorithm to use, defaults to sha384\n * @returns {string} The hash prefixed with the algorithm used\n */\n\nfunction calculateHash(src, {\n  algorithm = DEFAULT_ALGORITHM\n} = {}) {\n  const algo = algorithm.toLowerCase();\n\n  if (!SUPPORTED_ALGORITHMS.has(algo)) {\n    throw new Error(`Unsupported algorithm for CSP: ${algo}`);\n  }\n\n  if (typeof src === 'string') {\n    src = Buffer.from(src, 'utf8');\n  }\n\n  const hash = crypto.createHash(algo);\n  const data = hash.update(src);\n  const base64 = base64URLFormat(data.digest('base64'));\n  return `${algo}-${base64}`;\n}\n\nfunction base64URLFormat(base64) {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nmodule.exports = {\n  calculateHash\n};","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-script-csp/lib/calculateHash.js"],"names":["crypto","require","SUPPORTED_ALGORITHMS","Set","DEFAULT_ALGORITHM","calculateHash","src","algorithm","algo","toLowerCase","has","Error","Buffer","from","hash","createHash","data","update","base64","base64URLFormat","digest","replace","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAAtB;;AAEA,MAAMC,oBAAoB,GAAG,IAAIC,GAAJ,CAAQ,CAAC,QAAD,CAAR,CAA7B;AAEA,MAAMC,iBAAiB,GAAG,QAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAuBC,GAAvB,EAA4B;AAACC,EAAAA,SAAS,GAAGH;AAAb,IAAkC,EAA9D,EAAkE;AAChE,QAAMI,IAAI,GAAGD,SAAS,CAACE,WAAV,EAAb;;AACA,MAAI,CAACP,oBAAoB,CAACQ,GAArB,CAAyBF,IAAzB,CAAL,EAAqC;AACnC,UAAM,IAAIG,KAAJ,CAAW,kCAAiCH,IAAK,EAAjD,CAAN;AACD;;AAED,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AAC3BA,IAAAA,GAAG,GAAGM,MAAM,CAACC,IAAP,CAAYP,GAAZ,EAAiB,MAAjB,CAAN;AACD;;AAED,QAAMQ,IAAI,GAAGd,MAAM,CAACe,UAAP,CAAkBP,IAAlB,CAAb;AACA,QAAMQ,IAAI,GAAGF,IAAI,CAACG,MAAL,CAAYX,GAAZ,CAAb;AACA,QAAMY,MAAM,GAAGC,eAAe,CAACH,IAAI,CAACI,MAAL,CAAY,QAAZ,CAAD,CAA9B;AACA,SAAQ,GAAEZ,IAAK,IAAGU,MAAO,EAAzB;AACD;;AAED,SAASC,eAAT,CAAyBD,MAAzB,EAAiC;AAC/B,SAAOA,MAAM,CAACG,OAAP,CAAe,IAAf,EAAqB,EAArB,EAAyBA,OAAzB,CAAiC,KAAjC,EAAwC,GAAxC,EAA6CA,OAA7C,CAAqD,KAArD,EAA4D,GAA5D,CAAP;AACD;;AAEDC,MAAM,CAACC,OAAP,GAAiB;AAAClB,EAAAA;AAAD,CAAjB","sourcesContent":["/**\n * Copyright 2019 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// This solution is temporary and will be replaced when\n// https://github.com/ampproject/amp-toolbox/issues/378 is resolved.\n\nconst crypto = require('crypto');\n\nconst SUPPORTED_ALGORITHMS = new Set(['sha384']);\n\nconst DEFAULT_ALGORITHM = 'sha384';\n\n/**\n * Calculates the hash of the given input and returns a valid CSP string for use\n * with amp-script.\n *\n * @param {string|DataView} src - Input script\n * @param {Object} [options] - The options object\n * @param {string} [options.algorithm] - Algorithm to use, defaults to sha384\n * @returns {string} The hash prefixed with the algorithm used\n */\nfunction calculateHash(src, {algorithm = DEFAULT_ALGORITHM} = {}) {\n  const algo = algorithm.toLowerCase();\n  if (!SUPPORTED_ALGORITHMS.has(algo)) {\n    throw new Error(`Unsupported algorithm for CSP: ${algo}`);\n  }\n\n  if (typeof src === 'string') {\n    src = Buffer.from(src, 'utf8');\n  }\n\n  const hash = crypto.createHash(algo);\n  const data = hash.update(src);\n  const base64 = base64URLFormat(data.digest('base64'));\n  return `${algo}-${base64}`;\n}\n\nfunction base64URLFormat(base64) {\n  return base64.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nmodule.exports = {calculateHash};\n"]},"metadata":{},"sourceType":"script"}