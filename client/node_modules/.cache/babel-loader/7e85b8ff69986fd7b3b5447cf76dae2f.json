{"ast":null,"code":"'use strict';\n\nconst color = require('color');\n\nconst is = require('./is');\n\nconst sharp = require('../build/Release/sharp.node');\n/**\n * Extract input options, if any, from an object.\n * @private\n */\n\n\nfunction _inputOptionsFromObject(obj) {\n  const {\n    raw,\n    density,\n    limitInputPixels,\n    sequentialRead,\n    failOnError,\n    animated,\n    page,\n    pages\n  } = obj;\n  return [raw, density, limitInputPixels, sequentialRead, failOnError, animated, page, pages].some(is.defined) ? {\n    raw,\n    density,\n    limitInputPixels,\n    sequentialRead,\n    failOnError,\n    animated,\n    page,\n    pages\n  } : undefined;\n}\n/**\n * Create Object containing input and input-related options.\n * @private\n */\n\n\nfunction _createInputDescriptor(input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOnError: true,\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    sequentialRead: false\n  };\n\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    inputDescriptor.buffer = input;\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''}`);\n  }\n\n  if (is.object(inputOptions)) {\n    // Fail on error\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOnError = inputOptions.failOnError;\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    } // Density\n\n\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    } // limitInputPixels\n\n\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels ? Math.pow(0x3FFF, 2) : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && inputOptions.limitInputPixels >= 0) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'integer >= 0', inputOptions.limitInputPixels);\n      }\n    } // sequentialRead\n\n\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    } // Raw pixel input\n\n\n    if (is.defined(inputOptions.raw)) {\n      if (is.object(inputOptions.raw) && is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 && is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 && is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    } // Multi-page input (GIF, TIFF, PDF)\n\n\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    } // Multi-level input (OpenSlide)\n\n\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    } // Create new image\n\n\n    if (is.defined(inputOptions.create)) {\n      if (is.object(inputOptions.create) && is.integer(inputOptions.create.width) && inputOptions.create.width > 0 && is.integer(inputOptions.create.height) && inputOptions.create.height > 0 && is.integer(inputOptions.create.channels) && is.inRange(inputOptions.create.channels, 3, 4) && is.defined(inputOptions.create.background)) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels;\n        const background = color(inputOptions.create.background);\n        inputDescriptor.createBackground = [background.red(), background.green(), background.blue(), Math.round(background.alpha() * 255)];\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected width, height, channels and background to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n\n  return inputDescriptor;\n}\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\n\n\nfunction _write(chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\n\n\nfunction _flattenBufferIn() {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\n\n\nfunction _isStreamInput() {\n  return Array.isArray(this.options.input.buffer);\n}\n/**\n * Fast access to (uncached) image metadata without decoding any compressed image data.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\n\n\nfunction metadata(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any (experimental)\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any (experimental)\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram (experimental)\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\n\n\nfunction stats(callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\n\n\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/sharp/lib/input.js"],"names":["color","require","is","sharp","_inputOptionsFromObject","obj","raw","density","limitInputPixels","sequentialRead","failOnError","animated","page","pages","some","defined","undefined","_createInputDescriptor","input","inputOptions","containerOptions","inputDescriptor","Math","pow","string","file","buffer","plainObject","object","allowStream","Error","bool","invalidParameterError","inRange","integer","width","height","channels","rawWidth","rawHeight","rawChannels","level","create","background","createWidth","createHeight","createChannels","createBackground","red","green","blue","round","alpha","_write","chunk","encoding","callback","Array","isArray","options","length","on","streamInFinished","push","_flattenBufferIn","_isStreamInput","Buffer","concat","metadata","fn","Promise","resolve","reject","err","stats","module","exports","Sharp","Object","assign","prototype"],"mappings":"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","sourcesContent":["'use strict';\n\nconst color = require('color');\nconst is = require('./is');\nconst sharp = require('../build/Release/sharp.node');\n\n/**\n * Extract input options, if any, from an object.\n * @private\n */\nfunction _inputOptionsFromObject (obj) {\n  const { raw, density, limitInputPixels, sequentialRead, failOnError, animated, page, pages } = obj;\n  return [raw, density, limitInputPixels, sequentialRead, failOnError, animated, page, pages].some(is.defined)\n    ? { raw, density, limitInputPixels, sequentialRead, failOnError, animated, page, pages }\n    : undefined;\n}\n\n/**\n * Create Object containing input and input-related options.\n * @private\n */\nfunction _createInputDescriptor (input, inputOptions, containerOptions) {\n  const inputDescriptor = {\n    failOnError: true,\n    limitInputPixels: Math.pow(0x3FFF, 2),\n    sequentialRead: false\n  };\n  if (is.string(input)) {\n    // filesystem\n    inputDescriptor.file = input;\n  } else if (is.buffer(input)) {\n    // Buffer\n    inputDescriptor.buffer = input;\n  } else if (is.plainObject(input) && !is.defined(inputOptions)) {\n    // Plain Object descriptor, e.g. create\n    inputOptions = input;\n    if (_inputOptionsFromObject(inputOptions)) {\n      // Stream with options\n      inputDescriptor.buffer = [];\n    }\n  } else if (!is.defined(input) && !is.defined(inputOptions) && is.object(containerOptions) && containerOptions.allowStream) {\n    // Stream without options\n    inputDescriptor.buffer = [];\n  } else {\n    throw new Error(`Unsupported input '${input}' of type ${typeof input}${\n      is.defined(inputOptions) ? ` when also providing options of type ${typeof inputOptions}` : ''\n    }`);\n  }\n  if (is.object(inputOptions)) {\n    // Fail on error\n    if (is.defined(inputOptions.failOnError)) {\n      if (is.bool(inputOptions.failOnError)) {\n        inputDescriptor.failOnError = inputOptions.failOnError;\n      } else {\n        throw is.invalidParameterError('failOnError', 'boolean', inputOptions.failOnError);\n      }\n    }\n    // Density\n    if (is.defined(inputOptions.density)) {\n      if (is.inRange(inputOptions.density, 1, 100000)) {\n        inputDescriptor.density = inputOptions.density;\n      } else {\n        throw is.invalidParameterError('density', 'number between 1 and 100000', inputOptions.density);\n      }\n    }\n    // limitInputPixels\n    if (is.defined(inputOptions.limitInputPixels)) {\n      if (is.bool(inputOptions.limitInputPixels)) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels\n          ? Math.pow(0x3FFF, 2)\n          : 0;\n      } else if (is.integer(inputOptions.limitInputPixels) && inputOptions.limitInputPixels >= 0) {\n        inputDescriptor.limitInputPixels = inputOptions.limitInputPixels;\n      } else {\n        throw is.invalidParameterError('limitInputPixels', 'integer >= 0', inputOptions.limitInputPixels);\n      }\n    }\n    // sequentialRead\n    if (is.defined(inputOptions.sequentialRead)) {\n      if (is.bool(inputOptions.sequentialRead)) {\n        inputDescriptor.sequentialRead = inputOptions.sequentialRead;\n      } else {\n        throw is.invalidParameterError('sequentialRead', 'boolean', inputOptions.sequentialRead);\n      }\n    }\n    // Raw pixel input\n    if (is.defined(inputOptions.raw)) {\n      if (\n        is.object(inputOptions.raw) &&\n        is.integer(inputOptions.raw.width) && inputOptions.raw.width > 0 &&\n        is.integer(inputOptions.raw.height) && inputOptions.raw.height > 0 &&\n        is.integer(inputOptions.raw.channels) && is.inRange(inputOptions.raw.channels, 1, 4)\n      ) {\n        inputDescriptor.rawWidth = inputOptions.raw.width;\n        inputDescriptor.rawHeight = inputOptions.raw.height;\n        inputDescriptor.rawChannels = inputOptions.raw.channels;\n      } else {\n        throw new Error('Expected width, height and channels for raw pixel input');\n      }\n    }\n    // Multi-page input (GIF, TIFF, PDF)\n    if (is.defined(inputOptions.animated)) {\n      if (is.bool(inputOptions.animated)) {\n        inputDescriptor.pages = inputOptions.animated ? -1 : 1;\n      } else {\n        throw is.invalidParameterError('animated', 'boolean', inputOptions.animated);\n      }\n    }\n    if (is.defined(inputOptions.pages)) {\n      if (is.integer(inputOptions.pages) && is.inRange(inputOptions.pages, -1, 100000)) {\n        inputDescriptor.pages = inputOptions.pages;\n      } else {\n        throw is.invalidParameterError('pages', 'integer between -1 and 100000', inputOptions.pages);\n      }\n    }\n    if (is.defined(inputOptions.page)) {\n      if (is.integer(inputOptions.page) && is.inRange(inputOptions.page, 0, 100000)) {\n        inputDescriptor.page = inputOptions.page;\n      } else {\n        throw is.invalidParameterError('page', 'integer between 0 and 100000', inputOptions.page);\n      }\n    }\n    // Multi-level input (OpenSlide)\n    if (is.defined(inputOptions.level)) {\n      if (is.integer(inputOptions.level) && is.inRange(inputOptions.level, 0, 256)) {\n        inputDescriptor.level = inputOptions.level;\n      } else {\n        throw is.invalidParameterError('level', 'integer between 0 and 256', inputOptions.level);\n      }\n    }\n    // Create new image\n    if (is.defined(inputOptions.create)) {\n      if (\n        is.object(inputOptions.create) &&\n        is.integer(inputOptions.create.width) && inputOptions.create.width > 0 &&\n        is.integer(inputOptions.create.height) && inputOptions.create.height > 0 &&\n        is.integer(inputOptions.create.channels) && is.inRange(inputOptions.create.channels, 3, 4) &&\n        is.defined(inputOptions.create.background)\n      ) {\n        inputDescriptor.createWidth = inputOptions.create.width;\n        inputDescriptor.createHeight = inputOptions.create.height;\n        inputDescriptor.createChannels = inputOptions.create.channels;\n        const background = color(inputOptions.create.background);\n        inputDescriptor.createBackground = [\n          background.red(),\n          background.green(),\n          background.blue(),\n          Math.round(background.alpha() * 255)\n        ];\n        delete inputDescriptor.buffer;\n      } else {\n        throw new Error('Expected width, height, channels and background to create a new input image');\n      }\n    }\n  } else if (is.defined(inputOptions)) {\n    throw new Error('Invalid input options ' + inputOptions);\n  }\n  return inputDescriptor;\n}\n\n/**\n * Handle incoming Buffer chunk on Writable Stream.\n * @private\n * @param {Buffer} chunk\n * @param {string} encoding - unused\n * @param {Function} callback\n */\nfunction _write (chunk, encoding, callback) {\n  /* istanbul ignore else */\n  if (Array.isArray(this.options.input.buffer)) {\n    /* istanbul ignore else */\n    if (is.buffer(chunk)) {\n      if (this.options.input.buffer.length === 0) {\n        this.on('finish', () => {\n          this.streamInFinished = true;\n        });\n      }\n      this.options.input.buffer.push(chunk);\n      callback();\n    } else {\n      callback(new Error('Non-Buffer data on Writable Stream'));\n    }\n  } else {\n    callback(new Error('Unexpected data on Writable Stream'));\n  }\n}\n\n/**\n * Flattens the array of chunks accumulated in input.buffer.\n * @private\n */\nfunction _flattenBufferIn () {\n  if (this._isStreamInput()) {\n    this.options.input.buffer = Buffer.concat(this.options.input.buffer);\n  }\n}\n\n/**\n * Are we expecting Stream-based input?\n * @private\n * @returns {boolean}\n */\nfunction _isStreamInput () {\n  return Array.isArray(this.options.input.buffer);\n}\n\n/**\n * Fast access to (uncached) image metadata without decoding any compressed image data.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `format`: Name of decoder used to decompress image data e.g. `jpeg`, `png`, `webp`, `gif`, `svg`\n * - `size`: Total size of image in bytes, for Stream and Buffer input only\n * - `width`: Number of pixels wide (EXIF orientation is not taken into consideration)\n * - `height`: Number of pixels high (EXIF orientation is not taken into consideration)\n * - `space`: Name of colour space interpretation e.g. `srgb`, `rgb`, `cmyk`, `lab`, `b-w` [...](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsInterpretation)\n * - `channels`: Number of bands e.g. `3` for sRGB, `4` for CMYK\n * - `depth`: Name of pixel depth format e.g. `uchar`, `char`, `ushort`, `float` [...](https://libvips.github.io/libvips/API/current/VipsImage.html#VipsBandFormat)\n * - `density`: Number of pixels per inch (DPI), if present\n * - `chromaSubsampling`: String containing JPEG chroma subsampling, `4:2:0` or `4:4:4` for RGB, `4:2:0:4` or `4:4:4:4` for CMYK\n * - `isProgressive`: Boolean indicating whether the image is interlaced using a progressive scan\n * - `pages`: Number of pages/frames contained within the image, with support for TIFF, HEIF, PDF, animated GIF and animated WebP\n * - `pageHeight`: Number of pixels high each page in a multi-page image will be.\n * - `loop`: Number of times to loop an animated image, zero refers to a continuous loop.\n * - `delay`: Delay in ms between each page in an animated image, provided as an array of integers.\n * - `pagePrimary`: Number of the primary page in a HEIF image\n * - `levels`: Details of each level in a multi-level image provided as an array of objects, requires libvips compiled with support for OpenSlide\n * - `hasProfile`: Boolean indicating the presence of an embedded ICC profile\n * - `hasAlpha`: Boolean indicating the presence of an alpha transparency channel\n * - `orientation`: Number value of the EXIF Orientation header, if present\n * - `exif`: Buffer containing raw EXIF data, if present\n * - `icc`: Buffer containing raw [ICC](https://www.npmjs.com/package/icc) profile data, if present\n * - `iptc`: Buffer containing raw IPTC data, if present\n * - `xmp`: Buffer containing raw XMP data, if present\n * - `tifftagPhotoshop`: Buffer containing raw TIFFTAG_PHOTOSHOP data, if present\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .metadata()\n *   .then(function(metadata) {\n *     return image\n *       .resize(Math.round(metadata.width / 2))\n *       .webp()\n *       .toBuffer();\n *   })\n *   .then(function(data) {\n *     // data contains a WebP image half the width and height of the original JPEG\n *   });\n *\n * @param {Function} [callback] - called with the arguments `(err, metadata)`\n * @returns {Promise<Object>|Sharp}\n */\nfunction metadata (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.metadata(this.options, callback);\n      });\n    } else {\n      sharp.metadata(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', () => {\n          this._flattenBufferIn();\n          sharp.metadata(this.options, (err, metadata) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(metadata);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.metadata(this.options, (err, metadata) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(metadata);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Access to pixel-derived image statistics for every channel in the image.\n * A `Promise` is returned when `callback` is not provided.\n *\n * - `channels`: Array of channel statistics for each channel in the image. Each channel statistic contains\n *     - `min` (minimum value in the channel)\n *     - `max` (maximum value in the channel)\n *     - `sum` (sum of all values in a channel)\n *     - `squaresSum` (sum of squared values in a channel)\n *     - `mean` (mean of the values in a channel)\n *     - `stdev` (standard deviation for the values in a channel)\n *     - `minX` (x-coordinate of one of the pixel where the minimum lies)\n *     - `minY` (y-coordinate of one of the pixel where the minimum lies)\n *     - `maxX` (x-coordinate of one of the pixel where the maximum lies)\n *     - `maxY` (y-coordinate of one of the pixel where the maximum lies)\n * - `isOpaque`: Is the image fully opaque? Will be `true` if the image has no alpha channel or if every pixel is fully opaque.\n * - `entropy`: Histogram-based estimation of greyscale entropy, discarding alpha channel if any (experimental)\n * - `sharpness`: Estimation of greyscale sharpness based on the standard deviation of a Laplacian convolution, discarding alpha channel if any (experimental)\n * - `dominant`: Object containing most dominant sRGB colour based on a 4096-bin 3D histogram (experimental)\n *\n * @example\n * const image = sharp(inputJpg);\n * image\n *   .stats()\n *   .then(function(stats) {\n *      // stats contains the channel-wise statistics array and the isOpaque value\n *   });\n *\n * @example\n * const { entropy, sharpness, dominant } = await sharp(input).stats();\n * const { r, g, b } = dominant;\n *\n * @param {Function} [callback] - called with the arguments `(err, stats)`\n * @returns {Promise<Object>}\n */\nfunction stats (callback) {\n  if (is.fn(callback)) {\n    if (this._isStreamInput()) {\n      this.on('finish', () => {\n        this._flattenBufferIn();\n        sharp.stats(this.options, callback);\n      });\n    } else {\n      sharp.stats(this.options, callback);\n    }\n    return this;\n  } else {\n    if (this._isStreamInput()) {\n      return new Promise((resolve, reject) => {\n        this.on('finish', function () {\n          this._flattenBufferIn();\n          sharp.stats(this.options, (err, stats) => {\n            if (err) {\n              reject(err);\n            } else {\n              resolve(stats);\n            }\n          });\n        });\n      });\n    } else {\n      return new Promise((resolve, reject) => {\n        sharp.stats(this.options, (err, stats) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(stats);\n          }\n        });\n      });\n    }\n  }\n}\n\n/**\n * Decorate the Sharp prototype with input-related functions.\n * @private\n */\nmodule.exports = function (Sharp) {\n  Object.assign(Sharp.prototype, {\n    // Private\n    _inputOptionsFromObject,\n    _createInputDescriptor,\n    _write,\n    _flattenBufferIn,\n    _isStreamInput,\n    // Public\n    metadata,\n    stats\n  });\n};\n"]},"metadata":{},"sourceType":"script"}