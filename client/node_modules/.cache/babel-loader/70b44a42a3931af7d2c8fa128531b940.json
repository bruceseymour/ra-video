{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _semver = require(\"semver\");\n\nvar _CssSyntaxError = _interopRequireDefault(require(\"./CssSyntaxError\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _plugins = require(\"./plugins\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n\n\nasync function loader(content, map, meta) {\n  const rawOptions = (0, _loaderUtils.getOptions)(this);\n  (0, _schemaUtils.default)(_options.default, rawOptions, {\n    name: 'CSS Loader',\n    baseDataPath: 'options'\n  });\n  const plugins = [];\n  const callback = this.async();\n  let options;\n\n  try {\n    options = (0, _utils.normalizeOptions)(rawOptions, this);\n  } catch (error) {\n    callback(error);\n    return;\n  }\n\n  const replacements = [];\n  const exports = [];\n\n  if ((0, _utils.shouldUseModulesPlugins)(options)) {\n    plugins.push(...(0, _utils.getModulesPlugins)(options, this));\n  }\n\n  const importPluginImports = [];\n  const importPluginApi = [];\n\n  if ((0, _utils.shouldUseImportPlugin)(options)) {\n    const resolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: ['.css'],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...'],\n      restrictions: [/\\.css$/i]\n    });\n    plugins.push((0, _plugins.importParser)({\n      imports: importPluginImports,\n      api: importPluginApi,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.import, this.resourcePath),\n      resolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  }\n\n  const urlPluginImports = [];\n\n  if ((0, _utils.shouldUseURLPlugin)(options)) {\n    const urlResolver = this.getResolve({\n      conditionNames: ['asset'],\n      mainFields: ['asset'],\n      mainFiles: [],\n      extensions: []\n    });\n    plugins.push((0, _plugins.urlParser)({\n      imports: urlPluginImports,\n      replacements,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.url, this.resourcePath),\n      resolver: urlResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, url)\n    }));\n  }\n\n  const icssPluginImports = [];\n  const icssPluginApi = [];\n\n  if ((0, _utils.shouldUseIcssPlugin)(options)) {\n    const icssResolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: [],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...']\n    });\n    plugins.push((0, _plugins.icssParser)({\n      imports: icssPluginImports,\n      api: icssPluginApi,\n      replacements,\n      exports,\n      context: this.context,\n      rootContext: this.rootContext,\n      resolver: icssResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing\n\n\n  if (meta) {\n    const {\n      ast\n    } = meta;\n\n    if (ast && ast.type === 'postcss' && (0, _semver.satisfies)(ast.version, `^${_package.default.version}`)) {\n      // eslint-disable-next-line no-param-reassign\n      content = ast.root;\n    }\n  }\n\n  const {\n    resourcePath\n  } = this;\n  let result;\n\n  try {\n    result = await (0, _postcss.default)(plugins).process(content, {\n      from: resourcePath,\n      to: resourcePath,\n      map: options.sourceMap ? {\n        prev: map ? (0, _utils.normalizeSourceMap)(map, resourcePath) : null,\n        inline: false,\n        annotation: false\n      } : false\n    });\n  } catch (error) {\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n\n    callback(error.name === 'CssSyntaxError' ? new _CssSyntaxError.default(error) : error);\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  const imports = [].concat(icssPluginImports.sort(_utils.sort)).concat(importPluginImports.sort(_utils.sort)).concat(urlPluginImports.sort(_utils.sort));\n  const api = [].concat(importPluginApi.sort(_utils.sort)).concat(icssPluginApi.sort(_utils.sort));\n\n  if (options.modules.exportOnlyLocals !== true) {\n    imports.unshift({\n      importName: '___CSS_LOADER_API_IMPORT___',\n      url: (0, _loaderUtils.stringifyRequest)(this, require.resolve('./runtime/api'))\n    });\n  }\n\n  const importCode = (0, _utils.getImportCode)(imports, options);\n  const moduleCode = (0, _utils.getModuleCode)(result, api, replacements, options, this);\n  const exportCode = (0, _utils.getExportCode)(exports, replacements, options);\n  callback(null, `${importCode}${moduleCode}${exportCode}`);\n}","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/next/node_modules/css-loader/dist/index.js"],"names":["Object","defineProperty","exports","value","default","loader","_loaderUtils","require","_postcss","_interopRequireDefault","_package","_schemaUtils","_semver","_CssSyntaxError","_Warning","_options","_plugins","_utils","obj","__esModule","content","map","meta","rawOptions","getOptions","name","baseDataPath","plugins","callback","async","options","normalizeOptions","error","replacements","shouldUseModulesPlugins","push","getModulesPlugins","importPluginImports","importPluginApi","shouldUseImportPlugin","resolver","getResolve","conditionNames","extensions","mainFields","mainFiles","restrictions","importParser","imports","api","context","rootContext","filter","getFilter","import","resourcePath","urlHandler","url","stringifyRequest","getPreRequester","importLoaders","urlPluginImports","shouldUseURLPlugin","urlResolver","urlParser","icssPluginImports","icssPluginApi","shouldUseIcssPlugin","icssResolver","icssParser","ast","type","satisfies","version","root","result","process","from","to","sourceMap","prev","normalizeSourceMap","inline","annotation","file","addDependency","warning","warnings","emitWarning","concat","sort","modules","exportOnlyLocals","unshift","importName","resolve","importCode","getImportCode","moduleCode","getModuleCode","exportCode","getExportCode"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = loader;\n\nvar _loaderUtils = require(\"loader-utils\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _package = _interopRequireDefault(require(\"postcss/package.json\"));\n\nvar _schemaUtils = _interopRequireDefault(require(\"schema-utils\"));\n\nvar _semver = require(\"semver\");\n\nvar _CssSyntaxError = _interopRequireDefault(require(\"./CssSyntaxError\"));\n\nvar _Warning = _interopRequireDefault(require(\"./Warning\"));\n\nvar _options = _interopRequireDefault(require(\"./options.json\"));\n\nvar _plugins = require(\"./plugins\");\n\nvar _utils = require(\"./utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\nasync function loader(content, map, meta) {\n  const rawOptions = (0, _loaderUtils.getOptions)(this);\n  (0, _schemaUtils.default)(_options.default, rawOptions, {\n    name: 'CSS Loader',\n    baseDataPath: 'options'\n  });\n  const plugins = [];\n  const callback = this.async();\n  let options;\n\n  try {\n    options = (0, _utils.normalizeOptions)(rawOptions, this);\n  } catch (error) {\n    callback(error);\n    return;\n  }\n\n  const replacements = [];\n  const exports = [];\n\n  if ((0, _utils.shouldUseModulesPlugins)(options)) {\n    plugins.push(...(0, _utils.getModulesPlugins)(options, this));\n  }\n\n  const importPluginImports = [];\n  const importPluginApi = [];\n\n  if ((0, _utils.shouldUseImportPlugin)(options)) {\n    const resolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: ['.css'],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...'],\n      restrictions: [/\\.css$/i]\n    });\n    plugins.push((0, _plugins.importParser)({\n      imports: importPluginImports,\n      api: importPluginApi,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.import, this.resourcePath),\n      resolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  }\n\n  const urlPluginImports = [];\n\n  if ((0, _utils.shouldUseURLPlugin)(options)) {\n    const urlResolver = this.getResolve({\n      conditionNames: ['asset'],\n      mainFields: ['asset'],\n      mainFiles: [],\n      extensions: []\n    });\n    plugins.push((0, _plugins.urlParser)({\n      imports: urlPluginImports,\n      replacements,\n      context: this.context,\n      rootContext: this.rootContext,\n      filter: (0, _utils.getFilter)(options.url, this.resourcePath),\n      resolver: urlResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, url)\n    }));\n  }\n\n  const icssPluginImports = [];\n  const icssPluginApi = [];\n\n  if ((0, _utils.shouldUseIcssPlugin)(options)) {\n    const icssResolver = this.getResolve({\n      conditionNames: ['style'],\n      extensions: [],\n      mainFields: ['css', 'style', 'main', '...'],\n      mainFiles: ['index', '...']\n    });\n    plugins.push((0, _plugins.icssParser)({\n      imports: icssPluginImports,\n      api: icssPluginApi,\n      replacements,\n      exports,\n      context: this.context,\n      rootContext: this.rootContext,\n      resolver: icssResolver,\n      urlHandler: url => (0, _loaderUtils.stringifyRequest)(this, (0, _utils.getPreRequester)(this)(options.importLoaders) + url)\n    }));\n  } // Reuse CSS AST (PostCSS AST e.g 'postcss-loader') to avoid reparsing\n\n\n  if (meta) {\n    const {\n      ast\n    } = meta;\n\n    if (ast && ast.type === 'postcss' && (0, _semver.satisfies)(ast.version, `^${_package.default.version}`)) {\n      // eslint-disable-next-line no-param-reassign\n      content = ast.root;\n    }\n  }\n\n  const {\n    resourcePath\n  } = this;\n  let result;\n\n  try {\n    result = await (0, _postcss.default)(plugins).process(content, {\n      from: resourcePath,\n      to: resourcePath,\n      map: options.sourceMap ? {\n        prev: map ? (0, _utils.normalizeSourceMap)(map, resourcePath) : null,\n        inline: false,\n        annotation: false\n      } : false\n    });\n  } catch (error) {\n    if (error.file) {\n      this.addDependency(error.file);\n    }\n\n    callback(error.name === 'CssSyntaxError' ? new _CssSyntaxError.default(error) : error);\n    return;\n  }\n\n  for (const warning of result.warnings()) {\n    this.emitWarning(new _Warning.default(warning));\n  }\n\n  const imports = [].concat(icssPluginImports.sort(_utils.sort)).concat(importPluginImports.sort(_utils.sort)).concat(urlPluginImports.sort(_utils.sort));\n  const api = [].concat(importPluginApi.sort(_utils.sort)).concat(icssPluginApi.sort(_utils.sort));\n\n  if (options.modules.exportOnlyLocals !== true) {\n    imports.unshift({\n      importName: '___CSS_LOADER_API_IMPORT___',\n      url: (0, _loaderUtils.stringifyRequest)(this, require.resolve('./runtime/api'))\n    });\n  }\n\n  const importCode = (0, _utils.getImportCode)(imports, options);\n  const moduleCode = (0, _utils.getModuleCode)(result, api, replacements, options, this);\n  const exportCode = (0, _utils.getExportCode)(exports, replacements, options);\n  callback(null, `${importCode}${moduleCode}${exportCode}`);\n}"]},"metadata":{},"sourceType":"script"}