{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.ReactSyncScriptsConformanceCheck = exports.ErrorDescription = exports.WarningMessage = exports.ErrorMessage = void 0;\n\nvar _TestInterface = require(\"../TestInterface\");\n\nvar _constants = require(\"../constants\");\n\nvar _fileUtils = require(\"../utils/file-utils\");\n\nvar _astUtils = require(\"../utils/ast-utils\");\n\nconst ErrorMessage = `${_constants.CONFORMANCE_ERROR_PREFIX}: A sync script was found in a react module.`;\nexports.ErrorMessage = ErrorMessage;\nconst WarningMessage = `${_constants.CONFORMANCE_WARNING_PREFIX}: A sync script was found in a react module.`;\nexports.WarningMessage = WarningMessage;\nconst ErrorDescription = ``;\nexports.ErrorDescription = ErrorDescription;\nconst EARLY_EXIT_SUCCESS_RESULT = {\n  result: _TestInterface.IConformanceTestStatus.SUCCESS\n};\n\nclass ReactSyncScriptsConformanceCheck {\n  constructor({\n    AllowedSources\n  } = {}) {\n    this.allowedSources = [];\n\n    if (AllowedSources) {\n      this.allowedSources = AllowedSources;\n    }\n  }\n\n  getAstNode() {\n    return [{\n      visitor: 'visitCallExpression',\n      inspectNode: (path, {\n        request\n      }) => {\n        const {\n          node\n        } = path;\n\n        if (!node.arguments || node.arguments.length < 2) {\n          return EARLY_EXIT_SUCCESS_RESULT;\n        }\n\n        if ((0, _astUtils.isNodeCreatingScriptElement)(node)) {\n          const propsNode = node.arguments[1];\n\n          if (!propsNode.properties) {\n            return EARLY_EXIT_SUCCESS_RESULT;\n          }\n\n          const props = propsNode.properties.reduce((originalProps, prop) => {\n            // @ts-ignore\n            originalProps[prop.key.name] = prop.value.value;\n            return originalProps;\n          }, {});\n\n          if ('defer' in props || 'async' in props || !('src' in props) || this.allowedSources.includes(props.src)) {\n            return EARLY_EXIT_SUCCESS_RESULT;\n          } // Todo: Add an absolute error case for modern js when class is a subclass of next/head.\n\n\n          return {\n            result: _TestInterface.IConformanceTestStatus.FAILED,\n            warnings: [{\n              message: `${WarningMessage} ${(0, _fileUtils.getLocalFileName)(request)}. This can potentially delay FCP/FP metrics.`\n            }]\n          };\n        }\n\n        return EARLY_EXIT_SUCCESS_RESULT;\n      }\n    }];\n  }\n\n}\n\nexports.ReactSyncScriptsConformanceCheck = ReactSyncScriptsConformanceCheck;","map":{"version":3,"sources":["../../../../../../build/webpack/plugins/webpack-conformance-plugin/checks/react-sync-scripts-conformance-check.ts"],"names":["ErrorMessage","CONFORMANCE_ERROR_PREFIX","WarningMessage","CONFORMANCE_WARNING_PREFIX","ErrorDescription","EARLY_EXIT_SUCCESS_RESULT","result","IConformanceTestStatus","ReactSyncScriptsConformanceCheck","allowedSources","constructor","getAstNode","visitor","inspectNode","node","propsNode","props","originalProps","prop","warnings","message"],"mappings":";;;;;AAAA,IAAA,cAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAOA,IAAA,UAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAQA,IAAA,UAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AACO,MAAMA,YAAoB,GAAI,GAAEC,UAAAA,CAAAA,wBAAhC,8CAAA;;AACA,MAAMC,cAAsB,GAAI,GAAEC,UAAAA,CAAAA,0BAAlC,8CAAA;;AACA,MAAMC,gBAAgB,GAAtB,EAAA;;AACP,MAAMC,yBAAiD,GAAG;AACxDC,EAAAA,MAAM,EAAEC,cAAAA,CAAAA,sBAAAA,CADV;AAA0D,CAA1D;;AAOO,MAAMC,gCAAN,CAC8B;AAEnCE,EAAAA,WAAW,CAAC;AAAA,IAAA;AAAA,MAAD,EAAA,EAEsC;AAAA,SAHzCD,cAGyC,GAHd,EAGc;;AAC/C,QAAA,cAAA,EAAoB;AAClB,WAAA,cAAA,GAAA,cAAA;AAEH;AAEME;;AAAAA,EAAAA,UAAP,GAAyC;AACvC,WAAO,CACL;AACEC,MAAAA,OAAO,EADT,qBAAA;AAEEC,MAAAA,WAAW,EAAE,CAAA,IAAA,EAAiB;AAAjB,QAAA;AAAiB,OAAjB,KAAuD;AAClE,cAAM;AAAA,UAAA;AAAA,YAAN,IAAA;;AACA,YAAI,CAACC,IAAI,CAAL,SAAA,IAAmBA,IAAI,CAAJA,SAAAA,CAAAA,MAAAA,GAAvB,CAAA,EAAkD;AAChD,iBAAA,yBAAA;AAEF;;AAAA,YAAI,CAAA,GAAA,SAAA,CAAA,2BAAA,EAAJ,IAAI,CAAJ,EAAuC;AACrC,gBAAMC,SAAS,GAAGD,IAAI,CAAJA,SAAAA,CAAlB,CAAkBA,CAAlB;;AACA,cAAI,CAACC,SAAS,CAAd,UAAA,EAA2B;AACzB,mBAAA,yBAAA;AAEF;;AAAA,gBAAMC,KAEL,GAAG,SAAS,CAAT,UAAA,CAAA,MAAA,CAA4B,CAAA,aAAA,EAAA,IAAA,KAA8B;AAC5D;AACAC,YAAAA,aAAa,CAACC,IAAI,CAAJA,GAAAA,CAAdD,IAAa,CAAbA,GAA+BC,IAAI,CAAJA,KAAAA,CAA/BD,KAAAA;AACA,mBAAA,aAAA;AAHE,WAAA,EAFJ,EAEI,CAFJ;;AAOA,cACE,WAAA,KAAA,IACA,WADA,KAAA,IAEA,EAAE,SAFF,KAEA,CAFA,IAGA,KAAA,cAAA,CAAA,QAAA,CAA6BD,KAAK,CAJpC,GAIE,CAJF,EAKE;AACA,mBAAA,yBAAA;AAGF,WArBqC,CAqBrC;;;AACA,iBAAO;AACLV,YAAAA,MAAM,EAAEC,cAAAA,CAAAA,sBAAAA,CADH,MAAA;AAELY,YAAAA,QAAQ,EAAE,CACR;AACEC,cAAAA,OAAO,EAAG,GAAElB,cAAe,IAAG,CAAA,GAAA,UAAA,CAAA,gBAAA,EAAA,OAAA,CAJpC;AAGI,aADQ;AAFL,WAAP;AAWF;;AAAA,eAAA,yBAAA;AAzCN;AACE,KADK,CAAP;AAXiC;;AAAA","sourcesContent":["import {\n  IWebpackConformanceTest,\n  IGetAstNodeResult,\n  IParsedModuleDetails,\n  IConformanceTestResult,\n  IConformanceTestStatus,\n} from '../TestInterface'\nimport {\n  CONFORMANCE_ERROR_PREFIX,\n  CONFORMANCE_WARNING_PREFIX,\n} from '../constants'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { namedTypes } from 'ast-types/'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { NodePath } from 'ast-types/lib/node-path'\nimport { getLocalFileName } from '../utils/file-utils'\nimport { isNodeCreatingScriptElement } from '../utils/ast-utils'\nexport const ErrorMessage: string = `${CONFORMANCE_ERROR_PREFIX}: A sync script was found in a react module.`\nexport const WarningMessage: string = `${CONFORMANCE_WARNING_PREFIX}: A sync script was found in a react module.`\nexport const ErrorDescription = ``\nconst EARLY_EXIT_SUCCESS_RESULT: IConformanceTestResult = {\n  result: IConformanceTestStatus.SUCCESS,\n}\n\nexport interface ReactSyncScriptsConformanceCheckOptions {\n  AllowedSources?: String[]\n}\nexport class ReactSyncScriptsConformanceCheck\n  implements IWebpackConformanceTest {\n  private allowedSources: String[] = []\n  constructor({\n    AllowedSources,\n  }: ReactSyncScriptsConformanceCheckOptions = {}) {\n    if (AllowedSources) {\n      this.allowedSources = AllowedSources\n    }\n  }\n\n  public getAstNode(): IGetAstNodeResult[] {\n    return [\n      {\n        visitor: 'visitCallExpression',\n        inspectNode: (path: NodePath, { request }: IParsedModuleDetails) => {\n          const { node }: { node: namedTypes.CallExpression } = path\n          if (!node.arguments || node.arguments.length < 2) {\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n          if (isNodeCreatingScriptElement(node)) {\n            const propsNode = node.arguments[1] as namedTypes.ObjectExpression\n            if (!propsNode.properties) {\n              return EARLY_EXIT_SUCCESS_RESULT\n            }\n            const props: {\n              [key: string]: string\n            } = propsNode.properties.reduce((originalProps, prop: any) => {\n              // @ts-ignore\n              originalProps[prop.key.name] = prop.value.value\n              return originalProps\n            }, {})\n            if (\n              'defer' in props ||\n              'async' in props ||\n              !('src' in props) ||\n              this.allowedSources.includes(props.src)\n            ) {\n              return EARLY_EXIT_SUCCESS_RESULT\n            }\n\n            // Todo: Add an absolute error case for modern js when class is a subclass of next/head.\n            return {\n              result: IConformanceTestStatus.FAILED,\n              warnings: [\n                {\n                  message: `${WarningMessage} ${getLocalFileName(\n                    request\n                  )}. This can potentially delay FCP/FP metrics.`,\n                },\n              ],\n            }\n          }\n          return EARLY_EXIT_SUCCESS_RESULT\n        },\n      },\n    ]\n  }\n}\n"]},"metadata":{},"sourceType":"script"}