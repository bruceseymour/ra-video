{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.ProfilingPlugin = void 0; // Copy of https://github.com/webpack/webpack/blob/master/lib/debug/ProfilingPlugin.js\n// License:\n\n/*\nCopyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n// Includes fix https://github.com/webpack/webpack/pull/9566\n// Includes support for custom tracer that can capture across multiple builds\n\nconst pluginName = 'ProfilingPlugin';\n\nclass ProfilingPlugin {\n  /**\n  * @param {ProfilingPluginOptions=} opts options object\n  */\n  constructor(opts) {\n    this.tracer = void 0;\n    this.tracer = opts.tracer;\n  }\n\n  apply(compiler) {\n    const tracer = this.tracer; // Compiler Hooks\n\n    Object.keys(compiler.hooks).forEach(hookName => {\n      compiler.hooks[hookName].intercept(makeInterceptorFor('Compiler', tracer)(hookName));\n    });\n    Object.keys(compiler.resolverFactory.hooks).forEach(hookName => {\n      compiler.resolverFactory.hooks[hookName].intercept(makeInterceptorFor('Resolver', tracer)(hookName));\n    });\n    compiler.hooks.compilation.tap(pluginName, (compilation, {\n      normalModuleFactory,\n      contextModuleFactory\n    }) => {\n      interceptAllHooksFor(compilation, tracer, 'Compilation');\n      interceptAllHooksFor(normalModuleFactory, tracer, 'Normal Module Factory');\n      interceptAllHooksFor(contextModuleFactory, tracer, 'Context Module Factory');\n      interceptAllParserHooks(normalModuleFactory, tracer);\n      interceptTemplateInstancesFrom(compilation, tracer);\n    });\n  }\n\n}\n\nexports.ProfilingPlugin = ProfilingPlugin;\n\nconst interceptTemplateInstancesFrom = (compilation, tracer) => {\n  const {\n    mainTemplate,\n    chunkTemplate,\n    hotUpdateChunkTemplate,\n    moduleTemplates\n  } = compilation;\n  const {\n    javascript,\n    webassembly\n  } = moduleTemplates;\n  [{\n    instance: mainTemplate,\n    name: 'MainTemplate'\n  }, {\n    instance: chunkTemplate,\n    name: 'ChunkTemplate'\n  }, {\n    instance: hotUpdateChunkTemplate,\n    name: 'HotUpdateChunkTemplate'\n  }, {\n    instance: javascript,\n    name: 'JavaScriptModuleTemplate'\n  }, {\n    instance: webassembly,\n    name: 'WebAssemblyModuleTemplate'\n  }].forEach(templateObject => {\n    Object.keys(templateObject.instance.hooks).forEach(hookName => {\n      templateObject.instance.hooks[hookName].intercept(makeInterceptorFor(templateObject.name, tracer)(hookName));\n    });\n  });\n};\n\nconst interceptAllHooksFor = (instance, tracer, logLabel) => {\n  if (Reflect.has(instance, 'hooks')) {\n    Object.keys(instance.hooks).forEach(hookName => {\n      instance.hooks[hookName].intercept(makeInterceptorFor(logLabel, tracer)(hookName));\n    });\n  }\n};\n\nconst interceptAllParserHooks = (moduleFactory, tracer) => {\n  const moduleTypes = ['javascript/auto', 'javascript/dynamic', 'javascript/esm', 'json', 'webassembly/experimental'];\n  moduleTypes.forEach(moduleType => {\n    moduleFactory.hooks.parser.for(moduleType).tap('ProfilingPlugin', parser => {\n      interceptAllHooksFor(parser, tracer, 'Parser');\n    });\n  });\n};\n\nconst makeInterceptorFor = (_instance, tracer) => hookName => ({\n  register: ({\n    name,\n    type,\n    context,\n    fn\n  }) => {\n    const newFn = makeNewProfiledTapFn(hookName, tracer, {\n      name,\n      type,\n      fn\n    });\n    return {\n      name,\n      type,\n      context,\n      fn: newFn\n    };\n  }\n}); // TODO improve typing\n\n/** @typedef {(...args: TODO[]) => void | Promise<TODO>} PluginFunction */\n\n/**\n* @param {string} hookName Name of the hook to profile.\n* @param {Trace} tracer The trace object.\n* @param {object} options Options for the profiled fn.\n* @param {string} options.name Plugin name\n* @param {string} options.type Plugin type (sync | async | promise)\n* @param {PluginFunction} options.fn Plugin function\n* @returns {PluginFunction} Chainable hooked function.\n*/\n\n\nconst makeNewProfiledTapFn = (_hookName, tracer, {\n  name,\n  type,\n  fn\n}) => {\n  const defaultCategory = ['blink.user_timing'];\n\n  switch (type) {\n    case 'promise':\n      return (...args) => {\n        const id = ++tracer.counter;\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        const promise =\n        /** @type {Promise<*>} */\n        fn(...args);\n        return promise.then(r => {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          return r;\n        });\n      };\n\n    case 'async':\n      return (...args) => {\n        const id = ++tracer.counter;\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        const callback = args.pop();\n        /* eslint-disable */\n\n        fn(...args, (...r) => {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          callback(...r);\n        });\n        /* eslint-enable */\n      };\n\n    case 'sync':\n      return (...args) => {\n        const id = ++tracer.counter; // Do not instrument ourself due to the CPU\n        // profile needing to be the last event in the trace.\n\n        if (name === pluginName) {\n          return fn(...args);\n        }\n\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        let r;\n\n        try {\n          r = fn(...args);\n        } catch (error) {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory\n          });\n          throw error;\n        }\n\n        tracer.trace.end({\n          name,\n          id,\n          cat: defaultCategory\n        });\n        return r;\n      };\n\n    default:\n      break;\n  }\n};","map":{"version":3,"sources":["../../../../build/webpack/plugins/profiling-plugin.ts"],"names":["pluginName","ProfilingPlugin","tracer","constructor","opts","apply","Object","compiler","hookName","makeInterceptorFor","interceptAllHooksFor","interceptAllParserHooks","interceptTemplateInstancesFrom","instance","name","templateObject","Reflect","moduleTypes","moduleType","moduleFactory","parser","register","newFn","makeNewProfiledTapFn","fn","defaultCategory","id","cat","promise","r","callback","args"],"mappings":"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","sourcesContent":["// Copy of https://github.com/webpack/webpack/blob/master/lib/debug/ProfilingPlugin.js\n// License:\n/*\nCopyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\n// Includes fix https://github.com/webpack/webpack/pull/9566\n// Includes support for custom tracer that can capture across multiple builds\nconst pluginName = 'ProfilingPlugin'\n\nexport class ProfilingPlugin {\n  tracer: any\n  /**\n   * @param {ProfilingPluginOptions=} opts options object\n   */\n  constructor(opts: { tracer: any }) {\n    this.tracer = opts.tracer\n  }\n\n  apply(compiler: any) {\n    const tracer = this.tracer\n\n    // Compiler Hooks\n    Object.keys(compiler.hooks).forEach((hookName) => {\n      compiler.hooks[hookName].intercept(\n        makeInterceptorFor('Compiler', tracer)(hookName)\n      )\n    })\n\n    Object.keys(compiler.resolverFactory.hooks).forEach((hookName) => {\n      compiler.resolverFactory.hooks[hookName].intercept(\n        makeInterceptorFor('Resolver', tracer)(hookName)\n      )\n    })\n\n    compiler.hooks.compilation.tap(\n      pluginName,\n      (\n        compilation: any,\n        { normalModuleFactory, contextModuleFactory }: any\n      ) => {\n        interceptAllHooksFor(compilation, tracer, 'Compilation')\n        interceptAllHooksFor(\n          normalModuleFactory,\n          tracer,\n          'Normal Module Factory'\n        )\n        interceptAllHooksFor(\n          contextModuleFactory,\n          tracer,\n          'Context Module Factory'\n        )\n        interceptAllParserHooks(normalModuleFactory, tracer)\n        interceptTemplateInstancesFrom(compilation, tracer)\n      }\n    )\n  }\n}\n\nconst interceptTemplateInstancesFrom = (compilation: any, tracer: any) => {\n  const {\n    mainTemplate,\n    chunkTemplate,\n    hotUpdateChunkTemplate,\n    moduleTemplates,\n  } = compilation\n\n  const { javascript, webassembly } = moduleTemplates\n  ;[\n    {\n      instance: mainTemplate,\n      name: 'MainTemplate',\n    },\n    {\n      instance: chunkTemplate,\n      name: 'ChunkTemplate',\n    },\n    {\n      instance: hotUpdateChunkTemplate,\n      name: 'HotUpdateChunkTemplate',\n    },\n    {\n      instance: javascript,\n      name: 'JavaScriptModuleTemplate',\n    },\n    {\n      instance: webassembly,\n      name: 'WebAssemblyModuleTemplate',\n    },\n  ].forEach((templateObject) => {\n    Object.keys(templateObject.instance.hooks).forEach((hookName) => {\n      templateObject.instance.hooks[hookName].intercept(\n        makeInterceptorFor(templateObject.name, tracer)(hookName)\n      )\n    })\n  })\n}\n\nconst interceptAllHooksFor = (instance: any, tracer: any, logLabel: any) => {\n  if (Reflect.has(instance, 'hooks')) {\n    Object.keys(instance.hooks).forEach((hookName) => {\n      instance.hooks[hookName].intercept(\n        makeInterceptorFor(logLabel, tracer)(hookName)\n      )\n    })\n  }\n}\n\nconst interceptAllParserHooks = (moduleFactory: any, tracer: any) => {\n  const moduleTypes = [\n    'javascript/auto',\n    'javascript/dynamic',\n    'javascript/esm',\n    'json',\n    'webassembly/experimental',\n  ]\n\n  moduleTypes.forEach((moduleType) => {\n    moduleFactory.hooks.parser\n      .for(moduleType)\n      .tap('ProfilingPlugin', (parser: any) => {\n        interceptAllHooksFor(parser, tracer, 'Parser')\n      })\n  })\n}\n\nconst makeInterceptorFor = (_instance: any, tracer: any) => (\n  hookName: any\n) => ({\n  register: ({ name, type, context, fn }: any) => {\n    const newFn = makeNewProfiledTapFn(hookName, tracer, {\n      name,\n      type,\n      fn,\n    })\n    return {\n      name,\n      type,\n      context,\n      fn: newFn,\n    }\n  },\n})\n\n// TODO improve typing\n/** @typedef {(...args: TODO[]) => void | Promise<TODO>} PluginFunction */\n\n/**\n * @param {string} hookName Name of the hook to profile.\n * @param {Trace} tracer The trace object.\n * @param {object} options Options for the profiled fn.\n * @param {string} options.name Plugin name\n * @param {string} options.type Plugin type (sync | async | promise)\n * @param {PluginFunction} options.fn Plugin function\n * @returns {PluginFunction} Chainable hooked function.\n */\nconst makeNewProfiledTapFn = (\n  _hookName: any,\n  tracer: any,\n  { name, type, fn }: any\n) => {\n  const defaultCategory = ['blink.user_timing']\n\n  switch (type) {\n    case 'promise':\n      return (...args: any) => {\n        const id = ++tracer.counter\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory,\n        })\n        const promise = /** @type {Promise<*>} */ fn(...args)\n        return promise.then((r: any) => {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory,\n          })\n          return r\n        })\n      }\n    case 'async':\n      return (...args: any) => {\n        const id = ++tracer.counter\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory,\n        })\n        const callback = args.pop()\n        /* eslint-disable */\n        fn(...args, (...r: any) => {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory,\n          })\n          callback(...r)\n        })\n        /* eslint-enable */\n      }\n    case 'sync':\n      return (...args: any) => {\n        const id = ++tracer.counter\n        // Do not instrument ourself due to the CPU\n        // profile needing to be the last event in the trace.\n        if (name === pluginName) {\n          return fn(...args)\n        }\n\n        tracer.trace.begin({\n          name,\n          id,\n          cat: defaultCategory,\n        })\n        let r\n        try {\n          r = fn(...args)\n        } catch (error) {\n          tracer.trace.end({\n            name,\n            id,\n            cat: defaultCategory,\n          })\n          throw error\n        }\n        tracer.trace.end({\n          name,\n          id,\n          cat: defaultCategory,\n        })\n        return r\n      }\n    default:\n      break\n  }\n}\n"]},"metadata":{},"sourceType":"script"}