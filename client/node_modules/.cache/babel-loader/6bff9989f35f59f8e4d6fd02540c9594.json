{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.pageNotFoundError = pageNotFoundError;\nexports.getPagePath = getPagePath;\nexports.requirePage = requirePage;\nexports.requireFontManifest = requireFontManifest;\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _constants = require(\"../lib/constants\");\n\nvar _normalizePagePath = require(\"./normalize-page-path\");\n\nfunction pageNotFoundError(page) {\n  const err = new Error(`Cannot find module for page: ${page}`);\n  err.code = 'ENOENT';\n  return err;\n}\n\nfunction getPagePath(page, distDir, serverless, dev) {\n  const serverBuildPath = (0, _path.join)(distDir, serverless && !dev ? _constants.SERVERLESS_DIRECTORY : _constants.SERVER_DIRECTORY);\n\n  const pagesManifest = require((0, _path.join)(serverBuildPath, _constants.PAGES_MANIFEST));\n\n  try {\n    page = (0, _normalizePagePath.denormalizePagePath)((0, _normalizePagePath.normalizePagePath)(page));\n  } catch (err) {\n    console.error(err);\n    throw pageNotFoundError(page);\n  }\n\n  if (!pagesManifest[page]) {\n    throw pageNotFoundError(page);\n  }\n\n  return (0, _path.join)(serverBuildPath, pagesManifest[page]);\n}\n\nfunction requirePage(page, distDir, serverless) {\n  const pagePath = getPagePath(page, distDir, serverless);\n\n  if (pagePath.endsWith('.html')) {\n    return _fs.promises.readFile(pagePath, 'utf8');\n  }\n\n  return require(pagePath);\n}\n\nfunction requireFontManifest(distDir, serverless) {\n  const serverBuildPath = (0, _path.join)(distDir, serverless ? _constants.SERVERLESS_DIRECTORY : _constants.SERVER_DIRECTORY);\n\n  const fontManifest = require((0, _path.join)(serverBuildPath, _constants.FONT_MANIFEST));\n\n  return fontManifest;\n}","map":{"version":3,"sources":["../../../next-server/server/require.ts"],"names":["err","page","serverBuildPath","serverless","SERVERLESS_DIRECTORY","SERVER_DIRECTORY","pagesManifest","require","PAGES_MANIFEST","console","pageNotFoundError","pagePath","getPagePath","promises","fontManifest","FONT_MANIFEST"],"mappings":";;;;;;;;AAAA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,KAAA,GAAA,OAAA,CAAA,MAAA,CAAA;;AACA,IAAA,UAAA,GAAA,OAAA,CAAA,kBAAA,CAAA;;AAMA,IAAA,kBAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAGO,SAAA,iBAAA,CAAA,IAAA,EAAgD;AACrD,QAAMA,GAAQ,GAAG,IAAA,KAAA,CAAW,gCAA+BC,IAA3D,EAAiB,CAAjB;AACAD,EAAAA,GAAG,CAAHA,IAAAA,GAAAA,QAAAA;AACA,SAAA,GAAA;AAGK;;AAAA,SAAA,WAAA,CAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAAA,GAAA,EAKG;AACR,QAAME,eAAe,GAAG,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,OAAA,EAEtBC,UAAU,IAAI,CAAdA,GAAAA,GAAqBC,UAAAA,CAArBD,oBAAAA,GAA4CE,UAAAA,CAF9C,gBAAwB,CAAxB;;AAIA,QAAMC,aAAa,GAAGC,OAAO,CAAC,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,eAAA,EAE5BC,UAAAA,CAFF,cAA8B,CAAD,CAA7B;;AAKA,MAAI;AACFP,IAAAA,IAAI,GAAG,CAAA,GAAA,kBAAA,CAAA,mBAAA,EAAoB,CAAA,GAAA,kBAAA,CAAA,iBAAA,EAA3BA,IAA2B,CAApB,CAAPA;AACA,GAFF,CAEE,OAAA,GAAA,EAAY;AACZQ,IAAAA,OAAO,CAAPA,KAAAA,CAAAA,GAAAA;AACA,UAAMC,iBAAiB,CAAvB,IAAuB,CAAvB;AAGF;;AAAA,MAAI,CAACJ,aAAa,CAAlB,IAAkB,CAAlB,EAA0B;AACxB,UAAMI,iBAAiB,CAAvB,IAAuB,CAAvB;AAEF;;AAAA,SAAO,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,eAAA,EAAsBJ,aAAa,CAA1C,IAA0C,CAAnC,CAAP;AAGK;;AAAA,SAAA,WAAA,CAAA,IAAA,EAAA,OAAA,EAAA,UAAA,EAIA;AACL,QAAMK,QAAQ,GAAGC,WAAW,CAAA,IAAA,EAAA,OAAA,EAA5B,UAA4B,CAA5B;;AACA,MAAID,QAAQ,CAARA,QAAAA,CAAJ,OAAIA,CAAJ,EAAgC;AAC9B,WAAOE,GAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,QAAAA,EAAP,MAAOA,CAAP;AAEF;;AAAA,SAAON,OAAO,CAAd,QAAc,CAAd;AAGK;;AAAA,SAAA,mBAAA,CAAA,OAAA,EAAA,UAAA,EAAmE;AACxE,QAAML,eAAe,GAAG,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,OAAA,EAEtBC,UAAU,GAAGC,UAAAA,CAAH,oBAAA,GAA0BC,UAAAA,CAFtC,gBAAwB,CAAxB;;AAIA,QAAMS,YAAY,GAAGP,OAAO,CAAC,CAAA,GAAA,KAAA,CAAA,IAAA,EAAA,eAAA,EAAsBQ,UAAAA,CAAnD,aAA6B,CAAD,CAA5B;;AACA,SAAA,YAAA;AACD","sourcesContent":["import { promises } from 'fs'\nimport { join } from 'path'\nimport {\n  PAGES_MANIFEST,\n  SERVER_DIRECTORY,\n  SERVERLESS_DIRECTORY,\n  FONT_MANIFEST,\n} from '../lib/constants'\nimport { normalizePagePath, denormalizePagePath } from './normalize-page-path'\nimport { PagesManifest } from '../../build/webpack/plugins/pages-manifest-plugin'\n\nexport function pageNotFoundError(page: string): Error {\n  const err: any = new Error(`Cannot find module for page: ${page}`)\n  err.code = 'ENOENT'\n  return err\n}\n\nexport function getPagePath(\n  page: string,\n  distDir: string,\n  serverless: boolean,\n  dev?: boolean\n): string {\n  const serverBuildPath = join(\n    distDir,\n    serverless && !dev ? SERVERLESS_DIRECTORY : SERVER_DIRECTORY\n  )\n  const pagesManifest = require(join(\n    serverBuildPath,\n    PAGES_MANIFEST\n  )) as PagesManifest\n\n  try {\n    page = denormalizePagePath(normalizePagePath(page))\n  } catch (err) {\n    console.error(err)\n    throw pageNotFoundError(page)\n  }\n\n  if (!pagesManifest[page]) {\n    throw pageNotFoundError(page)\n  }\n  return join(serverBuildPath, pagesManifest[page])\n}\n\nexport function requirePage(\n  page: string,\n  distDir: string,\n  serverless: boolean\n): any {\n  const pagePath = getPagePath(page, distDir, serverless)\n  if (pagePath.endsWith('.html')) {\n    return promises.readFile(pagePath, 'utf8')\n  }\n  return require(pagePath)\n}\n\nexport function requireFontManifest(distDir: string, serverless: boolean) {\n  const serverBuildPath = join(\n    distDir,\n    serverless ? SERVERLESS_DIRECTORY : SERVER_DIRECTORY\n  )\n  const fontManifest = require(join(serverBuildPath, FONT_MANIFEST))\n  return fontManifest\n}\n"]},"metadata":{},"sourceType":"script"}