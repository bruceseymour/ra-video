{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getNotFoundError = getNotFoundError;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _simpleWebpackError = require(\"./simpleWebpackError\");\n\nvar _middleware = require(\"@next/react-dev-overlay/lib/middleware\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst chalk = new _chalk.default.constructor({\n  enabled: true\n});\n\nasync function getNotFoundError(compilation, input, fileName) {\n  if (input.name !== 'ModuleNotFoundError') {\n    return false;\n  }\n\n  const loc = input.loc ? input.loc : input.dependencies.map(d => d.loc).filter(Boolean)[0];\n  const originalSource = input.module.originalSource();\n\n  try {\n    var _result$originalStack, _result$originalStack2, _result$originalStack3, _result$originalStack4;\n\n    const result = await (0, _middleware.createOriginalStackFrame)({\n      line: loc.start.line,\n      column: loc.start.column,\n      source: originalSource,\n      rootDirectory: compilation.options.context,\n      frame: {}\n    }); // If we could not result the original location we still need to show the existing error\n\n    if (!result) {\n      return input;\n    }\n\n    const errorMessage = input.error.message.replace(/ in '.*?'/, '').replace(/Can't resolve '(.*)'/, `Can't resolve '${chalk.green('$1')}'`);\n    const message = chalk.red.bold('Module not found') + `: ${errorMessage}` + '\\n' + result.originalCodeFrame;\n    return new _simpleWebpackError.SimpleWebpackError(`${chalk.cyan(fileName)}:${chalk.yellow((_result$originalStack = (_result$originalStack2 = result.originalStackFrame.lineNumber) == null ? void 0 : _result$originalStack2.toString()) != null ? _result$originalStack : '')}:${chalk.yellow((_result$originalStack3 = (_result$originalStack4 = result.originalStackFrame.column) == null ? void 0 : _result$originalStack4.toString()) != null ? _result$originalStack3 : '')}`, message);\n  } catch (err) {\n    console.log('Failed to parse source map:', err); // Don't fail on failure to resolve sourcemaps\n\n    return input;\n  }\n}","map":{"version":3,"sources":["../../../../../build/webpack/plugins/wellknown-errors-plugin/parseNotFoundError.ts"],"names":["chalk","Chalk","enabled","input","loc","d","originalSource","result","line","column","source","rootDirectory","compilation","frame","errorMessage","message","SimpleWebpackError","console"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,wCAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,KAAK,GAAG,IAAIC,MAAAA,CAAAA,OAAAA,CAAJ,WAAA,CAAsB;AAAEC,EAAAA,OAAO,EAA7C;AAAoC,CAAtB,CAAd;;AAEO,eAAA,gBAAA,CAAA,WAAA,EAAA,KAAA,EAAA,QAAA,EAIL;AACA,MAAIC,KAAK,CAALA,IAAAA,KAAJ,qBAAA,EAA0C;AACxC,WAAA,KAAA;AAGF;;AAAA,QAAMC,GAAG,GAAGD,KAAK,CAALA,GAAAA,GACRA,KAAK,CADGA,GAAAA,GAERA,KAAK,CAALA,YAAAA,CAAAA,GAAAA,CAAwBE,CAAD,IAAYA,CAAC,CAApCF,GAAAA,EAAAA,MAAAA,CAAAA,OAAAA,EAFJ,CAEIA,CAFJ;AAGA,QAAMG,cAAc,GAAGH,KAAK,CAALA,MAAAA,CAAvB,cAAuBA,EAAvB;;AAEA,MAAI;AAAA,QAAA,qBAAA,EAAA,sBAAA,EAAA,sBAAA,EAAA,sBAAA;;AACF,UAAMI,MAAM,GAAG,MAAM,CAAA,GAAA,WAAA,CAAA,wBAAA,EAAyB;AAC5CC,MAAAA,IAAI,EAAEJ,GAAG,CAAHA,KAAAA,CADsC,IAAA;AAE5CK,MAAAA,MAAM,EAAEL,GAAG,CAAHA,KAAAA,CAFoC,MAAA;AAG5CM,MAAAA,MAAM,EAHsC,cAAA;AAI5CC,MAAAA,aAAa,EAAEC,WAAW,CAAXA,OAAAA,CAJ6B,OAAA;AAK5CC,MAAAA,KAAK,EALP;AAA8C,KAAzB,CAArB,CADE,CASF;;AACA,QAAI,CAAJ,MAAA,EAAa;AACX,aAAA,KAAA;AAGF;;AAAA,UAAMC,YAAY,GAAGX,KAAK,CAALA,KAAAA,CAAAA,OAAAA,CAAAA,OAAAA,CAAAA,WAAAA,EAAAA,EAAAA,EAAAA,OAAAA,CAAAA,sBAAAA,EAEe,kBAAiBH,KAAK,CAALA,KAAAA,CAAAA,IAAAA,CAFrD,GAAqBG,CAArB;AAIA,UAAMY,OAAO,GACXf,KAAK,CAALA,GAAAA,CAAAA,IAAAA,CAAAA,kBAAAA,IACC,KAAIc,YADLd,EAAAA,GAAAA,IAAAA,GAGAO,MAAM,CAJR,iBAAA;AAMA,WAAO,IAAIS,mBAAAA,CAAJ,kBAAA,CACJ,GAAEhB,KAAK,CAALA,IAAAA,CAAAA,QAAAA,CAAqB,IAAGA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,qBAAAA,GAAAA,CAAAA,sBAAAA,GACzBO,MAAM,CAANA,kBAAAA,CADyBP,UAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GACzBO,sBAAAA,CADyBP,QACzBO,EADyBP,KAAAA,IAAAA,GAAAA,qBAAAA,GAAAA,EAAAA,CAEzB,IAAGA,KAAK,CAALA,MAAAA,CAAAA,CAAAA,sBAAAA,GAAAA,CAAAA,sBAAAA,GAAaO,MAAM,CAANA,kBAAAA,CAAbP,MAAAA,KAAAA,IAAAA,GAAAA,KAAAA,CAAAA,GAAaO,sBAAAA,CAAbP,QAAaO,EAAbP,KAAAA,IAAAA,GAAAA,sBAAAA,GAAAA,EAAAA,CAHA,EAAA,EAAP,OAAO,CAAP;AAMA,GA9BF,CA8BE,OAAA,GAAA,EAAY;AACZiB,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,6BAAAA,EAAAA,GAAAA,EADY,CAEZ;;AACA,WAAA,KAAA;AAEH;AAAA","sourcesContent":["import Chalk from 'chalk'\nimport { SimpleWebpackError } from './simpleWebpackError'\nimport { createOriginalStackFrame } from '@next/react-dev-overlay/lib/middleware'\n\nconst chalk = new Chalk.constructor({ enabled: true })\n\nexport async function getNotFoundError(\n  compilation: any,\n  input: any,\n  fileName: string\n) {\n  if (input.name !== 'ModuleNotFoundError') {\n    return false\n  }\n\n  const loc = input.loc\n    ? input.loc\n    : input.dependencies.map((d: any) => d.loc).filter(Boolean)[0]\n  const originalSource = input.module.originalSource()\n\n  try {\n    const result = await createOriginalStackFrame({\n      line: loc.start.line,\n      column: loc.start.column,\n      source: originalSource,\n      rootDirectory: compilation.options.context,\n      frame: {},\n    })\n\n    // If we could not result the original location we still need to show the existing error\n    if (!result) {\n      return input\n    }\n\n    const errorMessage = input.error.message\n      .replace(/ in '.*?'/, '')\n      .replace(/Can't resolve '(.*)'/, `Can't resolve '${chalk.green('$1')}'`)\n\n    const message =\n      chalk.red.bold('Module not found') +\n      `: ${errorMessage}` +\n      '\\n' +\n      result.originalCodeFrame\n\n    return new SimpleWebpackError(\n      `${chalk.cyan(fileName)}:${chalk.yellow(\n        result.originalStackFrame.lineNumber?.toString() ?? ''\n      )}:${chalk.yellow(result.originalStackFrame.column?.toString() ?? '')}`,\n      message\n    )\n  } catch (err) {\n    console.log('Failed to parse source map:', err)\n    // Don't fail on failure to resolve sourcemaps\n    return input\n  }\n}\n"]},"metadata":{},"sourceType":"script"}