{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProxyTracer = void 0;\n\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\n\n\nvar ProxyTracer =\n/** @class */\nfunction () {\n  function ProxyTracer(_provider, name, version) {\n    this._provider = _provider;\n    this.name = name;\n    this.version = version;\n  }\n\n  ProxyTracer.prototype.getCurrentSpan = function () {\n    return this._getTracer().getCurrentSpan();\n  };\n\n  ProxyTracer.prototype.startSpan = function (name, options) {\n    return this._getTracer().startSpan(name, options);\n  };\n\n  ProxyTracer.prototype.withSpan = function (span, fn) {\n    return this._getTracer().withSpan(span, fn);\n  };\n\n  ProxyTracer.prototype.bind = function (target, span) {\n    return this._getTracer().bind(target, span);\n  };\n  /**\n   * Try to get a tracer from the proxy tracer provider.\n   * If the proxy tracer provider has no delegate, return a noop tracer.\n   */\n\n\n  ProxyTracer.prototype._getTracer = function () {\n    if (this._delegate) {\n      return this._delegate;\n    }\n\n    var tracer = this._provider.getDelegateTracer(this.name, this.version);\n\n    if (!tracer) {\n      return NoopTracer_1.NOOP_TRACER;\n    }\n\n    this._delegate = tracer;\n    return this._delegate;\n  };\n\n  return ProxyTracer;\n}();\n\nexports.ProxyTracer = ProxyTracer;","map":{"version":3,"sources":["../../../src/trace/ProxyTracer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAGH,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;AAGA;;AAEG;;;AACH,IAAA,WAAA;AAAA;AAAA,YAAA;AAIE,WAAA,WAAA,CACU,SADV,EAEkB,IAFlB,EAGkB,OAHlB,EAGkC;AAFxB,SAAA,SAAA,GAAA,SAAA;AACQ,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,OAAA,GAAA,OAAA;AACd;;AAEJ,EAAA,WAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,KAAK,UAAL,GAAkB,cAAlB,EAAP;AACD,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA6C;AAC3C,WAAO,KAAK,UAAL,GAAkB,SAAlB,CAA4B,IAA5B,EAAkC,OAAlC,CAAP;AACD,GAFD;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UACE,IADF,EAEE,EAFF,EAEO;AAEL,WAAO,KAAK,UAAL,GAAkB,QAAlB,CAA2B,IAA3B,EAAiC,EAAjC,CAAP;AACD,GALD;;AAOA,EAAA,WAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAQ,MAAR,EAAmB,IAAnB,EAA8B;AAC5B,WAAO,KAAK,UAAL,GAAkB,IAAlB,CAAuB,MAAvB,EAA+B,IAA/B,CAAP;AACD,GAFD;AAIA;;;AAGG;;;AACK,EAAA,WAAA,CAAA,SAAA,CAAA,UAAA,GAAR,YAAA;AACE,QAAI,KAAK,SAAT,EAAoB;AAClB,aAAO,KAAK,SAAZ;AACD;;AAED,QAAM,MAAM,GAAG,KAAK,SAAL,CAAe,iBAAf,CAAiC,KAAK,IAAtC,EAA4C,KAAK,OAAjD,CAAf;;AAEA,QAAI,CAAC,MAAL,EAAa;AACX,aAAO,YAAA,CAAA,WAAP;AACD;;AAED,SAAK,SAAL,GAAiB,MAAjB;AACA,WAAO,KAAK,SAAZ;AACD,GAbO;;AAcV,SAAA,WAAA;AAAC,CA/CD,EAAA;;AAAa,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracer = void 0;\nvar NoopTracer_1 = require(\"./NoopTracer\");\n/**\n * Proxy tracer provided by the proxy tracer provider\n */\nvar ProxyTracer = /** @class */ (function () {\n    function ProxyTracer(_provider, name, version) {\n        this._provider = _provider;\n        this.name = name;\n        this.version = version;\n    }\n    ProxyTracer.prototype.getCurrentSpan = function () {\n        return this._getTracer().getCurrentSpan();\n    };\n    ProxyTracer.prototype.startSpan = function (name, options) {\n        return this._getTracer().startSpan(name, options);\n    };\n    ProxyTracer.prototype.withSpan = function (span, fn) {\n        return this._getTracer().withSpan(span, fn);\n    };\n    ProxyTracer.prototype.bind = function (target, span) {\n        return this._getTracer().bind(target, span);\n    };\n    /**\n     * Try to get a tracer from the proxy tracer provider.\n     * If the proxy tracer provider has no delegate, return a noop tracer.\n     */\n    ProxyTracer.prototype._getTracer = function () {\n        if (this._delegate) {\n            return this._delegate;\n        }\n        var tracer = this._provider.getDelegateTracer(this.name, this.version);\n        if (!tracer) {\n            return NoopTracer_1.NOOP_TRACER;\n        }\n        this._delegate = tracer;\n        return this._delegate;\n    };\n    return ProxyTracer;\n}());\nexports.ProxyTracer = ProxyTracer;\n//# sourceMappingURL=ProxyTracer.js.map"]},"metadata":{},"sourceType":"script"}