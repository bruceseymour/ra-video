{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.eventNextPlugins = eventNextPlugins;\n\nvar _findUp = _interopRequireDefault(require(\"next/dist/compiled/find-up\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst EVENT_PLUGIN_PRESENT = 'NEXT_PACKAGE_DETECTED';\n\nasync function eventNextPlugins(dir) {\n  try {\n    const packageJsonPath = await (0, _findUp.default)('package.json', {\n      cwd: dir\n    });\n\n    if (!packageJsonPath) {\n      return [];\n    }\n\n    const {\n      dependencies = {},\n      devDependencies = {}\n    } = require(packageJsonPath);\n\n    const deps = { ...devDependencies,\n      ...dependencies\n    };\n    return Object.keys(deps).reduce((events, plugin) => {\n      const version = deps[plugin]; // Don't add deps without a version set\n\n      if (!version) {\n        return events;\n      }\n\n      events.push({\n        eventName: EVENT_PLUGIN_PRESENT,\n        payload: {\n          packageName: plugin,\n          packageVersion: version\n        }\n      });\n      return events;\n    }, []);\n  } catch (_) {\n    return [];\n  }\n}","map":{"version":3,"sources":["../../../telemetry/events/plugins.ts"],"names":["EVENT_PLUGIN_PRESENT","packageJsonPath","cwd","dependencies","devDependencies","require","deps","version","events","eventName","payload","packageName","packageVersion"],"mappings":";;;;;AAAA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,4BAAA,CAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,oBAAoB,GAA1B,uBAAA;;AASO,eAAA,gBAAA,CAAA,GAAA,EAE6B;AAClC,MAAI;AACF,UAAMC,eAAe,GAAG,MAAM,CAAA,GAAA,OAAA,CAAA,OAAA,EAAA,cAAA,EAAuB;AAAEC,MAAAA,GAAG,EAA1D;AAAqD,KAAvB,CAA9B;;AACA,QAAI,CAAJ,eAAA,EAAsB;AACpB,aAAA,EAAA;AAGF;;AAAA,UAAM;AAAEC,MAAAA,YAAY,GAAd,EAAA;AAAqBC,MAAAA,eAAe,GAApC;AAAA,QAA8CC,OAAO,CAA3D,eAA2D,CAA3D;;AAEA,UAAMC,IAAI,GAAG,EAAE,GAAF,eAAA;AAAsB,SAAnC;AAAa,KAAb;AAEA,WAAO,MAAM,CAAN,IAAA,CAAA,IAAA,EAAA,MAAA,CACL,CAAA,MAAA,EAAA,MAAA,KAAoE;AAClE,YAAMC,OAAO,GAAGD,IAAI,CAApB,MAAoB,CAApB,CADkE,CAElE;;AACA,UAAI,CAAJ,OAAA,EAAc;AACZ,eAAA,MAAA;AAGFE;;AAAAA,MAAAA,MAAM,CAANA,IAAAA,CAAY;AACVC,QAAAA,SAAS,EADC,oBAAA;AAEVC,QAAAA,OAAO,EAAE;AACPC,UAAAA,WAAW,EADJ,MAAA;AAEPC,UAAAA,cAAc,EAJlBJ;AAEW;AAFC,OAAZA;AAQA,aAAA,MAAA;AAhBG,KAAA,EAAP,EAAO,CAAP;AAoBA,GA9BF,CA8BE,OAAA,CAAA,EAAU;AACV,WAAA,EAAA;AAEH;AAAA","sourcesContent":["import findUp from 'next/dist/compiled/find-up'\n\nconst EVENT_PLUGIN_PRESENT = 'NEXT_PACKAGE_DETECTED'\ntype NextPluginsEvent = {\n  eventName: string\n  payload: {\n    packageName: string\n    packageVersion: string\n  }\n}\n\nexport async function eventNextPlugins(\n  dir: string\n): Promise<Array<NextPluginsEvent>> {\n  try {\n    const packageJsonPath = await findUp('package.json', { cwd: dir })\n    if (!packageJsonPath) {\n      return []\n    }\n\n    const { dependencies = {}, devDependencies = {} } = require(packageJsonPath)\n\n    const deps = { ...devDependencies, ...dependencies }\n\n    return Object.keys(deps).reduce(\n      (events: NextPluginsEvent[], plugin: string): NextPluginsEvent[] => {\n        const version = deps[plugin]\n        // Don't add deps without a version set\n        if (!version) {\n          return events\n        }\n\n        events.push({\n          eventName: EVENT_PLUGIN_PRESENT,\n          payload: {\n            packageName: plugin,\n            packageVersion: version,\n          },\n        })\n\n        return events\n      },\n      []\n    )\n  } catch (_) {\n    return []\n  }\n}\n"]},"metadata":{},"sourceType":"script"}