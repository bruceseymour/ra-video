{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _devalue = _interopRequireDefault(require(\"next/dist/compiled/devalue\"));\n\nvar _webpack = _interopRequireDefault(require(\"webpack\"));\n\nvar _webpackSources = _interopRequireDefault(require(\"webpack-sources\"));\n\nvar _constants = require(\"../../../next-server/lib/constants\");\n\nvar _getRouteFromEntrypoint = _interopRequireDefault(require(\"../../../next-server/server/get-route-from-entrypoint\"));\n\nvar _nextDropClientPagePlugin = require(\"./next-drop-client-page-plugin\");\n\nvar _utils = require(\"../../../next-server/lib/router/utils\");\n\nvar _tracer = require(\"../../tracer\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // @ts-ignore: TODO: remove ignore when webpack 5 is stable\n\n\nconst {\n  RawSource\n} = _webpack.default.sources || _webpackSources.default;\nconst isWebpack5 = parseInt(_webpack.default.version) === 5; // This function takes the asset map generated in BuildManifestPlugin and creates a\n// reduced version to send to the client.\n\nfunction generateClientManifest(assetMap, rewrites) {\n  const span = _tracer.tracer.startSpan('NextJsBuildManifest-generateClientManifest');\n\n  return (0, _tracer.traceFn)(span, () => {\n    const clientManifest = {\n      // TODO: update manifest type to include rewrites\n      __rewrites: rewrites\n    };\n    const appDependencies = new Set(assetMap.pages['/_app']);\n    const sortedPageKeys = (0, _utils.getSortedRoutes)(Object.keys(assetMap.pages));\n    sortedPageKeys.forEach(page => {\n      const dependencies = assetMap.pages[page];\n      if (page === '/_app') return; // Filter out dependencies in the _app entry, because those will have already\n      // been loaded by the client prior to a navigation event\n\n      const filteredDeps = dependencies.filter(dep => !appDependencies.has(dep)); // The manifest can omit the page if it has no requirements\n\n      if (filteredDeps.length) {\n        clientManifest[page] = filteredDeps;\n      }\n    }); // provide the sorted pages as an array so we don't rely on the object's keys\n    // being in order and we don't slow down look-up time for page assets\n\n    clientManifest.sortedPages = sortedPageKeys;\n    return (0, _devalue.default)(clientManifest);\n  });\n}\n\nfunction isJsFile(file) {\n  // We don't want to include `.hot-update.js` files into the initial page\n  return !file.endsWith('.hot-update.js') && file.endsWith('.js');\n}\n\nfunction getFilesArray(files) {\n  if (!files) {\n    return [];\n  }\n\n  if (isWebpack5) {\n    return Array.from(files);\n  }\n\n  return files;\n} // This plugin creates a build-manifest.json for all assets that are being output\n// It has a mapping of \"entry\" filename to real filename. Because the real filename can be hashed in production\n\n\nclass BuildManifestPlugin {\n  constructor(options) {\n    this.buildId = void 0;\n    this.rewrites = void 0;\n    this.buildId = options.buildId;\n    this.rewrites = options.rewrites.map(r => {\n      const rewrite = { ...r\n      }; // omit external rewrite destinations since these aren't\n      // handled client-side\n\n      if (!rewrite.destination.startsWith('/')) {\n        delete rewrite.destination;\n      }\n\n      return rewrite;\n    });\n  }\n\n  createAssets(compilation, assets) {\n    const span = _tracer.tracer.startSpan('NextJsBuildManifest-createassets');\n\n    return (0, _tracer.traceFn)(span, () => {\n      const namedChunks = compilation.namedChunks;\n      const assetMap = {\n        polyfillFiles: [],\n        devFiles: [],\n        ampDevFiles: [],\n        lowPriorityFiles: [],\n        pages: {\n          '/_app': []\n        },\n        ampFirstPages: []\n      };\n\n      const ampFirstEntryNames = _nextDropClientPagePlugin.ampFirstEntryNamesMap.get(compilation);\n\n      if (ampFirstEntryNames) {\n        for (const entryName of ampFirstEntryNames) {\n          const pagePath = (0, _getRouteFromEntrypoint.default)(entryName);\n\n          if (!pagePath) {\n            continue;\n          }\n\n          assetMap.ampFirstPages.push(pagePath);\n        }\n      }\n\n      const mainJsChunk = namedChunks.get(_constants.CLIENT_STATIC_FILES_RUNTIME_MAIN);\n      const mainJsFiles = getFilesArray(mainJsChunk == null ? void 0 : mainJsChunk.files).filter(isJsFile);\n      const polyfillChunk = namedChunks.get(_constants.CLIENT_STATIC_FILES_RUNTIME_POLYFILLS); // Create a separate entry  for polyfills\n\n      assetMap.polyfillFiles = getFilesArray(polyfillChunk == null ? void 0 : polyfillChunk.files).filter(isJsFile);\n      const reactRefreshChunk = namedChunks.get(_constants.CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH);\n      assetMap.devFiles = getFilesArray(reactRefreshChunk == null ? void 0 : reactRefreshChunk.files).filter(isJsFile);\n\n      for (const entrypoint of compilation.entrypoints.values()) {\n        const isAmpRuntime = entrypoint.name === _constants.CLIENT_STATIC_FILES_RUNTIME_AMP;\n\n        if (isAmpRuntime) {\n          for (const file of entrypoint.getFiles()) {\n            if (!(isJsFile(file) || file.endsWith('.css'))) {\n              continue;\n            }\n\n            assetMap.ampDevFiles.push(file.replace(/\\\\/g, '/'));\n          }\n\n          continue;\n        }\n\n        const pagePath = (0, _getRouteFromEntrypoint.default)(entrypoint.name);\n\n        if (!pagePath) {\n          continue;\n        }\n\n        const filesForEntry = []; // getFiles() - helper function to read the files for an entrypoint from stats object\n\n        for (const file of entrypoint.getFiles()) {\n          if (!(isJsFile(file) || file.endsWith('.css'))) {\n            continue;\n          }\n\n          filesForEntry.push(file.replace(/\\\\/g, '/'));\n        }\n\n        assetMap.pages[pagePath] = [...mainJsFiles, ...filesForEntry];\n      } // Add the runtime build manifest file (generated later in this file)\n      // as a dependency for the app. If the flag is false, the file won't be\n      // downloaded by the client.\n\n\n      assetMap.lowPriorityFiles.push(`${_constants.CLIENT_STATIC_FILES_PATH}/${this.buildId}/_buildManifest.js`); // Add the runtime ssg manifest file as a lazy-loaded file dependency.\n      // We also stub this file out for development mode (when it is not\n      // generated).\n\n      const srcEmptySsgManifest = `self.__SSG_MANIFEST=new Set;self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`;\n      const ssgManifestPath = `${_constants.CLIENT_STATIC_FILES_PATH}/${this.buildId}/_ssgManifest.js`;\n      assetMap.lowPriorityFiles.push(ssgManifestPath);\n      assets[ssgManifestPath] = new RawSource(srcEmptySsgManifest);\n      assetMap.pages = Object.keys(assetMap.pages).sort() // eslint-disable-next-line\n      .reduce((a, c) => (a[c] = assetMap.pages[c], a), {});\n      assets[_constants.BUILD_MANIFEST] = new RawSource(JSON.stringify(assetMap, null, 2));\n      const clientManifestPath = `${_constants.CLIENT_STATIC_FILES_PATH}/${this.buildId}/_buildManifest.js`;\n      assets[clientManifestPath] = new RawSource(`self.__BUILD_MANIFEST = ${generateClientManifest(assetMap, this.rewrites)};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`);\n      return assets;\n    });\n  }\n\n  apply(compiler) {\n    if (isWebpack5) {\n      compiler.hooks.make.tap('NextJsBuildManifest', compilation => {\n        // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n        compilation.hooks.processAssets.tap({\n          name: 'NextJsBuildManifest',\n          // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n          stage: _webpack.default.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS\n        }, assets => {\n          this.createAssets(compilation, assets);\n        });\n      });\n      return;\n    }\n\n    compiler.hooks.emit.tap('NextJsBuildManifest', compilation => {\n      this.createAssets(compilation, compilation.assets);\n    });\n  }\n\n}\n\nexports.default = BuildManifestPlugin;","map":{"version":3,"sources":["../../../../build/webpack/plugins/build-manifest-plugin.ts"],"names":["webpack","sources","isWebpack5","parseInt","span","tracer","clientManifest","__rewrites","appDependencies","assetMap","sortedPageKeys","Object","page","dependencies","filteredDeps","dep","file","Array","BuildManifestPlugin","buildId","rewrites","constructor","options","r","rewrite","createAssets","namedChunks","compilation","polyfillFiles","devFiles","ampDevFiles","lowPriorityFiles","pages","ampFirstPages","ampFirstEntryNames","ampFirstEntryNamesMap","pagePath","mainJsChunk","CLIENT_STATIC_FILES_RUNTIME_MAIN","mainJsFiles","getFilesArray","polyfillChunk","CLIENT_STATIC_FILES_RUNTIME_POLYFILLS","reactRefreshChunk","CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH","isAmpRuntime","entrypoint","CLIENT_STATIC_FILES_RUNTIME_AMP","isJsFile","filesForEntry","CLIENT_STATIC_FILES_PATH","srcEmptySsgManifest","ssgManifestPath","assets","a","BUILD_MANIFEST","JSON","clientManifestPath","generateClientManifest","apply","name","stage","compiler"],"mappings":"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","sourcesContent":["import devalue from 'next/dist/compiled/devalue'\nimport webpack, { Compiler, compilation as CompilationType } from 'webpack'\nimport sources from 'webpack-sources'\nimport {\n  BUILD_MANIFEST,\n  CLIENT_STATIC_FILES_PATH,\n  CLIENT_STATIC_FILES_RUNTIME_MAIN,\n  CLIENT_STATIC_FILES_RUNTIME_POLYFILLS,\n  CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH,\n  CLIENT_STATIC_FILES_RUNTIME_AMP,\n} from '../../../next-server/lib/constants'\nimport { BuildManifest } from '../../../next-server/server/get-page-files'\nimport getRouteFromEntrypoint from '../../../next-server/server/get-route-from-entrypoint'\nimport { ampFirstEntryNamesMap } from './next-drop-client-page-plugin'\nimport { Rewrite } from '../../../lib/load-custom-routes'\nimport { getSortedRoutes } from '../../../next-server/lib/router/utils'\nimport { tracer, traceFn } from '../../tracer'\n\n// @ts-ignore: TODO: remove ignore when webpack 5 is stable\nconst { RawSource } = webpack.sources || sources\n\nconst isWebpack5 = parseInt(webpack.version!) === 5\n\ntype DeepMutable<T> = { -readonly [P in keyof T]: DeepMutable<T[P]> }\n\nexport type ClientBuildManifest = Record<string, string[]>\n\n// This function takes the asset map generated in BuildManifestPlugin and creates a\n// reduced version to send to the client.\nfunction generateClientManifest(\n  assetMap: BuildManifest,\n  rewrites: Rewrite[]\n): string {\n  const span = tracer.startSpan('NextJsBuildManifest-generateClientManifest')\n  return traceFn(span, () => {\n    const clientManifest: ClientBuildManifest = {\n      // TODO: update manifest type to include rewrites\n      __rewrites: rewrites as any,\n    }\n    const appDependencies = new Set(assetMap.pages['/_app'])\n    const sortedPageKeys = getSortedRoutes(Object.keys(assetMap.pages))\n\n    sortedPageKeys.forEach((page) => {\n      const dependencies = assetMap.pages[page]\n\n      if (page === '/_app') return\n      // Filter out dependencies in the _app entry, because those will have already\n      // been loaded by the client prior to a navigation event\n      const filteredDeps = dependencies.filter(\n        (dep) => !appDependencies.has(dep)\n      )\n\n      // The manifest can omit the page if it has no requirements\n      if (filteredDeps.length) {\n        clientManifest[page] = filteredDeps\n      }\n    })\n    // provide the sorted pages as an array so we don't rely on the object's keys\n    // being in order and we don't slow down look-up time for page assets\n    clientManifest.sortedPages = sortedPageKeys\n\n    return devalue(clientManifest)\n  })\n}\n\nfunction isJsFile(file: string): boolean {\n  // We don't want to include `.hot-update.js` files into the initial page\n  return !file.endsWith('.hot-update.js') && file.endsWith('.js')\n}\n\nfunction getFilesArray(files: any) {\n  if (!files) {\n    return []\n  }\n  if (isWebpack5) {\n    return Array.from(files)\n  }\n\n  return files\n}\n\n// This plugin creates a build-manifest.json for all assets that are being output\n// It has a mapping of \"entry\" filename to real filename. Because the real filename can be hashed in production\nexport default class BuildManifestPlugin {\n  private buildId: string\n  private rewrites: Rewrite[]\n\n  constructor(options: { buildId: string; rewrites: Rewrite[] }) {\n    this.buildId = options.buildId\n\n    this.rewrites = options.rewrites.map((r) => {\n      const rewrite = { ...r }\n\n      // omit external rewrite destinations since these aren't\n      // handled client-side\n      if (!rewrite.destination.startsWith('/')) {\n        delete (rewrite as any).destination\n      }\n      return rewrite\n    })\n  }\n\n  createAssets(compilation: any, assets: any) {\n    const span = tracer.startSpan('NextJsBuildManifest-createassets')\n    return traceFn(span, () => {\n      const namedChunks: Map<string, CompilationType.Chunk> =\n        compilation.namedChunks\n      const assetMap: DeepMutable<BuildManifest> = {\n        polyfillFiles: [],\n        devFiles: [],\n        ampDevFiles: [],\n        lowPriorityFiles: [],\n        pages: { '/_app': [] },\n        ampFirstPages: [],\n      }\n\n      const ampFirstEntryNames = ampFirstEntryNamesMap.get(compilation)\n      if (ampFirstEntryNames) {\n        for (const entryName of ampFirstEntryNames) {\n          const pagePath = getRouteFromEntrypoint(entryName)\n          if (!pagePath) {\n            continue\n          }\n\n          assetMap.ampFirstPages.push(pagePath)\n        }\n      }\n\n      const mainJsChunk = namedChunks.get(CLIENT_STATIC_FILES_RUNTIME_MAIN)\n\n      const mainJsFiles: string[] = getFilesArray(mainJsChunk?.files).filter(\n        isJsFile\n      )\n\n      const polyfillChunk = namedChunks.get(\n        CLIENT_STATIC_FILES_RUNTIME_POLYFILLS\n      )\n\n      // Create a separate entry  for polyfills\n      assetMap.polyfillFiles = getFilesArray(polyfillChunk?.files).filter(\n        isJsFile\n      )\n\n      const reactRefreshChunk = namedChunks.get(\n        CLIENT_STATIC_FILES_RUNTIME_REACT_REFRESH\n      )\n      assetMap.devFiles = getFilesArray(reactRefreshChunk?.files).filter(\n        isJsFile\n      )\n\n      for (const entrypoint of compilation.entrypoints.values()) {\n        const isAmpRuntime = entrypoint.name === CLIENT_STATIC_FILES_RUNTIME_AMP\n\n        if (isAmpRuntime) {\n          for (const file of entrypoint.getFiles()) {\n            if (!(isJsFile(file) || file.endsWith('.css'))) {\n              continue\n            }\n\n            assetMap.ampDevFiles.push(file.replace(/\\\\/g, '/'))\n          }\n          continue\n        }\n        const pagePath = getRouteFromEntrypoint(entrypoint.name)\n\n        if (!pagePath) {\n          continue\n        }\n\n        const filesForEntry: string[] = []\n\n        // getFiles() - helper function to read the files for an entrypoint from stats object\n        for (const file of entrypoint.getFiles()) {\n          if (!(isJsFile(file) || file.endsWith('.css'))) {\n            continue\n          }\n\n          filesForEntry.push(file.replace(/\\\\/g, '/'))\n        }\n\n        assetMap.pages[pagePath] = [...mainJsFiles, ...filesForEntry]\n      }\n\n      // Add the runtime build manifest file (generated later in this file)\n      // as a dependency for the app. If the flag is false, the file won't be\n      // downloaded by the client.\n      assetMap.lowPriorityFiles.push(\n        `${CLIENT_STATIC_FILES_PATH}/${this.buildId}/_buildManifest.js`\n      )\n\n      // Add the runtime ssg manifest file as a lazy-loaded file dependency.\n      // We also stub this file out for development mode (when it is not\n      // generated).\n      const srcEmptySsgManifest = `self.__SSG_MANIFEST=new Set;self.__SSG_MANIFEST_CB&&self.__SSG_MANIFEST_CB()`\n\n      const ssgManifestPath = `${CLIENT_STATIC_FILES_PATH}/${this.buildId}/_ssgManifest.js`\n      assetMap.lowPriorityFiles.push(ssgManifestPath)\n      assets[ssgManifestPath] = new RawSource(srcEmptySsgManifest)\n\n      assetMap.pages = Object.keys(assetMap.pages)\n        .sort()\n        // eslint-disable-next-line\n        .reduce((a, c) => ((a[c] = assetMap.pages[c]), a), {} as any)\n\n      assets[BUILD_MANIFEST] = new RawSource(JSON.stringify(assetMap, null, 2))\n\n      const clientManifestPath = `${CLIENT_STATIC_FILES_PATH}/${this.buildId}/_buildManifest.js`\n\n      assets[clientManifestPath] = new RawSource(\n        `self.__BUILD_MANIFEST = ${generateClientManifest(\n          assetMap,\n          this.rewrites\n        )};self.__BUILD_MANIFEST_CB && self.__BUILD_MANIFEST_CB()`\n      )\n\n      return assets\n    })\n  }\n\n  apply(compiler: Compiler) {\n    if (isWebpack5) {\n      compiler.hooks.make.tap('NextJsBuildManifest', (compilation) => {\n        // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n        compilation.hooks.processAssets.tap(\n          {\n            name: 'NextJsBuildManifest',\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONS,\n          },\n          (assets: any) => {\n            this.createAssets(compilation, assets)\n          }\n        )\n      })\n      return\n    }\n\n    compiler.hooks.emit.tap('NextJsBuildManifest', (compilation: any) => {\n      this.createAssets(compilation, compilation.assets)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}