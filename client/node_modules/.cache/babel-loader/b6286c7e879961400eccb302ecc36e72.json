{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.apiResolver = apiResolver;\nexports.parseBody = parseBody;\nexports.getCookieParser = getCookieParser;\nexports.sendStatusCode = sendStatusCode;\nexports.redirect = redirect;\nexports.sendData = sendData;\nexports.sendJson = sendJson;\nexports.tryGetPreviewData = tryGetPreviewData;\nexports.sendError = sendError;\nexports.setLazyProp = setLazyProp;\nexports.ApiError = exports.SYMBOL_PREVIEW_DATA = void 0;\n\nvar _contentType = require(\"next/dist/compiled/content-type\");\n\nvar _rawBody = _interopRequireDefault(require(\"raw-body\"));\n\nvar _stream = require(\"stream\");\n\nvar _utils = require(\"../lib/utils\");\n\nvar _cryptoUtils = require(\"./crypto-utils\");\n\nvar _loadComponents = require(\"./load-components\");\n\nvar _sendPayload = require(\"./send-payload\");\n\nvar _etag = _interopRequireDefault(require(\"etag\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nasync function apiResolver(req, res, query, resolverModule, apiContext, propagateError, onError) {\n  const apiReq = req;\n  const apiRes = res;\n\n  try {\n    var _config$api, _config$api2;\n\n    if (!resolverModule) {\n      res.statusCode = 404;\n      res.end('Not Found');\n      return;\n    }\n\n    const config = resolverModule.config || {};\n    const bodyParser = ((_config$api = config.api) == null ? void 0 : _config$api.bodyParser) !== false;\n    const externalResolver = ((_config$api2 = config.api) == null ? void 0 : _config$api2.externalResolver) || false; // Parsing of cookies\n\n    setLazyProp({\n      req: apiReq\n    }, 'cookies', getCookieParser(req)); // Parsing query string\n\n    apiReq.query = query; // Parsing preview data\n\n    setLazyProp({\n      req: apiReq\n    }, 'previewData', () => tryGetPreviewData(req, res, apiContext)); // Checking if preview mode is enabled\n\n    setLazyProp({\n      req: apiReq\n    }, 'preview', () => apiReq.previewData !== false ? true : undefined); // Parsing of body\n\n    if (bodyParser && !apiReq.body) {\n      apiReq.body = await parseBody(apiReq, config.api && config.api.bodyParser && config.api.bodyParser.sizeLimit ? config.api.bodyParser.sizeLimit : '1mb');\n    }\n\n    apiRes.status = statusCode => sendStatusCode(apiRes, statusCode);\n\n    apiRes.send = data => sendData(apiReq, apiRes, data);\n\n    apiRes.json = data => sendJson(apiRes, data);\n\n    apiRes.redirect = (statusOrUrl, url) => redirect(apiRes, statusOrUrl, url);\n\n    apiRes.setPreviewData = (data, options = {}) => setPreviewData(apiRes, data, Object.assign({}, apiContext, options));\n\n    apiRes.clearPreviewData = () => clearPreviewData(apiRes);\n\n    const resolver = (0, _loadComponents.interopDefault)(resolverModule);\n    let wasPiped = false;\n\n    if (process.env.NODE_ENV !== 'production') {\n      // listen for pipe event and don't show resolve warning\n      res.once('pipe', () => wasPiped = true);\n    } // Call API route method\n\n\n    await resolver(req, res);\n\n    if (process.env.NODE_ENV !== 'production' && !externalResolver && !(0, _utils.isResSent)(res) && !wasPiped) {\n      console.warn(`API resolved without sending a response for ${req.url}, this may result in stalled requests.`);\n    }\n  } catch (err) {\n    if (err instanceof ApiError) {\n      sendError(apiRes, err.statusCode, err.message);\n    } else {\n      console.error(err);\n      if (onError) await onError({\n        err\n      });\n\n      if (propagateError) {\n        throw err;\n      }\n\n      sendError(apiRes, 500, 'Internal Server Error');\n    }\n  }\n}\n/**\n* Parse incoming message like `json` or `urlencoded`\n* @param req request object\n*/\n\n\nasync function parseBody(req, limit) {\n  const contentType = (0, _contentType.parse)(req.headers['content-type'] || 'text/plain');\n  const {\n    type,\n    parameters\n  } = contentType;\n  const encoding = parameters.charset || 'utf-8';\n  let buffer;\n\n  try {\n    buffer = await (0, _rawBody.default)(req, {\n      encoding,\n      limit\n    });\n  } catch (e) {\n    if (e.type === 'entity.too.large') {\n      throw new ApiError(413, `Body exceeded ${limit} limit`);\n    } else {\n      throw new ApiError(400, 'Invalid body');\n    }\n  }\n\n  const body = buffer.toString();\n\n  if (type === 'application/json' || type === 'application/ld+json') {\n    return parseJson(body);\n  } else if (type === 'application/x-www-form-urlencoded') {\n    const qs = require('querystring');\n\n    return qs.decode(body);\n  } else {\n    return body;\n  }\n}\n/**\n* Parse `JSON` and handles invalid `JSON` strings\n* @param str `JSON` string\n*/\n\n\nfunction parseJson(str) {\n  if (str.length === 0) {\n    // special-case empty json body, as it's a common client-side mistake\n    return {};\n  }\n\n  try {\n    return JSON.parse(str);\n  } catch (e) {\n    throw new ApiError(400, 'Invalid JSON');\n  }\n}\n/**\n* Parse cookies from `req` header\n* @param req request object\n*/\n\n\nfunction getCookieParser(req) {\n  return function parseCookie() {\n    const header = req.headers.cookie;\n\n    if (!header) {\n      return {};\n    }\n\n    const {\n      parse: parseCookieFn\n    } = require('next/dist/compiled/cookie');\n\n    return parseCookieFn(Array.isArray(header) ? header.join(';') : header);\n  };\n}\n/**\n*\n* @param res response object\n* @param statusCode `HTTP` status code of response\n*/\n\n\nfunction sendStatusCode(res, statusCode) {\n  res.statusCode = statusCode;\n  return res;\n}\n/**\n*\n* @param res response object\n* @param [statusOrUrl] `HTTP` status code of redirect\n* @param url URL of redirect\n*/\n\n\nfunction redirect(res, statusOrUrl, url) {\n  if (typeof statusOrUrl === 'string') {\n    url = statusOrUrl;\n    statusOrUrl = 307;\n  }\n\n  if (typeof statusOrUrl !== 'number' || typeof url !== 'string') {\n    throw new Error(`Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`);\n  }\n\n  res.writeHead(statusOrUrl, {\n    Location: url\n  });\n  res.write('');\n  res.end();\n  return res;\n}\n/**\n* Send `any` body to response\n* @param req request object\n* @param res response object\n* @param body of response\n*/\n\n\nfunction sendData(req, res, body) {\n  if (body === null) {\n    res.end();\n    return;\n  }\n\n  const contentType = res.getHeader('Content-Type');\n\n  if (body instanceof _stream.Stream) {\n    if (!contentType) {\n      res.setHeader('Content-Type', 'application/octet-stream');\n    }\n\n    body.pipe(res);\n    return;\n  }\n\n  const isJSONLike = ['object', 'number', 'boolean'].includes(typeof body);\n  const stringifiedBody = isJSONLike ? JSON.stringify(body) : body;\n  const etag = (0, _etag.default)(stringifiedBody);\n\n  if ((0, _sendPayload.sendEtagResponse)(req, res, etag)) {\n    return;\n  }\n\n  if (Buffer.isBuffer(body)) {\n    if (!contentType) {\n      res.setHeader('Content-Type', 'application/octet-stream');\n    }\n\n    res.setHeader('Content-Length', body.length);\n    res.end(body);\n    return;\n  }\n\n  if (isJSONLike) {\n    res.setHeader('Content-Type', 'application/json; charset=utf-8');\n  }\n\n  res.setHeader('Content-Length', Buffer.byteLength(stringifiedBody));\n  res.end(stringifiedBody);\n}\n/**\n* Send `JSON` object\n* @param res response object\n* @param jsonBody of data\n*/\n\n\nfunction sendJson(res, jsonBody) {\n  // Set header to application/json\n  res.setHeader('Content-Type', 'application/json; charset=utf-8'); // Use send to handle request\n\n  res.send(jsonBody);\n}\n\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`;\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`;\nconst SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA);\nexports.SYMBOL_PREVIEW_DATA = SYMBOL_PREVIEW_DATA;\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS);\n\nfunction tryGetPreviewData(req, res, options) {\n  // Read cached preview data if present\n  if (SYMBOL_PREVIEW_DATA in req) {\n    return req[SYMBOL_PREVIEW_DATA];\n  }\n\n  const getCookies = getCookieParser(req);\n  let cookies;\n\n  try {\n    cookies = getCookies();\n  } catch (_unused) {\n    // TODO: warn\n    return false;\n  }\n\n  const hasBypass = (COOKIE_NAME_PRERENDER_BYPASS in cookies);\n  const hasData = (COOKIE_NAME_PRERENDER_DATA in cookies); // Case: neither cookie is set.\n\n  if (!(hasBypass || hasData)) {\n    return false;\n  } // Case: one cookie is set, but not the other.\n\n\n  if (hasBypass !== hasData) {\n    clearPreviewData(res);\n    return false;\n  } // Case: preview session is for an old build.\n\n\n  if (cookies[COOKIE_NAME_PRERENDER_BYPASS] !== options.previewModeId) {\n    clearPreviewData(res);\n    return false;\n  }\n\n  const tokenPreviewData = cookies[COOKIE_NAME_PRERENDER_DATA];\n\n  const jsonwebtoken = require('next/dist/compiled/jsonwebtoken');\n\n  let encryptedPreviewData;\n\n  try {\n    encryptedPreviewData = jsonwebtoken.verify(tokenPreviewData, options.previewModeSigningKey);\n  } catch (_unused2) {\n    // TODO: warn\n    clearPreviewData(res);\n    return false;\n  }\n\n  const decryptedPreviewData = (0, _cryptoUtils.decryptWithSecret)(Buffer.from(options.previewModeEncryptionKey), encryptedPreviewData.data);\n\n  try {\n    // TODO: strict runtime type checking\n    const data = JSON.parse(decryptedPreviewData); // Cache lookup\n\n    Object.defineProperty(req, SYMBOL_PREVIEW_DATA, {\n      value: data,\n      enumerable: false\n    });\n    return data;\n  } catch (_unused3) {\n    return false;\n  }\n}\n\nfunction setPreviewData(res, data, // TODO: strict runtime type checking\noptions) {\n  if (typeof options.previewModeId !== 'string' || options.previewModeId.length < 16) {\n    throw new Error('invariant: invalid previewModeId');\n  }\n\n  if (typeof options.previewModeEncryptionKey !== 'string' || options.previewModeEncryptionKey.length < 16) {\n    throw new Error('invariant: invalid previewModeEncryptionKey');\n  }\n\n  if (typeof options.previewModeSigningKey !== 'string' || options.previewModeSigningKey.length < 16) {\n    throw new Error('invariant: invalid previewModeSigningKey');\n  }\n\n  const jsonwebtoken = require('next/dist/compiled/jsonwebtoken');\n\n  const payload = jsonwebtoken.sign({\n    data: (0, _cryptoUtils.encryptWithSecret)(Buffer.from(options.previewModeEncryptionKey), JSON.stringify(data))\n  }, options.previewModeSigningKey, {\n    algorithm: 'HS256',\n    ...(options.maxAge !== undefined ? {\n      expiresIn: options.maxAge\n    } : undefined)\n  }); // limit preview mode cookie to 2KB since we shouldn't store too much\n  // data here and browsers drop cookies over 4KB\n\n  if (payload.length > 2048) {\n    throw new Error(`Preview data is limited to 2KB currently, reduce how much data you are storing as preview data to continue`);\n  }\n\n  const {\n    serialize\n  } = require('next/dist/compiled/cookie');\n\n  const previous = res.getHeader('Set-Cookie');\n  res.setHeader(`Set-Cookie`, [...(typeof previous === 'string' ? [previous] : Array.isArray(previous) ? previous : []), serialize(COOKIE_NAME_PRERENDER_BYPASS, options.previewModeId, {\n    httpOnly: true,\n    sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n    secure: process.env.NODE_ENV !== 'development',\n    path: '/',\n    ...(options.maxAge !== undefined ? {\n      maxAge: options.maxAge\n    } : undefined)\n  }), serialize(COOKIE_NAME_PRERENDER_DATA, payload, {\n    httpOnly: true,\n    sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n    secure: process.env.NODE_ENV !== 'development',\n    path: '/',\n    ...(options.maxAge !== undefined ? {\n      maxAge: options.maxAge\n    } : undefined)\n  })]);\n  return res;\n}\n\nfunction clearPreviewData(res) {\n  if (SYMBOL_CLEARED_COOKIES in res) {\n    return res;\n  }\n\n  const {\n    serialize\n  } = require('next/dist/compiled/cookie');\n\n  const previous = res.getHeader('Set-Cookie');\n  res.setHeader(`Set-Cookie`, [...(typeof previous === 'string' ? [previous] : Array.isArray(previous) ? previous : []), serialize(COOKIE_NAME_PRERENDER_BYPASS, '', {\n    // To delete a cookie, set `expires` to a date in the past:\n    // https://tools.ietf.org/html/rfc6265#section-4.1.1\n    // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n    expires: new Date(0),\n    httpOnly: true,\n    sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n    secure: process.env.NODE_ENV !== 'development',\n    path: '/'\n  }), serialize(COOKIE_NAME_PRERENDER_DATA, '', {\n    // To delete a cookie, set `expires` to a date in the past:\n    // https://tools.ietf.org/html/rfc6265#section-4.1.1\n    // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n    expires: new Date(0),\n    httpOnly: true,\n    sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n    secure: process.env.NODE_ENV !== 'development',\n    path: '/'\n  })]);\n  Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n    value: true,\n    enumerable: false\n  });\n  return res;\n}\n/**\n* Custom error class\n*/\n\n\nclass ApiError extends Error {\n  constructor(statusCode, message) {\n    super(message);\n    this.statusCode = void 0;\n    this.statusCode = statusCode;\n  }\n\n}\n/**\n* Sends error in `response`\n* @param res response object\n* @param statusCode of response\n* @param message of response\n*/\n\n\nexports.ApiError = ApiError;\n\nfunction sendError(res, statusCode, message) {\n  res.statusCode = statusCode;\n  res.statusMessage = message;\n  res.end(message);\n}\n/**\n* Execute getter function only if its needed\n* @param LazyProps `req` and `params` for lazyProp\n* @param prop name of property\n* @param getter function to get data\n*/\n\n\nfunction setLazyProp({\n  req,\n  params\n}, prop, getter) {\n  const opts = {\n    configurable: true,\n    enumerable: true\n  };\n  const optsReset = { ...opts,\n    writable: true\n  };\n  Object.defineProperty(req, prop, { ...opts,\n    get: () => {\n      let value = getter();\n\n      if (params && typeof params !== 'boolean') {\n        value = { ...value,\n          ...params\n        };\n      } // we set the property on the object to avoid recalculating it\n\n\n      Object.defineProperty(req, prop, { ...optsReset,\n        value\n      });\n      return value;\n    },\n    set: value => {\n      Object.defineProperty(req, prop, { ...optsReset,\n        value\n      });\n    }\n  });\n}","map":{"version":3,"sources":["../../../next-server/server/api-utils.ts"],"names":["apiReq","apiRes","res","config","resolverModule","bodyParser","externalResolver","setLazyProp","req","getCookieParser","tryGetPreviewData","parseBody","statusCode","sendStatusCode","data","sendData","sendJson","redirect","options","setPreviewData","Object","clearPreviewData","resolver","wasPiped","process","console","url","err","sendError","onError","contentType","encoding","parameters","buffer","e","limit","body","type","parseJson","qs","require","str","JSON","header","parse","parseCookieFn","Array","statusOrUrl","Location","Stream","isJSONLike","stringifiedBody","etag","Buffer","COOKIE_NAME_PRERENDER_BYPASS","COOKIE_NAME_PRERENDER_DATA","SYMBOL_PREVIEW_DATA","Symbol","SYMBOL_CLEARED_COOKIES","getCookies","cookies","hasBypass","hasData","tokenPreviewData","jsonwebtoken","encryptedPreviewData","decryptedPreviewData","value","enumerable","payload","algorithm","expiresIn","previous","serialize","httpOnly","sameSite","secure","path","maxAge","expires","Error","constructor","opts","configurable","optsReset","writable","get","getter","params","set"],"mappings":"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","sourcesContent":["import { IncomingMessage, ServerResponse } from 'http'\nimport { parse } from 'next/dist/compiled/content-type'\nimport { CookieSerializeOptions } from 'next/dist/compiled/cookie'\nimport getRawBody from 'raw-body'\nimport { PageConfig } from 'next/types'\nimport { Stream } from 'stream'\nimport { isResSent, NextApiRequest, NextApiResponse } from '../lib/utils'\nimport { decryptWithSecret, encryptWithSecret } from './crypto-utils'\nimport { interopDefault } from './load-components'\nimport { Params } from './router'\nimport { sendEtagResponse } from './send-payload'\nimport generateETag from 'etag'\n\nexport type NextApiRequestCookies = { [key: string]: string }\nexport type NextApiRequestQuery = { [key: string]: string | string[] }\n\nexport type __ApiPreviewProps = {\n  previewModeId: string\n  previewModeEncryptionKey: string\n  previewModeSigningKey: string\n}\n\nexport async function apiResolver(\n  req: IncomingMessage,\n  res: ServerResponse,\n  query: any,\n  resolverModule: any,\n  apiContext: __ApiPreviewProps,\n  propagateError: boolean,\n  onError?: ({ err }: { err: any }) => Promise<void>\n) {\n  const apiReq = req as NextApiRequest\n  const apiRes = res as NextApiResponse\n\n  try {\n    if (!resolverModule) {\n      res.statusCode = 404\n      res.end('Not Found')\n      return\n    }\n    const config: PageConfig = resolverModule.config || {}\n    const bodyParser = config.api?.bodyParser !== false\n    const externalResolver = config.api?.externalResolver || false\n\n    // Parsing of cookies\n    setLazyProp({ req: apiReq }, 'cookies', getCookieParser(req))\n    // Parsing query string\n    apiReq.query = query\n    // Parsing preview data\n    setLazyProp({ req: apiReq }, 'previewData', () =>\n      tryGetPreviewData(req, res, apiContext)\n    )\n    // Checking if preview mode is enabled\n    setLazyProp({ req: apiReq }, 'preview', () =>\n      apiReq.previewData !== false ? true : undefined\n    )\n\n    // Parsing of body\n    if (bodyParser && !apiReq.body) {\n      apiReq.body = await parseBody(\n        apiReq,\n        config.api && config.api.bodyParser && config.api.bodyParser.sizeLimit\n          ? config.api.bodyParser.sizeLimit\n          : '1mb'\n      )\n    }\n\n    apiRes.status = (statusCode) => sendStatusCode(apiRes, statusCode)\n    apiRes.send = (data) => sendData(apiReq, apiRes, data)\n    apiRes.json = (data) => sendJson(apiRes, data)\n    apiRes.redirect = (statusOrUrl: number | string, url?: string) =>\n      redirect(apiRes, statusOrUrl, url)\n    apiRes.setPreviewData = (data, options = {}) =>\n      setPreviewData(apiRes, data, Object.assign({}, apiContext, options))\n    apiRes.clearPreviewData = () => clearPreviewData(apiRes)\n\n    const resolver = interopDefault(resolverModule)\n    let wasPiped = false\n\n    if (process.env.NODE_ENV !== 'production') {\n      // listen for pipe event and don't show resolve warning\n      res.once('pipe', () => (wasPiped = true))\n    }\n\n    // Call API route method\n    await resolver(req, res)\n\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !externalResolver &&\n      !isResSent(res) &&\n      !wasPiped\n    ) {\n      console.warn(\n        `API resolved without sending a response for ${req.url}, this may result in stalled requests.`\n      )\n    }\n  } catch (err) {\n    if (err instanceof ApiError) {\n      sendError(apiRes, err.statusCode, err.message)\n    } else {\n      console.error(err)\n      if (onError) await onError({ err })\n      if (propagateError) {\n        throw err\n      }\n      sendError(apiRes, 500, 'Internal Server Error')\n    }\n  }\n}\n\n/**\n * Parse incoming message like `json` or `urlencoded`\n * @param req request object\n */\nexport async function parseBody(\n  req: NextApiRequest,\n  limit: string | number\n): Promise<any> {\n  const contentType = parse(req.headers['content-type'] || 'text/plain')\n  const { type, parameters } = contentType\n  const encoding = parameters.charset || 'utf-8'\n\n  let buffer\n\n  try {\n    buffer = await getRawBody(req, { encoding, limit })\n  } catch (e) {\n    if (e.type === 'entity.too.large') {\n      throw new ApiError(413, `Body exceeded ${limit} limit`)\n    } else {\n      throw new ApiError(400, 'Invalid body')\n    }\n  }\n\n  const body = buffer.toString()\n\n  if (type === 'application/json' || type === 'application/ld+json') {\n    return parseJson(body)\n  } else if (type === 'application/x-www-form-urlencoded') {\n    const qs = require('querystring')\n    return qs.decode(body)\n  } else {\n    return body\n  }\n}\n\n/**\n * Parse `JSON` and handles invalid `JSON` strings\n * @param str `JSON` string\n */\nfunction parseJson(str: string): object {\n  if (str.length === 0) {\n    // special-case empty json body, as it's a common client-side mistake\n    return {}\n  }\n\n  try {\n    return JSON.parse(str)\n  } catch (e) {\n    throw new ApiError(400, 'Invalid JSON')\n  }\n}\n\n/**\n * Parse cookies from `req` header\n * @param req request object\n */\nexport function getCookieParser(req: IncomingMessage) {\n  return function parseCookie(): NextApiRequestCookies {\n    const header: undefined | string | string[] = req.headers.cookie\n\n    if (!header) {\n      return {}\n    }\n\n    const { parse: parseCookieFn } = require('next/dist/compiled/cookie')\n    return parseCookieFn(Array.isArray(header) ? header.join(';') : header)\n  }\n}\n\n/**\n *\n * @param res response object\n * @param statusCode `HTTP` status code of response\n */\nexport function sendStatusCode(\n  res: NextApiResponse,\n  statusCode: number\n): NextApiResponse<any> {\n  res.statusCode = statusCode\n  return res\n}\n\n/**\n *\n * @param res response object\n * @param [statusOrUrl] `HTTP` status code of redirect\n * @param url URL of redirect\n */\nexport function redirect(\n  res: NextApiResponse,\n  statusOrUrl: string | number,\n  url?: string\n): NextApiResponse<any> {\n  if (typeof statusOrUrl === 'string') {\n    url = statusOrUrl\n    statusOrUrl = 307\n  }\n  if (typeof statusOrUrl !== 'number' || typeof url !== 'string') {\n    throw new Error(\n      `Invalid redirect arguments. Please use a single argument URL, e.g. res.redirect('/destination') or use a status code and URL, e.g. res.redirect(307, '/destination').`\n    )\n  }\n  res.writeHead(statusOrUrl, { Location: url })\n  res.write('')\n  res.end()\n  return res\n}\n\n/**\n * Send `any` body to response\n * @param req request object\n * @param res response object\n * @param body of response\n */\nexport function sendData(\n  req: NextApiRequest,\n  res: NextApiResponse,\n  body: any\n): void {\n  if (body === null) {\n    res.end()\n    return\n  }\n\n  const contentType = res.getHeader('Content-Type')\n\n  if (body instanceof Stream) {\n    if (!contentType) {\n      res.setHeader('Content-Type', 'application/octet-stream')\n    }\n    body.pipe(res)\n    return\n  }\n\n  const isJSONLike = ['object', 'number', 'boolean'].includes(typeof body)\n  const stringifiedBody = isJSONLike ? JSON.stringify(body) : body\n  const etag = generateETag(stringifiedBody)\n  if (sendEtagResponse(req, res, etag)) {\n    return\n  }\n\n  if (Buffer.isBuffer(body)) {\n    if (!contentType) {\n      res.setHeader('Content-Type', 'application/octet-stream')\n    }\n    res.setHeader('Content-Length', body.length)\n    res.end(body)\n    return\n  }\n\n  if (isJSONLike) {\n    res.setHeader('Content-Type', 'application/json; charset=utf-8')\n  }\n\n  res.setHeader('Content-Length', Buffer.byteLength(stringifiedBody))\n  res.end(stringifiedBody)\n}\n\n/**\n * Send `JSON` object\n * @param res response object\n * @param jsonBody of data\n */\nexport function sendJson(res: NextApiResponse, jsonBody: any): void {\n  // Set header to application/json\n  res.setHeader('Content-Type', 'application/json; charset=utf-8')\n\n  // Use send to handle request\n  res.send(jsonBody)\n}\n\nconst COOKIE_NAME_PRERENDER_BYPASS = `__prerender_bypass`\nconst COOKIE_NAME_PRERENDER_DATA = `__next_preview_data`\n\nexport const SYMBOL_PREVIEW_DATA = Symbol(COOKIE_NAME_PRERENDER_DATA)\nconst SYMBOL_CLEARED_COOKIES = Symbol(COOKIE_NAME_PRERENDER_BYPASS)\n\nexport function tryGetPreviewData(\n  req: IncomingMessage,\n  res: ServerResponse,\n  options: __ApiPreviewProps\n): object | string | false {\n  // Read cached preview data if present\n  if (SYMBOL_PREVIEW_DATA in req) {\n    return (req as any)[SYMBOL_PREVIEW_DATA] as any\n  }\n\n  const getCookies = getCookieParser(req)\n  let cookies: NextApiRequestCookies\n  try {\n    cookies = getCookies()\n  } catch {\n    // TODO: warn\n    return false\n  }\n\n  const hasBypass = COOKIE_NAME_PRERENDER_BYPASS in cookies\n  const hasData = COOKIE_NAME_PRERENDER_DATA in cookies\n\n  // Case: neither cookie is set.\n  if (!(hasBypass || hasData)) {\n    return false\n  }\n\n  // Case: one cookie is set, but not the other.\n  if (hasBypass !== hasData) {\n    clearPreviewData(res as NextApiResponse)\n    return false\n  }\n\n  // Case: preview session is for an old build.\n  if (cookies[COOKIE_NAME_PRERENDER_BYPASS] !== options.previewModeId) {\n    clearPreviewData(res as NextApiResponse)\n    return false\n  }\n\n  const tokenPreviewData = cookies[COOKIE_NAME_PRERENDER_DATA]\n\n  const jsonwebtoken = require('next/dist/compiled/jsonwebtoken') as typeof import('jsonwebtoken')\n  let encryptedPreviewData: {\n    data: string\n  }\n  try {\n    encryptedPreviewData = jsonwebtoken.verify(\n      tokenPreviewData,\n      options.previewModeSigningKey\n    ) as typeof encryptedPreviewData\n  } catch {\n    // TODO: warn\n    clearPreviewData(res as NextApiResponse)\n    return false\n  }\n\n  const decryptedPreviewData = decryptWithSecret(\n    Buffer.from(options.previewModeEncryptionKey),\n    encryptedPreviewData.data\n  )\n\n  try {\n    // TODO: strict runtime type checking\n    const data = JSON.parse(decryptedPreviewData)\n    // Cache lookup\n    Object.defineProperty(req, SYMBOL_PREVIEW_DATA, {\n      value: data,\n      enumerable: false,\n    })\n    return data\n  } catch {\n    return false\n  }\n}\n\nfunction setPreviewData<T>(\n  res: NextApiResponse<T>,\n  data: object | string, // TODO: strict runtime type checking\n  options: {\n    maxAge?: number\n  } & __ApiPreviewProps\n): NextApiResponse<T> {\n  if (\n    typeof options.previewModeId !== 'string' ||\n    options.previewModeId.length < 16\n  ) {\n    throw new Error('invariant: invalid previewModeId')\n  }\n  if (\n    typeof options.previewModeEncryptionKey !== 'string' ||\n    options.previewModeEncryptionKey.length < 16\n  ) {\n    throw new Error('invariant: invalid previewModeEncryptionKey')\n  }\n  if (\n    typeof options.previewModeSigningKey !== 'string' ||\n    options.previewModeSigningKey.length < 16\n  ) {\n    throw new Error('invariant: invalid previewModeSigningKey')\n  }\n\n  const jsonwebtoken = require('next/dist/compiled/jsonwebtoken') as typeof import('jsonwebtoken')\n\n  const payload = jsonwebtoken.sign(\n    {\n      data: encryptWithSecret(\n        Buffer.from(options.previewModeEncryptionKey),\n        JSON.stringify(data)\n      ),\n    },\n    options.previewModeSigningKey,\n    {\n      algorithm: 'HS256',\n      ...(options.maxAge !== undefined\n        ? { expiresIn: options.maxAge }\n        : undefined),\n    }\n  )\n\n  // limit preview mode cookie to 2KB since we shouldn't store too much\n  // data here and browsers drop cookies over 4KB\n  if (payload.length > 2048) {\n    throw new Error(\n      `Preview data is limited to 2KB currently, reduce how much data you are storing as preview data to continue`\n    )\n  }\n\n  const {\n    serialize,\n  } = require('next/dist/compiled/cookie') as typeof import('cookie')\n  const previous = res.getHeader('Set-Cookie')\n  res.setHeader(`Set-Cookie`, [\n    ...(typeof previous === 'string'\n      ? [previous]\n      : Array.isArray(previous)\n      ? previous\n      : []),\n    serialize(COOKIE_NAME_PRERENDER_BYPASS, options.previewModeId, {\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n      ...(options.maxAge !== undefined\n        ? ({ maxAge: options.maxAge } as CookieSerializeOptions)\n        : undefined),\n    }),\n    serialize(COOKIE_NAME_PRERENDER_DATA, payload, {\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n      ...(options.maxAge !== undefined\n        ? ({ maxAge: options.maxAge } as CookieSerializeOptions)\n        : undefined),\n    }),\n  ])\n  return res\n}\n\nfunction clearPreviewData<T>(res: NextApiResponse<T>): NextApiResponse<T> {\n  if (SYMBOL_CLEARED_COOKIES in res) {\n    return res\n  }\n\n  const {\n    serialize,\n  } = require('next/dist/compiled/cookie') as typeof import('cookie')\n  const previous = res.getHeader('Set-Cookie')\n  res.setHeader(`Set-Cookie`, [\n    ...(typeof previous === 'string'\n      ? [previous]\n      : Array.isArray(previous)\n      ? previous\n      : []),\n    serialize(COOKIE_NAME_PRERENDER_BYPASS, '', {\n      // To delete a cookie, set `expires` to a date in the past:\n      // https://tools.ietf.org/html/rfc6265#section-4.1.1\n      // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n      expires: new Date(0),\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n    }),\n    serialize(COOKIE_NAME_PRERENDER_DATA, '', {\n      // To delete a cookie, set `expires` to a date in the past:\n      // https://tools.ietf.org/html/rfc6265#section-4.1.1\n      // `Max-Age: 0` is not valid, thus ignored, and the cookie is persisted.\n      expires: new Date(0),\n      httpOnly: true,\n      sameSite: process.env.NODE_ENV !== 'development' ? 'none' : 'lax',\n      secure: process.env.NODE_ENV !== 'development',\n      path: '/',\n    }),\n  ])\n\n  Object.defineProperty(res, SYMBOL_CLEARED_COOKIES, {\n    value: true,\n    enumerable: false,\n  })\n  return res\n}\n\n/**\n * Custom error class\n */\nexport class ApiError extends Error {\n  readonly statusCode: number\n\n  constructor(statusCode: number, message: string) {\n    super(message)\n    this.statusCode = statusCode\n  }\n}\n\n/**\n * Sends error in `response`\n * @param res response object\n * @param statusCode of response\n * @param message of response\n */\nexport function sendError(\n  res: NextApiResponse,\n  statusCode: number,\n  message: string\n): void {\n  res.statusCode = statusCode\n  res.statusMessage = message\n  res.end(message)\n}\n\ninterface LazyProps {\n  req: NextApiRequest\n  params?: Params | boolean\n}\n\n/**\n * Execute getter function only if its needed\n * @param LazyProps `req` and `params` for lazyProp\n * @param prop name of property\n * @param getter function to get data\n */\nexport function setLazyProp<T>(\n  { req, params }: LazyProps,\n  prop: string,\n  getter: () => T\n): void {\n  const opts = { configurable: true, enumerable: true }\n  const optsReset = { ...opts, writable: true }\n\n  Object.defineProperty(req, prop, {\n    ...opts,\n    get: () => {\n      let value = getter()\n      if (params && typeof params !== 'boolean') {\n        value = { ...value, ...params }\n      }\n      // we set the property on the object to avoid recalculating it\n      Object.defineProperty(req, prop, { ...optsReset, value })\n      return value\n    },\n    set: (value) => {\n      Object.defineProperty(req, prop, { ...optsReset, value })\n    },\n  })\n}\n"]},"metadata":{},"sourceType":"script"}