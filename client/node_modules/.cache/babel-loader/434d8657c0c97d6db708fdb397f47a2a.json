{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isNodeCreatingScriptElement = isNodeCreatingScriptElement;\nexports.reducePropsToObject = reducePropsToObject; // eslint-disable-next-line import/no-extraneous-dependencies\n\nfunction isNodeCreatingScriptElement(node) {\n  const callee = node.callee;\n\n  if (callee.type !== 'Identifier') {\n    return false;\n  }\n\n  const componentNode = node.arguments[0];\n\n  if (componentNode.type !== 'Literal') {\n    return false;\n  } // Next has pragma: __jsx.\n\n\n  return callee.name === '__jsx' && componentNode.value === 'script';\n}\n\nfunction reducePropsToObject(propsNode) {\n  return propsNode.properties.reduce((originalProps, prop) => {\n    // @ts-ignore\n    originalProps[prop.key.name] = prop.value.value;\n    return originalProps;\n  }, {});\n}","map":{"version":3,"sources":["../../../../../../build/webpack/plugins/webpack-conformance-plugin/utils/ast-utils.ts"],"names":["callee","node","componentNode","originalProps","prop"],"mappings":";;;;mDAAA;;AAIO,SAAA,2BAAA,CAAA,IAAA,EAAsE;AAC3E,QAAMA,MAAM,GAAGC,IAAI,CAAnB,MAAA;;AACA,MAAID,MAAM,CAANA,IAAAA,KAAJ,YAAA,EAAkC;AAChC,WAAA,KAAA;AAEF;;AAAA,QAAME,aAAa,GAAGD,IAAI,CAAJA,SAAAA,CAAtB,CAAsBA,CAAtB;;AACA,MAAIC,aAAa,CAAbA,IAAAA,KAAJ,SAAA,EAAsC;AACpC,WAAA,KAAA;AAEF,GAT2E,CAS3E;;;AACA,SAAOF,MAAM,CAANA,IAAAA,KAAAA,OAAAA,IAA2BE,aAAa,CAAbA,KAAAA,KAAlC,QAAA;AAGK;;AAAA,SAAA,mBAAA,CAAA,SAAA,EAEL;AACA,SAAO,SAAS,CAAT,UAAA,CAAA,MAAA,CAA4B,CAAA,aAAA,EAAA,IAAA,KAA8B;AAC/D;AACAC,IAAAA,aAAa,CAACC,IAAI,CAAJA,GAAAA,CAAdD,IAAa,CAAbA,GAA+BC,IAAI,CAAJA,KAAAA,CAA/BD,KAAAA;AACA,WAAA,aAAA;AAHK,GAAA,EAAP,EAAO,CAAP;AAKD","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { namedTypes } from 'ast-types'\nimport { types } from 'next/dist/compiled/recast'\n\nexport function isNodeCreatingScriptElement(node: namedTypes.CallExpression) {\n  const callee = node.callee as namedTypes.Identifier\n  if (callee.type !== 'Identifier') {\n    return false\n  }\n  const componentNode = node.arguments[0] as namedTypes.Literal\n  if (componentNode.type !== 'Literal') {\n    return false\n  }\n  // Next has pragma: __jsx.\n  return callee.name === '__jsx' && componentNode.value === 'script'\n}\n\nexport function reducePropsToObject(\n  propsNode: types.namedTypes.ObjectExpression\n) {\n  return propsNode.properties.reduce((originalProps, prop: any) => {\n    // @ts-ignore\n    originalProps[prop.key.name] = prop.value.value\n    return originalProps\n  }, {})\n}\n"]},"metadata":{},"sourceType":"script"}