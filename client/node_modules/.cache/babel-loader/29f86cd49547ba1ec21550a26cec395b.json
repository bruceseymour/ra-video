{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getCssModuleLoader = getCssModuleLoader;\n\nvar _client = require(\"./client\");\n\nvar _fileResolve = require(\"./file-resolve\");\n\nvar _getCssModuleLocalIdent = require(\"./getCssModuleLocalIdent\");\n\nfunction getCssModuleLoader(ctx, postCssPlugins, preProcessors = []) {\n  const loaders = [];\n\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push((0, _client.getClientStyleLoader)({\n      isDevelopment: ctx.isDevelopment,\n      assetPrefix: ctx.assetPrefix\n    }));\n  } // Resolve CSS `@import`s and `url()`s\n\n\n  loaders.push({\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      // Use CJS mode for backwards compatibility:\n      esModule: false,\n      url: _fileResolve.cssFileResolve,\n      import: (url, _, resourcePath) => (0, _fileResolve.cssFileResolve)(url, resourcePath),\n      modules: {\n        // Do not transform class names (CJS mode backwards compatibility):\n        exportLocalsConvention: 'asIs',\n        // Server-side (Node.js) rendering support:\n        exportOnlyLocals: ctx.isServer,\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: 'pure',\n        // Generate a friendly production-ready name so it's\n        // reasonably understandable. The same name is used for\n        // development.\n        // TODO: Consider making production reduce this to a single\n        // character?\n        getLocalIdent: _getCssModuleLocalIdent.getCssModuleLocalIdent\n      }\n    }\n  }); // Compile CSS\n\n  loaders.push({\n    loader: require.resolve('next/dist/compiled/postcss-loader'),\n    options: {\n      postcssOptions: {\n        plugins: postCssPlugins,\n        config: false\n      },\n      sourceMap: true\n    }\n  });\n  loaders.push( // Webpack loaders run like a stack, so we need to reverse the natural\n  // order of preprocessors.\n  ...preProcessors.slice().reverse());\n  return loaders;\n}","map":{"version":3,"sources":["../../../../../../../build/webpack/config/blocks/css/loaders/modules.ts"],"names":["preProcessors","loaders","ctx","isDevelopment","assetPrefix","loader","require","options","importLoaders","sourceMap","esModule","url","cssFileResolve","import","modules","exportLocalsConvention","exportOnlyLocals","mode","getLocalIdent","getCssModuleLocalIdent","postcssOptions","plugins","config"],"mappings":";;;;;AAGA,IAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,IAAA,uBAAA,GAAA,OAAA,CAAA,0BAAA,CAAA;;AAEO,SAAA,kBAAA,CAAA,GAAA,EAAA,cAAA,EAGLA,aAAgD,GAH3C,EAAA,EAIqB;AAC1B,QAAMC,OAAiC,GAAvC,EAAA;;AAEA,MAAIC,GAAG,CAAP,QAAA,EAAkB;AAChB;AACA;AACAD,IAAAA,OAAO,CAAPA,IAAAA,CACE,CAAA,GAAA,OAAA,CAAA,oBAAA,EAAqB;AACnBE,MAAAA,aAAa,EAAED,GAAG,CADC,aAAA;AAEnBE,MAAAA,WAAW,EAAEF,GAAG,CAHpBD;AACuB,KAArB,CADFA;AAQF,GAd0B,CAc1B;;;AACAA,EAAAA,OAAO,CAAPA,IAAAA,CAAa;AACXI,IAAAA,MAAM,EAAEC,OAAO,CAAPA,OAAAA,CADG,YACHA,CADG;AAEXC,IAAAA,OAAO,EAAE;AACPC,MAAAA,aAAa,EAAE,IAAIR,aAAa,CADzB,MAAA;AAEPS,MAAAA,SAAS,EAFF,IAAA;AAGP;AACAC,MAAAA,QAAQ,EAJD,KAAA;AAKPC,MAAAA,GAAG,EAAEC,YAAAA,CALE,cAAA;AAMPC,MAAAA,MAAM,EAAE,CAAA,GAAA,EAAA,CAAA,EAAA,YAAA,KACN,CAAA,GAAA,YAAA,CAAA,cAAA,EAAA,GAAA,EAPK,YAOL,CAPK;AAQPC,MAAAA,OAAO,EAAE;AACP;AACAC,QAAAA,sBAAsB,EAFf,MAAA;AAGP;AACAC,QAAAA,gBAAgB,EAAEd,GAAG,CAJd,QAAA;AAKP;AACA;AACAe,QAAAA,IAAI,EAPG,MAAA;AAQP;AACA;AACA;AACA;AACA;AACAC,QAAAA,aAAa,EAAEC,uBAAAA,CAvBrBlB;AAUa;AARF;AAFE,GAAbA,EAf0B,CA2C1B;;AACAA,EAAAA,OAAO,CAAPA,IAAAA,CAAa;AACXI,IAAAA,MAAM,EAAEC,OAAO,CAAPA,OAAAA,CADG,mCACHA,CADG;AAEXC,IAAAA,OAAO,EAAE;AACPa,MAAAA,cAAc,EAAE;AAAEC,QAAAA,OAAO,EAAT,cAAA;AAA2BC,QAAAA,MAAM,EAD1C;AACS,OADT;AAEPb,MAAAA,SAAS,EAJbR;AAEW;AAFE,GAAbA;AAQA,EAAA,OAAO,CAAP,IAAA,EACE;AACA;AACA,KAAGD,aAAa,CAAbA,KAAAA,GAHL,OAGKA,EAHL;AAMA,SAAA,OAAA;AACD","sourcesContent":["import { AcceptedPlugin } from 'postcss'\nimport webpack from 'webpack'\nimport { ConfigurationContext } from '../../../utils'\nimport { getClientStyleLoader } from './client'\nimport { cssFileResolve } from './file-resolve'\nimport { getCssModuleLocalIdent } from './getCssModuleLocalIdent'\n\nexport function getCssModuleLoader(\n  ctx: ConfigurationContext,\n  postCssPlugins: readonly AcceptedPlugin[],\n  preProcessors: readonly webpack.RuleSetUseItem[] = []\n): webpack.RuleSetUseItem[] {\n  const loaders: webpack.RuleSetUseItem[] = []\n\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push(\n      getClientStyleLoader({\n        isDevelopment: ctx.isDevelopment,\n        assetPrefix: ctx.assetPrefix,\n      })\n    )\n  }\n\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve('css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      // Use CJS mode for backwards compatibility:\n      esModule: false,\n      url: cssFileResolve,\n      import: (url: string, _: any, resourcePath: string) =>\n        cssFileResolve(url, resourcePath),\n      modules: {\n        // Do not transform class names (CJS mode backwards compatibility):\n        exportLocalsConvention: 'asIs',\n        // Server-side (Node.js) rendering support:\n        exportOnlyLocals: ctx.isServer,\n        // Disallow global style exports so we can code-split CSS and\n        // not worry about loading order.\n        mode: 'pure',\n        // Generate a friendly production-ready name so it's\n        // reasonably understandable. The same name is used for\n        // development.\n        // TODO: Consider making production reduce this to a single\n        // character?\n        getLocalIdent: getCssModuleLocalIdent,\n      },\n    },\n  })\n\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve('next/dist/compiled/postcss-loader'),\n    options: {\n      postcssOptions: { plugins: postCssPlugins, config: false },\n      sourceMap: true,\n    },\n  })\n\n  loaders.push(\n    // Webpack loaders run like a stack, so we need to reverse the natural\n    // order of preprocessors.\n    ...preProcessors.slice().reverse()\n  )\n\n  return loaders\n}\n"]},"metadata":{},"sourceType":"script"}