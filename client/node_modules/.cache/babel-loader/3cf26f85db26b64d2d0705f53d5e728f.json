{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst pluginName = 'postcss-import-parser';\n\nfunction walkAtRules(css, result, options, callback) {\n  const accumulator = [];\n  css.walkAtRules(/^import$/i, atRule => {\n    // Convert only top-level @import\n    if (atRule.parent.type !== 'root') {\n      return;\n    } // Nodes do not exists - `@import url('http://') :root {}`\n\n\n    if (atRule.nodes) {\n      result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", {\n        node: atRule\n      });\n      return;\n    }\n\n    const {\n      nodes: paramsNodes\n    } = (0, _postcssValueParser.default)(atRule.params); // No nodes - `@import ;`\n    // Invalid type - `@import foo-bar;`\n\n    if (paramsNodes.length === 0 || paramsNodes[0].type !== 'string' && paramsNodes[0].type !== 'function') {\n      result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n        node: atRule\n      });\n      return;\n    }\n\n    let isStringValue;\n    let url;\n\n    if (paramsNodes[0].type === 'string') {\n      isStringValue = true;\n      url = paramsNodes[0].value;\n    } else {\n      // Invalid function - `@import nourl(test.css);`\n      if (paramsNodes[0].value.toLowerCase() !== 'url') {\n        result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n          node: atRule\n        });\n        return;\n      }\n\n      isStringValue = paramsNodes[0].nodes.length !== 0 && paramsNodes[0].nodes[0].type === 'string';\n      url = isStringValue ? paramsNodes[0].nodes[0].value : _postcssValueParser.default.stringify(paramsNodes[0].nodes);\n    } // Empty url - `@import \"\";` or `@import url();`\n\n\n    if (url.trim().length === 0) {\n      result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n        node: atRule\n      });\n      return;\n    }\n\n    accumulator.push({\n      atRule,\n      url,\n      isStringValue,\n      mediaNodes: paramsNodes.slice(1)\n    });\n  });\n  callback(null, accumulator);\n}\n\nconst asyncWalkAtRules = (0, _util.promisify)(walkAtRules);\n\nvar _default = _postcss.default.plugin(pluginName, options => async (css, result) => {\n  const parsedResults = await asyncWalkAtRules(css, result, options);\n\n  if (parsedResults.length === 0) {\n    return Promise.resolve();\n  }\n\n  const imports = new Map();\n  const tasks = [];\n\n  for (const parsedResult of parsedResults) {\n    const {\n      atRule,\n      url,\n      isStringValue,\n      mediaNodes\n    } = parsedResult;\n    let normalizedUrl = url;\n    let prefix = '';\n    const isRequestable = (0, _utils.isUrlRequestable)(normalizedUrl);\n\n    if (isRequestable) {\n      const queryParts = normalizedUrl.split('!');\n\n      if (queryParts.length > 1) {\n        normalizedUrl = queryParts.pop();\n        prefix = queryParts.join('!');\n      }\n\n      normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue); // Empty url after normalize - `@import '\\\n      // \\\n      // \\\n      // ';\n\n      if (normalizedUrl.trim().length === 0) {\n        result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n          node: atRule\n        }); // eslint-disable-next-line no-continue\n\n        continue;\n      }\n    }\n\n    let media;\n\n    if (mediaNodes.length > 0) {\n      media = _postcssValueParser.default.stringify(mediaNodes).trim().toLowerCase();\n    }\n\n    if (options.filter && !options.filter(normalizedUrl, media)) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    atRule.remove();\n\n    if (isRequestable) {\n      const request = (0, _utils.requestify)(normalizedUrl, options.rootContext);\n      tasks.push((async () => {\n        const {\n          resolver,\n          context\n        } = options;\n        const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, normalizedUrl])]);\n        return {\n          url: resolvedUrl,\n          media,\n          prefix,\n          isRequestable\n        };\n      })());\n    } else {\n      tasks.push({\n        url,\n        media,\n        prefix,\n        isRequestable\n      });\n    }\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      isRequestable,\n      media\n    } = results[index];\n\n    if (isRequestable) {\n      const {\n        prefix\n      } = results[index];\n      const newUrl = prefix ? `${prefix}!${url}` : url;\n      const importKey = newUrl;\n      let importName = imports.get(importKey);\n\n      if (!importName) {\n        importName = `___CSS_LOADER_AT_RULE_IMPORT_${imports.size}___`;\n        imports.set(importKey, importName);\n        options.imports.push({\n          importName,\n          url: options.urlHandler(newUrl),\n          index\n        });\n      }\n\n      options.api.push({\n        importName,\n        media,\n        index\n      }); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    options.api.push({\n      url,\n      media,\n      index\n    });\n  }\n\n  return Promise.resolve();\n});\n\nexports.default = _default;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/next/node_modules/css-loader/dist/plugins/postcss-import-parser.js"],"names":["Object","defineProperty","exports","value","default","_util","require","_postcss","_interopRequireDefault","_postcssValueParser","_utils","obj","__esModule","pluginName","walkAtRules","css","result","options","callback","accumulator","atRule","parent","type","nodes","warn","node","paramsNodes","params","length","toString","isStringValue","url","toLowerCase","stringify","trim","push","mediaNodes","slice","asyncWalkAtRules","promisify","_default","plugin","parsedResults","Promise","resolve","imports","Map","tasks","parsedResult","normalizedUrl","prefix","isRequestable","isUrlRequestable","queryParts","split","pop","join","normalizeUrl","media","filter","remove","request","requestify","rootContext","resolver","context","resolvedUrl","resolveRequests","Set","results","all","index","newUrl","importKey","importName","get","size","set","urlHandler","api"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _util = require(\"util\");\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _postcssValueParser = _interopRequireDefault(require(\"postcss-value-parser\"));\n\nvar _utils = require(\"../utils\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst pluginName = 'postcss-import-parser';\n\nfunction walkAtRules(css, result, options, callback) {\n  const accumulator = [];\n  css.walkAtRules(/^import$/i, atRule => {\n    // Convert only top-level @import\n    if (atRule.parent.type !== 'root') {\n      return;\n    } // Nodes do not exists - `@import url('http://') :root {}`\n\n\n    if (atRule.nodes) {\n      result.warn(\"It looks like you didn't end your @import statement correctly. Child nodes are attached to it.\", {\n        node: atRule\n      });\n      return;\n    }\n\n    const {\n      nodes: paramsNodes\n    } = (0, _postcssValueParser.default)(atRule.params); // No nodes - `@import ;`\n    // Invalid type - `@import foo-bar;`\n\n    if (paramsNodes.length === 0 || paramsNodes[0].type !== 'string' && paramsNodes[0].type !== 'function') {\n      result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n        node: atRule\n      });\n      return;\n    }\n\n    let isStringValue;\n    let url;\n\n    if (paramsNodes[0].type === 'string') {\n      isStringValue = true;\n      url = paramsNodes[0].value;\n    } else {\n      // Invalid function - `@import nourl(test.css);`\n      if (paramsNodes[0].value.toLowerCase() !== 'url') {\n        result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n          node: atRule\n        });\n        return;\n      }\n\n      isStringValue = paramsNodes[0].nodes.length !== 0 && paramsNodes[0].nodes[0].type === 'string';\n      url = isStringValue ? paramsNodes[0].nodes[0].value : _postcssValueParser.default.stringify(paramsNodes[0].nodes);\n    } // Empty url - `@import \"\";` or `@import url();`\n\n\n    if (url.trim().length === 0) {\n      result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n        node: atRule\n      });\n      return;\n    }\n\n    accumulator.push({\n      atRule,\n      url,\n      isStringValue,\n      mediaNodes: paramsNodes.slice(1)\n    });\n  });\n  callback(null, accumulator);\n}\n\nconst asyncWalkAtRules = (0, _util.promisify)(walkAtRules);\n\nvar _default = _postcss.default.plugin(pluginName, options => async (css, result) => {\n  const parsedResults = await asyncWalkAtRules(css, result, options);\n\n  if (parsedResults.length === 0) {\n    return Promise.resolve();\n  }\n\n  const imports = new Map();\n  const tasks = [];\n\n  for (const parsedResult of parsedResults) {\n    const {\n      atRule,\n      url,\n      isStringValue,\n      mediaNodes\n    } = parsedResult;\n    let normalizedUrl = url;\n    let prefix = '';\n    const isRequestable = (0, _utils.isUrlRequestable)(normalizedUrl);\n\n    if (isRequestable) {\n      const queryParts = normalizedUrl.split('!');\n\n      if (queryParts.length > 1) {\n        normalizedUrl = queryParts.pop();\n        prefix = queryParts.join('!');\n      }\n\n      normalizedUrl = (0, _utils.normalizeUrl)(normalizedUrl, isStringValue); // Empty url after normalize - `@import '\\\n      // \\\n      // \\\n      // ';\n\n      if (normalizedUrl.trim().length === 0) {\n        result.warn(`Unable to find uri in \"${atRule.toString()}\"`, {\n          node: atRule\n        }); // eslint-disable-next-line no-continue\n\n        continue;\n      }\n    }\n\n    let media;\n\n    if (mediaNodes.length > 0) {\n      media = _postcssValueParser.default.stringify(mediaNodes).trim().toLowerCase();\n    }\n\n    if (options.filter && !options.filter(normalizedUrl, media)) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    atRule.remove();\n\n    if (isRequestable) {\n      const request = (0, _utils.requestify)(normalizedUrl, options.rootContext);\n      tasks.push((async () => {\n        const {\n          resolver,\n          context\n        } = options;\n        const resolvedUrl = await (0, _utils.resolveRequests)(resolver, context, [...new Set([request, normalizedUrl])]);\n        return {\n          url: resolvedUrl,\n          media,\n          prefix,\n          isRequestable\n        };\n      })());\n    } else {\n      tasks.push({\n        url,\n        media,\n        prefix,\n        isRequestable\n      });\n    }\n  }\n\n  const results = await Promise.all(tasks);\n\n  for (let index = 0; index <= results.length - 1; index++) {\n    const {\n      url,\n      isRequestable,\n      media\n    } = results[index];\n\n    if (isRequestable) {\n      const {\n        prefix\n      } = results[index];\n      const newUrl = prefix ? `${prefix}!${url}` : url;\n      const importKey = newUrl;\n      let importName = imports.get(importKey);\n\n      if (!importName) {\n        importName = `___CSS_LOADER_AT_RULE_IMPORT_${imports.size}___`;\n        imports.set(importKey, importName);\n        options.imports.push({\n          importName,\n          url: options.urlHandler(newUrl),\n          index\n        });\n      }\n\n      options.api.push({\n        importName,\n        media,\n        index\n      }); // eslint-disable-next-line no-continue\n\n      continue;\n    }\n\n    options.api.push({\n      url,\n      media,\n      index\n    });\n  }\n\n  return Promise.resolve();\n});\n\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}