{"ast":null,"code":"/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  createElement,\n  nextNode,\n  insertAfter,\n  firstChildByTag\n} = require('../NodeUtils');\n\nconst {\n  findMetaViewport,\n  skipNodeAndChildren\n} = require('../HtmlDomHelper'); // Maximum number of images that will be preloaded.\n\n\nconst MAX_PRELOADED_IMAGES = 5;\n/**\n * PreloadImages - Adds preload instructions to the first 5 amp-img tags on the page, that don't use srcset.\n *\n * AMP requires the usage of `amp-img` for images instead of the regular `img` tag. Since\n * `amp-img` tags are custom elements, the AMP Runtime needs to be loaded before the images\n * are requested from the server.\n *\n * By issuing preload instructions, browsers will start downloading the images before the AMP\n * runtime is loaded, resulting on an earlier complete render.\n *\n * This transformer supports the following option:\n *\n * * `imagePreloadCount`: specifies the maxinum number of images to preload. The default is 5.\n */\n\nclass PreloadImages {\n  transform(root, params) {\n    const imagePreloadCount = params.imagePreloadCount || MAX_PRELOADED_IMAGES;\n    const html = firstChildByTag(root, 'html');\n    const head = firstChildByTag(html, 'head');\n    const body = firstChildByTag(html, 'body');\n    const preloadImageMap = new Map();\n    let node = body;\n\n    while (node !== null) {\n      // We've hit the maximum number of preloads.\n      if (preloadImageMap.size >= imagePreloadCount) {\n        break;\n      }\n\n      if (node.tagName === 'template') {\n        node = skipNodeAndChildren(node);\n      } else {\n        this.addImage(preloadImageMap, node);\n        node = nextNode(node);\n      }\n    }\n\n    let referenceNode = findMetaViewport(head);\n\n    for (const preload of preloadImageMap.values()) {\n      insertAfter(head, preload, referenceNode);\n      referenceNode = preload;\n    }\n  }\n\n  addImage(preloadImageMap, node) {\n    const imageUrl = this.extractImageUrl(node);\n\n    if (!imageUrl) {\n      return;\n    } // If srcset is used, skip preloading as we don't know which image will be used.\n\n\n    if (node.attribs.srcset) {\n      return;\n    }\n\n    preloadImageMap.set(imageUrl, this.createPreload(imageUrl, node.attribs.media));\n  }\n\n  extractImageUrl(node) {\n    if (!node.attribs) {\n      return null;\n    }\n\n    if (node.tagName === 'amp-img') {\n      return node.attribs.src;\n    }\n\n    if (node.tagName === 'amp-video') {\n      return node.attribs.poster;\n    }\n\n    return null;\n  }\n\n  createPreload(href, media) {\n    const preload = createElement('link', {\n      rel: 'preload',\n      href: href,\n      as: 'image'\n    });\n\n    if (media) {\n      preload.attribs.media = media;\n    }\n\n    return preload;\n  }\n\n}\n/** @module PreloadImages */\n\n\nmodule.exports = PreloadImages;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/transformers/PreloadImages.js"],"names":["createElement","nextNode","insertAfter","firstChildByTag","require","findMetaViewport","skipNodeAndChildren","MAX_PRELOADED_IMAGES","PreloadImages","transform","root","params","imagePreloadCount","html","head","body","preloadImageMap","Map","node","size","tagName","addImage","referenceNode","preload","values","imageUrl","extractImageUrl","attribs","srcset","set","createPreload","media","src","poster","href","rel","as","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2018 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'use strict';\n\nconst {createElement, nextNode, insertAfter, firstChildByTag} = require('../NodeUtils');\nconst {findMetaViewport, skipNodeAndChildren} = require('../HtmlDomHelper');\n\n// Maximum number of images that will be preloaded.\nconst MAX_PRELOADED_IMAGES = 5;\n\n/**\n * PreloadImages - Adds preload instructions to the first 5 amp-img tags on the page, that don't use srcset.\n *\n * AMP requires the usage of `amp-img` for images instead of the regular `img` tag. Since\n * `amp-img` tags are custom elements, the AMP Runtime needs to be loaded before the images\n * are requested from the server.\n *\n * By issuing preload instructions, browsers will start downloading the images before the AMP\n * runtime is loaded, resulting on an earlier complete render.\n *\n * This transformer supports the following option:\n *\n * * `imagePreloadCount`: specifies the maxinum number of images to preload. The default is 5.\n */\nclass PreloadImages {\n  transform(root, params) {\n    const imagePreloadCount = params.imagePreloadCount || MAX_PRELOADED_IMAGES;\n    const html = firstChildByTag(root, 'html');\n    const head = firstChildByTag(html, 'head');\n    const body = firstChildByTag(html, 'body');\n    const preloadImageMap = new Map();\n\n    let node = body;\n    while (node !== null) {\n      // We've hit the maximum number of preloads.\n      if (preloadImageMap.size >= imagePreloadCount) {\n        break;\n      }\n      if (node.tagName === 'template') {\n        node = skipNodeAndChildren(node);\n      } else {\n        this.addImage(preloadImageMap, node);\n        node = nextNode(node);\n      }\n    }\n\n    let referenceNode = findMetaViewport(head);\n\n    for (const preload of preloadImageMap.values()) {\n      insertAfter(head, preload, referenceNode);\n      referenceNode = preload;\n    }\n  }\n\n  addImage(preloadImageMap, node) {\n    const imageUrl = this.extractImageUrl(node);\n    if (!imageUrl) {\n      return;\n    }\n    // If srcset is used, skip preloading as we don't know which image will be used.\n    if (node.attribs.srcset) {\n      return;\n    }\n    preloadImageMap.set(imageUrl, this.createPreload(imageUrl, node.attribs.media));\n  }\n\n  extractImageUrl(node) {\n    if (!node.attribs) {\n      return null;\n    }\n    if (node.tagName === 'amp-img') {\n      return node.attribs.src;\n    }\n    if (node.tagName === 'amp-video') {\n      return node.attribs.poster;\n    }\n    return null;\n  }\n\n  createPreload(href, media) {\n    const preload = createElement('link', {\n      rel: 'preload',\n      href: href,\n      as: 'image',\n    });\n    if (media) {\n      preload.attribs.media = media;\n    }\n    return preload;\n  }\n}\n\n/** @module PreloadImages */\nmodule.exports = PreloadImages;\n"]},"metadata":{},"sourceType":"script"}