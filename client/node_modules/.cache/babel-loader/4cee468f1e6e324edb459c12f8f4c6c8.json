{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProxyTracerProvider = void 0;\n\nvar ProxyTracer_1 = require(\"./ProxyTracer\");\n\nvar NoopTracerProvider_1 = require(\"./NoopTracerProvider\");\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\n\n\nvar ProxyTracerProvider =\n/** @class */\nfunction () {\n  function ProxyTracerProvider() {}\n  /**\n   * Get a {@link ProxyTracer}\n   */\n\n\n  ProxyTracerProvider.prototype.getTracer = function (name, version) {\n    var _a;\n\n    return (_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version);\n  };\n\n  ProxyTracerProvider.prototype.getDelegate = function () {\n    var _a;\n\n    return (_a = this._delegate) !== null && _a !== void 0 ? _a : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;\n  };\n  /**\n   * Set the delegate tracer provider\n   */\n\n\n  ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n    this._delegate = delegate;\n  };\n\n  ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n    var _a;\n\n    return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n  };\n\n  return ProxyTracerProvider;\n}();\n\nexports.ProxyTracerProvider = ProxyTracerProvider;","map":{"version":3,"sources":["../../../src/trace/ProxyTracerProvider.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAIH,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AACA,IAAA,oBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;AAEA;;;;;;;AAOG;;;AACH,IAAA,mBAAA;AAAA;AAAA,YAAA;AAAA,WAAA,mBAAA,GAAA,CA2BC;AAxBC;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAAwC;;;AACtC,WAAO,CAAA,EAAA,GACL,KAAK,iBAAL,CAAuB,IAAvB,EAA6B,OAA7B,CADK,MACgC,IADhC,IACgC,EAAA,KAAA,KAAA,CADhC,GACgC,EADhC,GAEL,IAAI,aAAA,CAAA,WAAJ,CAAgB,IAAhB,EAAsB,IAAtB,EAA4B,OAA5B,CAFF;AAID,GALD;;AAOA,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,YAAA;;;AACE,WAAA,CAAA,EAAA,GAAO,KAAK,SAAZ,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,EAArB,GAAyB,oBAAA,CAAA,oBAAzB;AACD,GAFD;AAIA;;AAEG;;;AACH,EAAA,mBAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,QAAZ,EAAoC;AAClC,SAAK,SAAL,GAAiB,QAAjB;AACD,GAFD;;AAIA,EAAA,mBAAA,CAAA,SAAA,CAAA,iBAAA,GAAA,UAAkB,IAAlB,EAAgC,OAAhC,EAAgD;;;AAC9C,WAAA,CAAA,EAAA,GAAO,KAAK,SAAZ,MAAqB,IAArB,IAAqB,EAAA,KAAA,KAAA,CAArB,GAAqB,KAAA,CAArB,GAAqB,EAAA,CAAE,SAAF,CAAY,IAAZ,EAAkB,OAAlB,CAArB;AACD,GAFD;;AAGF,SAAA,mBAAA;AAAC,CA3BD,EAAA;;AAAa,OAAA,CAAA,mBAAA,GAAA,mBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProxyTracerProvider = void 0;\nvar ProxyTracer_1 = require(\"./ProxyTracer\");\nvar NoopTracerProvider_1 = require(\"./NoopTracerProvider\");\n/**\n * Tracer provider which provides {@link ProxyTracer}s.\n *\n * Before a delegate is set, tracers provided are NoOp.\n *   When a delegate is set, traces are provided from the delegate.\n *   When a delegate is set after tracers have already been provided,\n *   all tracers already provided will use the provided delegate implementation.\n */\nvar ProxyTracerProvider = /** @class */ (function () {\n    function ProxyTracerProvider() {\n    }\n    /**\n     * Get a {@link ProxyTracer}\n     */\n    ProxyTracerProvider.prototype.getTracer = function (name, version) {\n        var _a;\n        return ((_a = this.getDelegateTracer(name, version)) !== null && _a !== void 0 ? _a : new ProxyTracer_1.ProxyTracer(this, name, version));\n    };\n    ProxyTracerProvider.prototype.getDelegate = function () {\n        var _a;\n        return (_a = this._delegate) !== null && _a !== void 0 ? _a : NoopTracerProvider_1.NOOP_TRACER_PROVIDER;\n    };\n    /**\n     * Set the delegate tracer provider\n     */\n    ProxyTracerProvider.prototype.setDelegate = function (delegate) {\n        this._delegate = delegate;\n    };\n    ProxyTracerProvider.prototype.getDelegateTracer = function (name, version) {\n        var _a;\n        return (_a = this._delegate) === null || _a === void 0 ? void 0 : _a.getTracer(name, version);\n    };\n    return ProxyTracerProvider;\n}());\nexports.ProxyTracerProvider = ProxyTracerProvider;\n//# sourceMappingURL=ProxyTracerProvider.js.map"]},"metadata":{},"sourceType":"script"}