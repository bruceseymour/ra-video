{"ast":null,"code":"import t from \"querystring\";\nvar e = /https?|ftp|gopher|file/;\n\nfunction o(o) {\n  \"string\" == typeof o && (o = g(o));\n\n  var r = function (t, e, o) {\n    var r = t.auth,\n        a = t.hostname,\n        s = t.protocol || \"\",\n        p = t.pathname || \"\",\n        n = t.hash || \"\",\n        h = t.query || \"\",\n        c = !1;\n    r = r ? encodeURIComponent(r).replace(/%3A/i, \":\") + \"@\" : \"\", t.host ? c = r + t.host : a && (c = r + (~a.indexOf(\":\") ? \"[\" + a + \"]\" : a), t.port && (c += \":\" + t.port)), h && \"object\" == typeof h && (h = e.encode(h));\n    var l = t.search || h && \"?\" + h || \"\";\n    return s && \":\" !== s.substr(-1) && (s += \":\"), t.slashes || (!s || o.test(s)) && !1 !== c ? (c = \"//\" + (c || \"\"), p && \"/\" !== p[0] && (p = \"/\" + p)) : c || (c = \"\"), n && \"#\" !== n[0] && (n = \"#\" + n), l && \"?\" !== l[0] && (l = \"?\" + l), {\n      protocol: s,\n      host: c,\n      pathname: p = p.replace(/[?#]/g, encodeURIComponent),\n      search: l = l.replace(\"#\", \"%23\"),\n      hash: n\n    };\n  }(o, t, e);\n\n  return \"\" + r.protocol + r.host + r.pathname + r.search + r.hash;\n}\n\nvar r = \"http://\",\n    a = \"w.w\",\n    s = r + a,\n    p = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i,\n    n = /https?|ftp|gopher|file/;\n\nfunction h(t, e) {\n  var a = \"string\" == typeof t ? g(t) : t;\n  t = \"object\" == typeof t ? o(t) : t;\n  var h = g(e),\n      c = \"\";\n  a.protocol && !a.slashes && (c = a.protocol, t = t.replace(a.protocol, \"\"), c += \"/\" === e[0] || \"/\" === t[0] ? \"/\" : \"\"), c && h.protocol && (c = \"\", h.slashes || (c = h.protocol, e = e.replace(h.protocol, \"\")));\n  var l = t.match(p);\n  l && !h.protocol && (t = t.substr((c = l[1] + (l[2] || \"\")).length), /^\\/\\/[^/]/.test(e) && (c = c.slice(0, -1)));\n  var i = new URL(t, s + \"/\"),\n      u = new URL(e, i).toString().replace(s, \"\"),\n      f = h.protocol || a.protocol;\n  return f += a.slashes || h.slashes ? \"//\" : \"\", !c && f ? u = u.replace(r, f) : c && (u = u.replace(r, \"\")), n.test(u) || ~e.indexOf(\".\") || \"/\" === t.slice(-1) || \"/\" === e.slice(-1) || \"/\" !== u.slice(-1) || (u = u.slice(0, -1)), c && (u = c + (\"/\" === u[0] ? u.substr(1) : u)), u;\n}\n\nfunction c(t, e) {\n  return g(h(t, e));\n}\n\nfunction l() {}\n\nl.prototype.parse = g, l.prototype.format = o, l.prototype.resolve = h, l.prototype.resolveObject = h;\nvar i = /^https?|ftp|gopher|file/,\n    u = /^(.*?)([#?].*)/,\n    f = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i,\n    m = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i,\n    v = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n\nfunction g(e, r, p) {\n  if (void 0 === r && (r = !1), void 0 === p && (p = !1), e && \"object\" == typeof e && e instanceof l) return e;\n  var n = (e = e.trim()).match(u);\n  e = n ? n[1].replace(/\\\\/g, \"/\") + n[2] : e.replace(/\\\\/g, \"/\"), v.test(e) && \"/\" !== e.slice(-1) && (e += \"/\");\n  var h = !/(^javascript)/.test(e) && e.match(f),\n      c = m.test(e),\n      g = \"\";\n  h && (i.test(h[1]) || (g = h[1].toLowerCase(), e = \"\" + h[2] + h[3]), h[2] || (c = !1, i.test(h[1]) ? (g = h[1], e = \"\" + h[3]) : e = \"//\" + h[3]), 3 !== h[2].length && 1 !== h[2].length || (g = h[1], e = \"/\" + h[3]));\n  var d,\n      y = (n ? n[1] : e).match(/^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/),\n      b = y && y[1],\n      C = new l(),\n      U = \"\",\n      w = \"\";\n\n  try {\n    d = new URL(e);\n  } catch (t) {\n    U = t, g || p || !/^\\/\\//.test(e) || /^\\/\\/.+[@.]/.test(e) || (w = \"/\", e = e.substr(1));\n\n    try {\n      d = new URL(e, s);\n    } catch (t) {\n      return C.protocol = g, C.href = g, C;\n    }\n  }\n\n  C.slashes = c && !w, C.host = d.host === a ? \"\" : d.host, C.hostname = d.hostname === a ? \"\" : d.hostname.replace(/(\\[|\\])/g, \"\"), C.protocol = U ? g || null : d.protocol, C.search = d.search.replace(/\\\\/g, \"%5C\"), C.hash = d.hash.replace(/\\\\/g, \"%5C\");\n  var j = e.split(\"#\");\n  !C.search && ~j[0].indexOf(\"?\") && (C.search = \"?\"), C.hash || \"\" !== j[1] || (C.hash = \"#\"), C.query = r ? t.decode(d.search.substr(1)) : C.search.substr(1), C.pathname = w + (h ? function (t) {\n    return t.replace(/['^|`]/g, function (t) {\n      return \"%\" + t.charCodeAt().toString(16).toUpperCase();\n    }).replace(/((?:%[0-9A-F]{2})+)/g, function (t, e) {\n      try {\n        return decodeURIComponent(e).split(\"\").map(function (t) {\n          var e = t.charCodeAt();\n          return e > 256 || /^[a-z0-9]$/i.test(t) ? t : \"%\" + e.toString(16).toUpperCase();\n        }).join(\"\");\n      } catch (t) {\n        return e;\n      }\n    });\n  }(d.pathname) : d.pathname), \"about:\" === C.protocol && \"blank\" === C.pathname && (C.protocol = \"\", C.pathname = \"\"), U && \"/\" !== e[0] && (C.pathname = C.pathname.substr(1)), g && !i.test(g) && \"/\" !== e.slice(-1) && \"/\" === C.pathname && (C.pathname = \"\"), C.path = C.pathname + C.search, C.auth = [d.username, d.password].map(decodeURIComponent).filter(Boolean).join(\":\"), C.port = d.port, b && !C.host.endsWith(b) && (C.host += b, C.port = b.slice(1)), C.href = w ? \"\" + C.pathname + C.search + C.hash : o(C);\n  var R = /^(file)/.test(C.href) ? [\"host\", \"hostname\"] : [];\n  return Object.keys(C).forEach(function (t) {\n    ~R.indexOf(t) || (C[t] = C[t] || null);\n  }), C;\n}\n\nexport { g as parse, o as format, h as resolve, c as resolveObject, l as Url };","map":{"version":3,"sources":["../src/format.js","../third_party/format.js","../src/constants.js","../src/resolve.js","../src/url.js","../src/parse.js"],"names":["const","slashedProtocols","urlObj","parse","format","qs","auth","protocol","pathname","hash","query","host","encodeURIComponent","replace","hostname","indexOf","port","encode","search","substr","slashes","test","PROTOCOL","HOST","BASE_URL","resolveProtocolRegex","resolve","fromUrl","toUrl","parsedFrom","parsedTo","prefix","protocolMatch","match","length","slice","normalizedFromUrl","URL","resolved","toString","actualProtocol","resolveObject","Url","prototype","urlRegex","protocolRegex","slashesRegex","ipv6Regex","url","char","charCodeAt","toUpperCase","_","seq","decodeURIComponent","split","map","code","join","urlStr","parseQs","slashesDenoteHost","trim","slashesMatch","protocolPrefix","toLowerCase","portMatch","portSuffix","res","err","preSlash","e","href","hashSplit","decode","decodePath","path","username","password","filter","Boolean","endsWith","excludedKeys","Object","keys","forEach","k"],"mappings":"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","sourcesContent":["/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport qs from 'querystring';\nimport parse from './parse';\nimport format from '../third_party/format';\n\nconst slashedProtocols = /https?|ftp|gopher|file/;\n\nexport default function(urlObj) {\n  if (typeof urlObj === 'string') {\n    urlObj = parse(urlObj);\n  }\n\n  const { protocol, host, pathname, search, hash } = format(\n    urlObj,\n    qs,\n    slashedProtocols\n  );\n\n  return `${protocol}${host}${pathname}${search}${hash}`;\n}\n","// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport default function(urlObj, qs, slashedProtocols) {\n  let { auth, hostname } = urlObj;\n  let protocol = urlObj.protocol || '';\n  let pathname = urlObj.pathname || '';\n  let hash = urlObj.hash || '';\n  let query = urlObj.query || '';\n  let host = false;\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : '';\n\n  if (urlObj.host) {\n    host = auth + urlObj.host;\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname);\n    if (urlObj.port) {\n      host += ':' + urlObj.port;\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    // query = '' + new URLSearchParams(query);\n    query = qs.encode(query);\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '');\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash;\n  if (search && search[0] !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent);\n  search = search.replace('#', '%23');\n\n  return {\n    protocol,\n    host,\n    pathname,\n    search,\n    hash\n  };\n}\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL = 'http://';\nexport const HOST = 'w.w';\nexport const BASE_URL = PROTOCOL + HOST;\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parse from './parse';\nimport format from './format';\nimport { BASE_URL, PROTOCOL, HOST } from './constants';\n\nconst resolveProtocolRegex = /^([a-z0-9.+-]*:\\/\\/\\/)([a-z0-9.+-]:\\/*)?/i;\nconst slashedProtocols = /https?|ftp|gopher|file/;\n\nexport function resolve(fromUrl, toUrl) {\n  let parsedFrom = typeof fromUrl === 'string' ? parse(fromUrl) : fromUrl;\n  fromUrl = typeof fromUrl === 'object' ? format(fromUrl) : fromUrl;\n  let parsedTo = parse(toUrl);\n  let prefix = '';\n\n  // Handle incomplete urls without slashes Eg: foo:a/b\n  if (parsedFrom.protocol && !parsedFrom.slashes) {\n    prefix = parsedFrom.protocol;\n\n    fromUrl = fromUrl.replace(parsedFrom.protocol, '');\n    prefix += toUrl[0] === '/' || fromUrl[0] === '/' ? '/' : '';\n  }\n\n  if (prefix && parsedTo.protocol) {\n    prefix = '';\n    if (!parsedTo.slashes) {\n      prefix = parsedTo.protocol;\n      toUrl = toUrl.replace(parsedTo.protocol, '');\n    }\n  }\n\n  // Handle http:///xyz urls\n  const protocolMatch = fromUrl.match(resolveProtocolRegex);\n  if (protocolMatch && !parsedTo.protocol) {\n    // protocolMatch[2] handles - file:///C:/DEV/Haskell/lib/HXmlToolbox-3.01/examples/\n    prefix = protocolMatch[1] + (protocolMatch[2] || '');\n    fromUrl = fromUrl.substr(prefix.length);\n\n    // :/// -> :// If toUrl is of the form //xyz\n    if (/^\\/\\/[^/]/.test(toUrl)) prefix = prefix.slice(0, -1);\n  }\n\n  const normalizedFromUrl = new URL(fromUrl, BASE_URL + '/');\n  let resolved = new URL(toUrl, normalizedFromUrl)\n    .toString()\n    .replace(BASE_URL, '');\n\n  // Remove/replace the protocol if the URL class has added it\n  let actualProtocol = parsedTo.protocol || parsedFrom.protocol;\n  actualProtocol += parsedFrom.slashes || parsedTo.slashes ? '//' : '';\n  if (!prefix && actualProtocol) {\n    resolved = resolved.replace(PROTOCOL, actualProtocol);\n  } else if (prefix) {\n    resolved = resolved.replace(PROTOCOL, '');\n  }\n\n  // Remove unwanted trailing slash\n  if (\n    !slashedProtocols.test(resolved) &&\n    !~toUrl.indexOf('.') &&\n    fromUrl.slice(-1) !== '/' &&\n    toUrl.slice(-1) !== '/' &&\n    resolved.slice(-1) === '/'\n  ) {\n    resolved = resolved.slice(0, -1);\n  }\n\n  // If prefix remove the leading slash\n  if (prefix) {\n    resolved = prefix + (resolved[0] === '/' ? resolved.substr(1) : resolved);\n  }\n\n  return resolved;\n}\n\nexport function resolveObject(fromUrl, toUrl) {\n  return parse(resolve(fromUrl, toUrl));\n}\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parse from './parse';\nimport format from './format';\nimport { resolve, resolveObject } from './resolve';\n\nexport default function Url() {}\nUrl.prototype.parse = parse;\nUrl.prototype.format = format;\nUrl.prototype.resolve = resolve;\nUrl.prototype.resolveObject = resolve;\n","/*\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport qs from 'querystring';\nimport format from './format';\nimport Url from './url';\nimport { BASE_URL, HOST } from './constants';\n\nconst slashedProtocols = /^https?|ftp|gopher|file/;\nconst urlRegex = /^(.*?)([#?].*)/;\nconst protocolRegex = /^([a-z0-9.+-]*:)(\\/{0,3})(.*)/i;\nconst slashesRegex = /^([a-z0-9.+-]*:)?\\/\\/\\/*/i;\nconst ipv6Regex = /^([a-z0-9.+-]*:)(\\/{0,2})\\[(.*)\\]$/i;\n\nfunction decodePath(url) {\n  return url\n    .replace(\n      /['^|`]/g,\n      (char) => '%' + char.charCodeAt().toString(16).toUpperCase()\n    )\n    .replace(/((?:%[0-9A-F]{2})+)/g, (_, seq) => {\n      try {\n        const decoded = decodeURIComponent(seq);\n        return decoded\n          .split('')\n          .map((char) => {\n            const code = char.charCodeAt();\n            if (code > 256 || /^[a-z0-9]$/i.test(char)) {\n              return char;\n            }\n            return '%' + code.toString(16).toUpperCase();\n          })\n          .join('');\n      } catch (_) {\n        return seq;\n      }\n    });\n}\n\nexport default function (urlStr, parseQs = false, slashesDenoteHost = false) {\n  if (urlStr && typeof urlStr === 'object' && urlStr instanceof Url) {\n    return urlStr;\n  }\n  urlStr = urlStr.trim();\n\n  const slashesMatch = urlStr.match(urlRegex);\n  if (slashesMatch) {\n    urlStr = slashesMatch[1].replace(/\\\\/g, '/') + slashesMatch[2];\n  } else {\n    urlStr = urlStr.replace(/\\\\/g, '/');\n  }\n\n  // IPv6 check\n  if (ipv6Regex.test(urlStr)) {\n    // Add trailing slash to IPV6 urls to match parsing\n    if (urlStr.slice(-1) !== '/') urlStr += '/';\n  }\n\n  const protocolMatch =\n    !/(^javascript)/.test(urlStr) && urlStr.match(protocolRegex);\n  let slashes = slashesRegex.test(urlStr);\n  let protocolPrefix = '';\n\n  if (protocolMatch) {\n    if (!slashedProtocols.test(protocolMatch[1])) {\n      // Replace invalid protocol with a valid one for correct parsing\n      protocolPrefix = protocolMatch[1].toLowerCase();\n      urlStr = `${protocolMatch[2]}${protocolMatch[3]}`;\n    }\n\n    if (!protocolMatch[2]) {\n      slashes = false;\n      if (slashedProtocols.test(protocolMatch[1])) {\n        protocolPrefix = protocolMatch[1];\n        urlStr = `${protocolMatch[3]}`;\n      } else {\n        urlStr = `//${protocolMatch[3]}`;\n      }\n    }\n\n    // Handle '///' in url Eg: http:///s//a/b/c\n    // TODO: file:/some/dir/# should become file:///some/dir/# according to the url module in node\n    if (protocolMatch[2].length === 3 || protocolMatch[2].length === 1) {\n      protocolPrefix = protocolMatch[1];\n      urlStr = `/${protocolMatch[3]}`;\n    }\n  }\n\n  let portMatch = (slashesMatch ? slashesMatch[1] : urlStr).match(\n    /^https?:\\/\\/[^/]+(:[0-9]+)(?=\\/|$)/\n  );\n  let portSuffix = portMatch && portMatch[1];\n\n  let url;\n  let res = new Url();\n  let err = '';\n  let preSlash = '';\n\n  try {\n    url = new URL(urlStr);\n  } catch (e) {\n    err = e;\n\n    // Handle url with slashes - Eg: //some_url\n    if (\n      !protocolPrefix &&\n      !slashesDenoteHost &&\n      /^\\/\\//.test(urlStr) &&\n      !/^\\/\\/.+[@.]/.test(urlStr)\n    ) {\n      preSlash = '/';\n      urlStr = urlStr.substr(1);\n    }\n\n    try {\n      url = new URL(urlStr, BASE_URL);\n    } catch (_) {\n      // Unable to parse the url\n      // If the URL has only the protocol - Eg: \"foo:\"\n      res.protocol = protocolPrefix;\n      res.href = protocolPrefix;\n      return res;\n    }\n  }\n\n  res.slashes = slashes && !preSlash;\n  res.host = url.host === HOST ? '' : url.host;\n  res.hostname =\n    url.hostname === HOST ? '' : url.hostname.replace(/(\\[|\\])/g, '');\n  res.protocol = err ? protocolPrefix || null : url.protocol;\n\n  res.search = url.search.replace(/\\\\/g, '%5C');\n  res.hash = url.hash.replace(/\\\\/g, '%5C');\n\n  const hashSplit = urlStr.split('#');\n  // Handle case when there is a lone '?' in url\n  // Eg: http://example.com/?\n  if (!res.search && ~hashSplit[0].indexOf('?')) {\n    res.search = '?';\n  }\n  // Similarly handle lone '#' Eg: http://example.com/#\n  if (!res.hash && hashSplit[1] === '') {\n    res.hash = '#';\n  }\n\n  // URLSearchParams is not supported in Edge 16\n  // res.query = res.searchParams;\n  res.query = parseQs ? qs.decode(url.search.substr(1)) : res.search.substr(1);\n\n  res.pathname =\n    preSlash + (protocolMatch ? decodePath(url.pathname) : url.pathname);\n\n  // Chrome parses \"#abc\" as \"about:blank#abc\"\n  if (res.protocol === 'about:' && res.pathname === 'blank') {\n    res.protocol = '';\n    res.pathname = '';\n  }\n\n  // Partial url that does not start with a /\n  // example www.example.com\n  if (err && urlStr[0] !== '/') res.pathname = res.pathname.substr(1);\n\n  // Remove additional trailing slashes added by URL\n  if (\n    protocolPrefix &&\n    !slashedProtocols.test(protocolPrefix) &&\n    urlStr.slice(-1) !== '/' &&\n    res.pathname === '/'\n  ) {\n    res.pathname = '';\n  }\n\n  res.path = res.pathname + res.search;\n\n  res.auth = [url.username, url.password]\n    .map(decodeURIComponent)\n    .filter(Boolean)\n    .join(':');\n  res.port = url.port;\n\n  // Make sure to include default ports if they were specified\n  if (portSuffix && !res.host.endsWith(portSuffix)) {\n    res.host += portSuffix;\n    res.port = portSuffix.slice(1);\n  }\n\n  res.href = preSlash ? `${res.pathname}${res.search}${res.hash}` : format(res);\n\n  const excludedKeys = /^(file)/.test(res.href) ? ['host', 'hostname'] : [];\n  Object.keys(res).forEach((k) => {\n    if (!~excludedKeys.indexOf(k)) res[k] = res[k] || null;\n  });\n\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}