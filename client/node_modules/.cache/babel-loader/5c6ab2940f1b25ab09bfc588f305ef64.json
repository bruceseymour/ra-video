{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = exports.pluginLoaderOptions = void 0;\n\nvar _querystring = require(\"querystring\");\n\nvar _collectPlugins = require(\"../../plugins/collect-plugins\");\n\nconst pluginLoaderOptions = {\n  plugins: []\n};\nexports.pluginLoaderOptions = pluginLoaderOptions;\n\nconst nextPluginLoader = function () {\n  const {\n    middleware\n  } = typeof this.query === 'string' ? (0, _querystring.parse)(this.query.substr(1)) : this.query;\n  const plugins = pluginLoaderOptions.plugins.filter(plugin => {\n    return plugin.middleware.includes(middleware);\n  });\n  const pluginIds = [];\n  const pluginConfigs = [];\n  return `\n    ${plugins.map(plugin => {\n    const pluginId = (0, _collectPlugins.getPluginId)(plugin.pkgName);\n    pluginIds.push(pluginId);\n    pluginConfigs.push(plugin.config || {});\n    return `import ${pluginId} from '${plugin.directory}/src/${middleware}'`;\n  }).join('\\n')}\n\n    export default function (ctx) {\n      return Promise.all([${pluginIds.map((id, idx) => `${id}(ctx, ${JSON.stringify(pluginConfigs[idx])})`).join(',')}])\n    }\n  `;\n};\n\nvar _default = nextPluginLoader;\nexports.default = _default;","map":{"version":3,"sources":["../../../../build/webpack/loaders/next-plugin-loader.ts"],"names":["pluginLoaderOptions","plugins","nextPluginLoader","plugin","pluginIds","pluginConfigs","pluginId","directory","middleware","id","JSON"],"mappings":";;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAA,eAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAMO,MAAMA,mBAEZ,GAAG;AACFC,EAAAA,OAAO,EAHF;AAEH,CAFG;;;AAMP,MAAMC,gBAA+B,GAAG,YAAY;AAClD,QAAM;AAAA,IAAA;AAAA,MACJ,OAAO,KAAP,KAAA,KAAA,QAAA,GAAiC,CAAA,GAAA,YAAA,CAAA,KAAA,EAAM,KAAA,KAAA,CAAA,MAAA,CAAvC,CAAuC,CAAN,CAAjC,GAA+D,KADjE,KAAA;AAGA,QAAMD,OAAO,GAAGD,mBAAmB,CAAnBA,OAAAA,CAAAA,MAAAA,CAAoCG,MAAD,IAAY;AAC7D,WAAOA,MAAM,CAANA,UAAAA,CAAAA,QAAAA,CAAP,UAAOA,CAAP;AADF,GAAgBH,CAAhB;AAIA,QAAMI,SAAmB,GAAzB,EAAA;AACA,QAAMC,aAAoB,GAA1B,EAAA;AAEA,SAAQ;AACV,MAAMJ,OAAO,CAAPA,GAAAA,CACME,MAAD,IAAY;AACf,UAAMG,QAAQ,GAAG,CAAA,GAAA,eAAA,CAAA,WAAA,EAAYH,MAAM,CAAnC,OAAiB,CAAjB;AACAC,IAAAA,SAAS,CAATA,IAAAA,CAAAA,QAAAA;AACAC,IAAAA,aAAa,CAAbA,IAAAA,CAAmBF,MAAM,CAANA,MAAAA,IAAnBE,EAAAA;AACA,WAAQ,UAASC,QAAS,UAASH,MAAM,CAACI,SAAU,QAAOC,UAA3D,GAAA;AALFP,GAAAA,EAAAA,IAAAA,CAAAA,IAAAA,CAOY;AAClB;AACA;AACA,4BAA4BG,SAAS,CAATA,GAAAA,CACf,CAAA,EAAA,EAAA,GAAA,KAAc,GAAEK,EAAG,SAAQC,IAAI,CAAJA,SAAAA,CAAeL,aAAa,CAA5BK,GAA4B,CAA5BA,CADZN,GAAAA,EAAAA,IAAAA,CAAAA,GAAAA,CAET;AACnB;AAdE,GAAA;AAXF,CAAA;;eA6BeF,gB","sourcesContent":["import { loader } from 'webpack'\nimport { parse } from 'querystring'\nimport { PluginMetaData, getPluginId } from '../../plugins/collect-plugins'\n\nexport type NextPluginLoaderQuery = {\n  middleware: string\n}\n\nexport const pluginLoaderOptions: {\n  plugins: PluginMetaData[]\n} = {\n  plugins: [],\n}\n\nconst nextPluginLoader: loader.Loader = function () {\n  const { middleware }: NextPluginLoaderQuery =\n    typeof this.query === 'string' ? parse(this.query.substr(1)) : this.query\n\n  const plugins = pluginLoaderOptions.plugins.filter((plugin) => {\n    return plugin.middleware.includes(middleware)\n  })\n\n  const pluginIds: string[] = []\n  const pluginConfigs: any[] = []\n\n  return `\n    ${plugins\n      .map((plugin) => {\n        const pluginId = getPluginId(plugin.pkgName)\n        pluginIds.push(pluginId)\n        pluginConfigs.push(plugin.config || {})\n        return `import ${pluginId} from '${plugin.directory}/src/${middleware}'`\n      })\n      .join('\\n')}\n\n    export default function (ctx) {\n      return Promise.all([${pluginIds\n        .map((id, idx) => `${id}(ctx, ${JSON.stringify(pluginConfigs[idx])})`)\n        .join(',')}])\n    }\n  `\n}\n\nexport default nextPluginLoader\n"]},"metadata":{},"sourceType":"script"}