{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getRequiredConfiguration = getRequiredConfiguration;\nexports.writeConfigurationDefaults = writeConfigurationDefaults;\n\nvar _fs = require(\"fs\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar CommentJson = _interopRequireWildcard(require(\"next/dist/compiled/comment-json\"));\n\nvar _os = _interopRequireDefault(require(\"os\"));\n\nvar _getTypeScriptConfiguration = require(\"./getTypeScriptConfiguration\");\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getDesiredCompilerOptions(ts) {\n  const o = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    target: {\n      suggested: 'es5'\n    },\n    lib: {\n      suggested: ['dom', 'dom.iterable', 'esnext']\n    },\n    allowJs: {\n      suggested: true\n    },\n    skipLibCheck: {\n      suggested: true\n    },\n    strict: {\n      suggested: false\n    },\n    forceConsistentCasingInFileNames: {\n      suggested: true\n    },\n    noEmit: {\n      suggested: true\n    },\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel'\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      // All of these values work:\n      parsedValues: [ts.ModuleKind.ES2020, ts.ModuleKind.ESNext, ts.ModuleKind.CommonJS, ts.ModuleKind.AMD],\n      value: 'esnext',\n      reason: 'for dynamic import() support'\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution'\n    },\n    resolveJsonModule: {\n      value: true,\n      reason: 'to match webpack resolution'\n    },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel'\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.Preserve,\n      value: 'preserve',\n      reason: 'next.js implements its own optimized jsx transform'\n    }\n  };\n  return o;\n}\n\nfunction getRequiredConfiguration(ts) {\n  const res = {};\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts);\n\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    var _ev$parsedValue;\n\n    const ev = desiredCompilerOptions[optionKey];\n\n    if (!('value' in ev)) {\n      continue;\n    }\n\n    res[optionKey] = (_ev$parsedValue = ev.parsedValue) != null ? _ev$parsedValue : ev.value;\n  }\n\n  return res;\n}\n\nasync function writeConfigurationDefaults(ts, tsConfigPath, isFirstTimeSetup) {\n  if (isFirstTimeSetup) {\n    await _fs.promises.writeFile(tsConfigPath, '{}' + _os.default.EOL);\n  }\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts);\n  const effectiveConfiguration = await (0, _getTypeScriptConfiguration.getTypeScriptConfiguration)(ts, tsConfigPath);\n  const userTsConfigContent = await _fs.promises.readFile(tsConfigPath, {\n    encoding: 'utf8'\n  });\n  const userTsConfig = CommentJson.parse(userTsConfigContent);\n\n  if (userTsConfig.compilerOptions == null) {\n    userTsConfig.compilerOptions = {};\n    isFirstTimeSetup = true;\n  }\n\n  const suggestedActions = [];\n  const requiredActions = [];\n\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const check = desiredCompilerOptions[optionKey];\n\n    if ('suggested' in check) {\n      if (!(optionKey in effectiveConfiguration.options)) {\n        userTsConfig.compilerOptions[optionKey] = check.suggested;\n        suggestedActions.push(_chalk.default.cyan(optionKey) + ' was set to ' + _chalk.default.bold(check.suggested));\n      }\n    } else if ('value' in check) {\n      var _check$parsedValues;\n\n      const ev = effectiveConfiguration.options[optionKey];\n\n      if (!('parsedValues' in check ? (_check$parsedValues = check.parsedValues) == null ? void 0 : _check$parsedValues.includes(ev) : 'parsedValue' in check ? check.parsedValue === ev : check.value === ev)) {\n        userTsConfig.compilerOptions[optionKey] = check.value;\n        requiredActions.push(_chalk.default.cyan(optionKey) + ' was set to ' + _chalk.default.bold(check.value) + ` (${check.reason})`);\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _ = check;\n    }\n  }\n\n  if (userTsConfig.include == null) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx'];\n    suggestedActions.push(_chalk.default.cyan('include') + ' was set to ' + _chalk.default.bold(`['next-env.d.ts', '**/*.ts', '**/*.tsx']`));\n  }\n\n  if (userTsConfig.exclude == null) {\n    userTsConfig.exclude = ['node_modules'];\n    suggestedActions.push(_chalk.default.cyan('exclude') + ' was set to ' + _chalk.default.bold(`['node_modules']`));\n  }\n\n  if (suggestedActions.length < 1 && requiredActions.length < 1) {\n    return;\n  }\n\n  await _fs.promises.writeFile(tsConfigPath, CommentJson.stringify(userTsConfig, null, 2) + _os.default.EOL);\n\n  if (isFirstTimeSetup) {\n    console.log(_chalk.default.green(`We detected TypeScript in your project and created a ${_chalk.default.bold('tsconfig.json')} file for you.`) + '\\n');\n    return;\n  }\n\n  console.log(_chalk.default.green(`We detected TypeScript in your project and reconfigured your ${_chalk.default.bold('tsconfig.json')} file for you.`) + '\\n');\n\n  if (suggestedActions.length) {\n    console.log(`The following suggested values were added to your ${_chalk.default.cyan('tsconfig.json')}. These values ${_chalk.default.bold('can be changed')} to fit your project's needs:\\n`);\n    suggestedActions.forEach(action => console.log(`\\t- ${action}`));\n    console.log('');\n  }\n\n  if (requiredActions.length) {\n    console.log(`The following ${_chalk.default.bold('mandatory changes')} were made to your ${_chalk.default.cyan('tsconfig.json')}:\\n`);\n    requiredActions.forEach(action => console.log(`\\t- ${action}`));\n    console.log('');\n  }\n}","map":{"version":3,"sources":["../../../lib/typescript/writeConfigurationDefaults.ts"],"names":["o","target","suggested","lib","allowJs","skipLibCheck","strict","forceConsistentCasingInFileNames","noEmit","esModuleInterop","value","reason","module","parsedValue","ts","parsedValues","moduleResolution","resolveJsonModule","isolatedModules","jsx","res","desiredCompilerOptions","getDesiredCompilerOptions","Object","ev","fs","os","effectiveConfiguration","userTsConfigContent","encoding","userTsConfig","CommentJson","isFirstTimeSetup","suggestedActions","requiredActions","check","optionKey","chalk","_","console","action"],"mappings":";;;;;;AAAA,IAAA,GAAA,GAAA,OAAA,CAAA,IAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,WAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;AACA,IAAA,GAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CAAA;;AACA,IAAA,2BAAA,GAAA,OAAA,CAAA,8BAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAaA;;AAAA,SAAA,yBAAA,CAAA,EAAA,EAE+B;AAC7B,QAAMA,CAA8B,GAAG;AACrC;AACA;AACAC,IAAAA,MAAM,EAAE;AAAEC,MAAAA,SAAS,EAHkB;AAG7B,KAH6B;AAIrCC,IAAAA,GAAG,EAAE;AAAED,MAAAA,SAAS,EAAE,CAAA,KAAA,EAAA,cAAA,EAJmB,QAInB;AAAb,KAJgC;AAKrCE,IAAAA,OAAO,EAAE;AAAEF,MAAAA,SAAS,EALiB;AAK5B,KAL4B;AAMrCG,IAAAA,YAAY,EAAE;AAAEH,MAAAA,SAAS,EANY;AAMvB,KANuB;AAOrCI,IAAAA,MAAM,EAAE;AAAEJ,MAAAA,SAAS,EAPkB;AAO7B,KAP6B;AAQrCK,IAAAA,gCAAgC,EAAE;AAAEL,MAAAA,SAAS,EARR;AAQH,KARG;AASrCM,IAAAA,MAAM,EAAE;AAAEN,MAAAA,SAAS,EATkB;AAS7B,KAT6B;AAWrC;AACA;AACA;AACAO,IAAAA,eAAe,EAAE;AACfC,MAAAA,KAAK,EADU,IAAA;AAEfC,MAAAA,MAAM,EAhB6B;AAcpB,KAdoB;AAkBrCC,IAAAA,MAAM,EAAE;AACNC,MAAAA,WAAW,EAAEC,EAAE,CAAFA,UAAAA,CADP,MAAA;AAEN;AACAC,MAAAA,YAAY,EAAE,CACZD,EAAE,CAAFA,UAAAA,CADY,MAAA,EAEZA,EAAE,CAAFA,UAAAA,CAFY,MAAA,EAGZA,EAAE,CAAFA,UAAAA,CAHY,QAAA,EAIZA,EAAE,CAAFA,UAAAA,CAPI,GAGQ,CAHR;AASNJ,MAAAA,KAAK,EATC,QAAA;AAUNC,MAAAA,MAAM,EA5B6B;AAkB7B,KAlB6B;AA8BrCK,IAAAA,gBAAgB,EAAE;AAChBH,MAAAA,WAAW,EAAEC,EAAE,CAAFA,oBAAAA,CADG,MAAA;AAEhBJ,MAAAA,KAAK,EAFW,MAAA;AAGhBC,MAAAA,MAAM,EAjC6B;AA8BnB,KA9BmB;AAmCrCM,IAAAA,iBAAiB,EAAE;AAAEP,MAAAA,KAAK,EAAP,IAAA;AAAeC,MAAAA,MAAM,EAnCH;AAmClB,KAnCkB;AAoCrCO,IAAAA,eAAe,EAAE;AACfR,MAAAA,KAAK,EADU,IAAA;AAEfC,MAAAA,MAAM,EAtC6B;AAoCpB,KApCoB;AAwCrCQ,IAAAA,GAAG,EAAE;AACHN,MAAAA,WAAW,EAAEC,EAAE,CAAFA,OAAAA,CADV,QAAA;AAEHJ,MAAAA,KAAK,EAFF,UAAA;AAGHC,MAAAA,MAAM,EA3CV;AAwCO;AAxCgC,GAAvC;AA+CA,SAAA,CAAA;AAGK;;AAAA,SAAA,wBAAA,CAAA,EAAA,EAE0C;AAC/C,QAAMS,GAAkD,GAAxD,EAAA;AAEA,QAAMC,sBAAsB,GAAGC,yBAAyB,CAAxD,EAAwD,CAAxD;;AACA,OAAK,MAAL,SAAA,IAAwBC,MAAM,CAANA,IAAAA,CAAxB,sBAAwBA,CAAxB,EAA6D;AAAA,QAAA,eAAA;;AAC3D,UAAMC,EAAE,GAAGH,sBAAsB,CAAjC,SAAiC,CAAjC;;AACA,QAAI,EAAE,WAAN,EAAI,CAAJ,EAAsB;AACpB;AAEFD;;AAAAA,IAAAA,GAAG,CAAHA,SAAG,CAAHA,GAAAA,CAAAA,eAAAA,GAAiBI,EAAE,CAAnBJ,WAAAA,KAAAA,IAAAA,GAAAA,eAAAA,GAAmCI,EAAE,CAArCJ,KAAAA;AAGF;;AAAA,SAAA,GAAA;AAGK;;AAAA,eAAA,0BAAA,CAAA,EAAA,EAAA,YAAA,EAAA,gBAAA,EAIU;AACf,MAAA,gBAAA,EAAsB;AACpB,UAAMK,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,YAAAA,EAA2B,OAAOC,GAAAA,CAAAA,OAAAA,CAAxC,GAAMD,CAAN;AAGF;;AAAA,QAAMJ,sBAAsB,GAAGC,yBAAyB,CAAxD,EAAwD,CAAxD;AACA,QAAMK,sBAAsB,GAAG,MAAM,CAAA,GAAA,2BAAA,CAAA,0BAAA,EAAA,EAAA,EAArC,YAAqC,CAArC;AAKA,QAAMC,mBAAmB,GAAG,MAAMH,GAAAA,CAAAA,QAAAA,CAAAA,QAAAA,CAAAA,YAAAA,EAA0B;AAC1DI,IAAAA,QAAQ,EADV;AAA4D,GAA1BJ,CAAlC;AAGA,QAAMK,YAAY,GAAGC,WAAW,CAAXA,KAAAA,CAArB,mBAAqBA,CAArB;;AACA,MAAID,YAAY,CAAZA,eAAAA,IAAJ,IAAA,EAA0C;AACxCA,IAAAA,YAAY,CAAZA,eAAAA,GAAAA,EAAAA;AACAE,IAAAA,gBAAgB,GAAhBA,IAAAA;AAGF;;AAAA,QAAMC,gBAA0B,GAAhC,EAAA;AACA,QAAMC,eAAyB,GAA/B,EAAA;;AACA,OAAK,MAAL,SAAA,IAAwBX,MAAM,CAANA,IAAAA,CAAxB,sBAAwBA,CAAxB,EAA6D;AAC3D,UAAMY,KAAK,GAAGd,sBAAsB,CAApC,SAAoC,CAApC;;AACA,QAAI,eAAJ,KAAA,EAA0B;AACxB,UAAI,EAAEe,SAAS,IAAIT,sBAAsB,CAAzC,OAAI,CAAJ,EAAoD;AAClDG,QAAAA,YAAY,CAAZA,eAAAA,CAAAA,SAAAA,IAA0CK,KAAK,CAA/CL,SAAAA;AACAG,QAAAA,gBAAgB,CAAhBA,IAAAA,CACEI,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,SAAAA,IAAAA,cAAAA,GAAyCA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAWF,KAAK,CAD3DF,SAC2CI,CAD3CJ;AAIH;AAPD,KAAA,MAOO,IAAI,WAAJ,KAAA,EAAsB;AAAA,UAAA,mBAAA;;AAC3B,YAAMT,EAAE,GAAGG,sBAAsB,CAAtBA,OAAAA,CAAX,SAAWA,CAAX;;AACA,UACE,EAAE,kBAAA,KAAA,GAAA,CAAA,mBAAA,GACEQ,KAAK,CADP,YAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GACEA,mBAAAA,CAAAA,QAAAA,CADF,EACEA,CADF,GAEE,iBAAA,KAAA,GACAA,KAAK,CAALA,WAAAA,KADA,EAAA,GAEAA,KAAK,CAALA,KAAAA,KALN,EACE,CADF,EAME;AACAL,QAAAA,YAAY,CAAZA,eAAAA,CAAAA,SAAAA,IAA0CK,KAAK,CAA/CL,KAAAA;AACAI,QAAAA,eAAe,CAAfA,IAAAA,CACEG,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,SAAAA,IAAAA,cAAAA,GAEEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAWF,KAAK,CAFlBE,KAEEA,CAFFA,GAGG,KAAIF,KAAK,CAACxB,MAJfuB,GAAAA;AAOH;AAjBM,KAAA,MAiBA;AACL;AACA,YAAMI,CAAQ,GAAd,KAAA;AAEH;AAED;;AAAA,MAAIR,YAAY,CAAZA,OAAAA,IAAJ,IAAA,EAAkC;AAChCA,IAAAA,YAAY,CAAZA,OAAAA,GAAuB,CAAA,eAAA,EAAA,SAAA,EAAvBA,UAAuB,CAAvBA;AACAG,IAAAA,gBAAgB,CAAhBA,IAAAA,CACEI,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,SAAAA,IAAAA,cAAAA,GAEEA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAHJJ,0CAGII,CAHJJ;AAOF;;AAAA,MAAIH,YAAY,CAAZA,OAAAA,IAAJ,IAAA,EAAkC;AAChCA,IAAAA,YAAY,CAAZA,OAAAA,GAAuB,CAAvBA,cAAuB,CAAvBA;AACAG,IAAAA,gBAAgB,CAAhBA,IAAAA,CACEI,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,SAAAA,IAAAA,cAAAA,GAAyCA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAD3CJ,kBAC2CI,CAD3CJ;AAKF;;AAAA,MAAIA,gBAAgB,CAAhBA,MAAAA,GAAAA,CAAAA,IAA+BC,eAAe,CAAfA,MAAAA,GAAnC,CAAA,EAA+D;AAC7D;AAGF;;AAAA,QAAMT,GAAAA,CAAAA,QAAAA,CAAAA,SAAAA,CAAAA,YAAAA,EAEJM,WAAW,CAAXA,SAAAA,CAAAA,YAAAA,EAAAA,IAAAA,EAAAA,CAAAA,IAA+CL,GAAAA,CAAAA,OAAAA,CAFjD,GAAMD,CAAN;;AAKA,MAAA,gBAAA,EAAsB;AACpBc,IAAAA,OAAO,CAAPA,GAAAA,CACEF,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CACG,wDAAuDA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,eAAAA,CAD1DA,gBAAAA,IADFE,IAAAA;AAOA;AAGFA;;AAAAA,EAAAA,OAAO,CAAPA,GAAAA,CACEF,MAAAA,CAAAA,OAAAA,CAAAA,KAAAA,CACG,gEAA+DA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,eAAAA,CADlEA,gBAAAA,IADFE,IAAAA;;AAOA,MAAIN,gBAAgB,CAApB,MAAA,EAA6B;AAC3BM,IAAAA,OAAO,CAAPA,GAAAA,CACG,qDAAoDF,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,eAAAA,CAEnD,kBAAiBA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,gBAAAA,CAHrBE,iCAAAA;AAQAN,IAAAA,gBAAgB,CAAhBA,OAAAA,CAA0BO,MAAD,IAAYD,OAAO,CAAPA,GAAAA,CAAa,OAAMC,MAAxDP,EAAqCM,CAArCN;AAEAM,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,EAAAA;AAGF;;AAAA,MAAIL,eAAe,CAAnB,MAAA,EAA4B;AAC1BK,IAAAA,OAAO,CAAPA,GAAAA,CACG,iBAAgBF,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,mBAAAA,CAEf,sBAAqBA,MAAAA,CAAAA,OAAAA,CAAAA,IAAAA,CAAAA,eAAAA,CAHzBE,KAAAA;AAMAL,IAAAA,eAAe,CAAfA,OAAAA,CAAyBM,MAAD,IAAYD,OAAO,CAAPA,GAAAA,CAAa,OAAMC,MAAvDN,EAAoCK,CAApCL;AAEAK,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,EAAAA;AAEH;AAAA","sourcesContent":["import { promises as fs } from 'fs'\nimport chalk from 'chalk'\nimport * as CommentJson from 'next/dist/compiled/comment-json'\nimport os from 'os'\nimport { getTypeScriptConfiguration } from './getTypeScriptConfiguration'\n\ntype DesiredCompilerOptionsShape = {\n  [key: string]:\n    | { suggested: any }\n    | {\n        parsedValue?: any\n        parsedValues?: Array<any>\n        value: any\n        reason: string\n      }\n}\n\nfunction getDesiredCompilerOptions(\n  ts: typeof import('typescript')\n): DesiredCompilerOptionsShape {\n  const o: DesiredCompilerOptionsShape = {\n    // These are suggested values and will be set when not present in the\n    // tsconfig.json\n    target: { suggested: 'es5' },\n    lib: { suggested: ['dom', 'dom.iterable', 'esnext'] },\n    allowJs: { suggested: true },\n    skipLibCheck: { suggested: true },\n    strict: { suggested: false },\n    forceConsistentCasingInFileNames: { suggested: true },\n    noEmit: { suggested: true },\n\n    // These values are required and cannot be changed by the user\n    // Keep this in sync with the webpack config\n    // 'parsedValue' matches the output value from ts.parseJsonConfigFileContent()\n    esModuleInterop: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    module: {\n      parsedValue: ts.ModuleKind.ESNext,\n      // All of these values work:\n      parsedValues: [\n        ts.ModuleKind.ES2020,\n        ts.ModuleKind.ESNext,\n        ts.ModuleKind.CommonJS,\n        ts.ModuleKind.AMD,\n      ],\n      value: 'esnext',\n      reason: 'for dynamic import() support',\n    },\n    moduleResolution: {\n      parsedValue: ts.ModuleResolutionKind.NodeJs,\n      value: 'node',\n      reason: 'to match webpack resolution',\n    },\n    resolveJsonModule: { value: true, reason: 'to match webpack resolution' },\n    isolatedModules: {\n      value: true,\n      reason: 'requirement for babel',\n    },\n    jsx: {\n      parsedValue: ts.JsxEmit.Preserve,\n      value: 'preserve',\n      reason: 'next.js implements its own optimized jsx transform',\n    },\n  }\n\n  return o\n}\n\nexport function getRequiredConfiguration(\n  ts: typeof import('typescript')\n): Partial<import('typescript').CompilerOptions> {\n  const res: Partial<import('typescript').CompilerOptions> = {}\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const ev = desiredCompilerOptions[optionKey]\n    if (!('value' in ev)) {\n      continue\n    }\n    res[optionKey] = ev.parsedValue ?? ev.value\n  }\n\n  return res\n}\n\nexport async function writeConfigurationDefaults(\n  ts: typeof import('typescript'),\n  tsConfigPath: string,\n  isFirstTimeSetup: boolean\n): Promise<void> {\n  if (isFirstTimeSetup) {\n    await fs.writeFile(tsConfigPath, '{}' + os.EOL)\n  }\n\n  const desiredCompilerOptions = getDesiredCompilerOptions(ts)\n  const effectiveConfiguration = await getTypeScriptConfiguration(\n    ts,\n    tsConfigPath\n  )\n\n  const userTsConfigContent = await fs.readFile(tsConfigPath, {\n    encoding: 'utf8',\n  })\n  const userTsConfig = CommentJson.parse(userTsConfigContent)\n  if (userTsConfig.compilerOptions == null) {\n    userTsConfig.compilerOptions = {}\n    isFirstTimeSetup = true\n  }\n\n  const suggestedActions: string[] = []\n  const requiredActions: string[] = []\n  for (const optionKey of Object.keys(desiredCompilerOptions)) {\n    const check = desiredCompilerOptions[optionKey]\n    if ('suggested' in check) {\n      if (!(optionKey in effectiveConfiguration.options)) {\n        userTsConfig.compilerOptions[optionKey] = check.suggested\n        suggestedActions.push(\n          chalk.cyan(optionKey) + ' was set to ' + chalk.bold(check.suggested)\n        )\n      }\n    } else if ('value' in check) {\n      const ev = effectiveConfiguration.options[optionKey]\n      if (\n        !('parsedValues' in check\n          ? check.parsedValues?.includes(ev)\n          : 'parsedValue' in check\n          ? check.parsedValue === ev\n          : check.value === ev)\n      ) {\n        userTsConfig.compilerOptions[optionKey] = check.value\n        requiredActions.push(\n          chalk.cyan(optionKey) +\n            ' was set to ' +\n            chalk.bold(check.value) +\n            ` (${check.reason})`\n        )\n      }\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const _: never = check\n    }\n  }\n\n  if (userTsConfig.include == null) {\n    userTsConfig.include = ['next-env.d.ts', '**/*.ts', '**/*.tsx']\n    suggestedActions.push(\n      chalk.cyan('include') +\n        ' was set to ' +\n        chalk.bold(`['next-env.d.ts', '**/*.ts', '**/*.tsx']`)\n    )\n  }\n\n  if (userTsConfig.exclude == null) {\n    userTsConfig.exclude = ['node_modules']\n    suggestedActions.push(\n      chalk.cyan('exclude') + ' was set to ' + chalk.bold(`['node_modules']`)\n    )\n  }\n\n  if (suggestedActions.length < 1 && requiredActions.length < 1) {\n    return\n  }\n\n  await fs.writeFile(\n    tsConfigPath,\n    CommentJson.stringify(userTsConfig, null, 2) + os.EOL\n  )\n\n  if (isFirstTimeSetup) {\n    console.log(\n      chalk.green(\n        `We detected TypeScript in your project and created a ${chalk.bold(\n          'tsconfig.json'\n        )} file for you.`\n      ) + '\\n'\n    )\n    return\n  }\n\n  console.log(\n    chalk.green(\n      `We detected TypeScript in your project and reconfigured your ${chalk.bold(\n        'tsconfig.json'\n      )} file for you.`\n    ) + '\\n'\n  )\n  if (suggestedActions.length) {\n    console.log(\n      `The following suggested values were added to your ${chalk.cyan(\n        'tsconfig.json'\n      )}. These values ${chalk.bold(\n        'can be changed'\n      )} to fit your project's needs:\\n`\n    )\n\n    suggestedActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n\n  if (requiredActions.length) {\n    console.log(\n      `The following ${chalk.bold(\n        'mandatory changes'\n      )} were made to your ${chalk.cyan('tsconfig.json')}:\\n`\n    )\n\n    requiredActions.forEach((action) => console.log(`\\t- ${action}`))\n\n    console.log('')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}