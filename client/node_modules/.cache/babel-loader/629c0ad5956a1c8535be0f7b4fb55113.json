{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.withCoalescedInvoke = withCoalescedInvoke;\nconst globalInvokeCache = new Map();\n\nfunction withCoalescedInvoke(func) {\n  return async function (key, args) {\n    const entry = globalInvokeCache.get(key);\n\n    if (entry) {\n      return entry.then(res => ({\n        isOrigin: false,\n        value: res.value\n      }));\n    }\n\n    async function __wrapper() {\n      return await func.apply(undefined, args);\n    }\n\n    const future = __wrapper().then(res => {\n      globalInvokeCache.delete(key);\n      return {\n        isOrigin: true,\n        value: res\n      };\n    }).catch(err => {\n      globalInvokeCache.delete(key);\n      return Promise.reject(err);\n    });\n\n    globalInvokeCache.set(key, future);\n    return future;\n  };\n}","map":{"version":3,"sources":["../../lib/coalesced-function.ts"],"names":["globalInvokeCache","entry","res","isOrigin","value","func","future","__wrapper","err","Promise"],"mappings":";;;;AAOA,MAAMA,iBAAiB,GAAG,IAA1B,GAA0B,EAA1B;;AAEO,SAAA,mBAAA,CAAA,IAAA,EAKqD;AAC1D,SAAO,gBAAA,GAAA,EAAA,IAAA,EAAkD;AACvD,UAAMC,KAAK,GAAGD,iBAAiB,CAAjBA,GAAAA,CAAd,GAAcA,CAAd;;AACA,QAAA,KAAA,EAAW;AACT,aAAOC,KAAK,CAALA,IAAAA,CAAYC,GAAD,KAAU;AAC1BC,QAAAA,QAAQ,EADkB,KAAA;AAE1BC,QAAAA,KAAK,EAAEF,GAAG,CAFZ;AAA4B,OAAV,CAAXD,CAAP;AAMF;;AAAA,mBAAA,SAAA,GAA2B;AACzB,aAAO,MAAMI,IAAI,CAAJA,KAAAA,CAAAA,SAAAA,EAAb,IAAaA,CAAb;AAGF;;AAAA,UAAMC,MAAM,GAAGC,SAAS,GAATA,IAAAA,CACNL,GAAD,IAAS;AACbF,MAAAA,iBAAiB,CAAjBA,MAAAA,CAAAA,GAAAA;AACA,aAAO;AAAEG,QAAAA,QAAQ,EAAV,IAAA;AAAkBC,QAAAA,KAAK,EAA9B;AAAO,OAAP;AAHWG,KAAAA,EAAAA,KAAAA,CAKLC,GAAD,IAAS;AACdR,MAAAA,iBAAiB,CAAjBA,MAAAA,CAAAA,GAAAA;AACA,aAAOS,OAAO,CAAPA,MAAAA,CAAP,GAAOA,CAAP;AAPJ,KAAeF,CAAf;;AASAP,IAAAA,iBAAiB,CAAjBA,GAAAA,CAAAA,GAAAA,EAAAA,MAAAA;AACA,WAAA,MAAA;AAvBF,GAAA;AAyBD","sourcesContent":["type CoalescedInvoke<T> = {\n  isOrigin: boolean\n  value: T\n}\n\nexport type UnwrapPromise<T> = T extends Promise<infer U> ? U : T\n\nconst globalInvokeCache = new Map<string, Promise<CoalescedInvoke<unknown>>>()\n\nexport function withCoalescedInvoke<F extends (...args: any) => any>(\n  func: F\n): (\n  key: string,\n  args: Parameters<F>\n) => Promise<CoalescedInvoke<UnwrapPromise<ReturnType<F>>>> {\n  return async function (key: string, args: Parameters<F>) {\n    const entry = globalInvokeCache.get(key)\n    if (entry) {\n      return entry.then((res) => ({\n        isOrigin: false,\n        value: res.value as UnwrapPromise<ReturnType<F>>,\n      }))\n    }\n\n    async function __wrapper() {\n      return await func.apply(undefined, args)\n    }\n\n    const future = __wrapper()\n      .then((res) => {\n        globalInvokeCache.delete(key)\n        return { isOrigin: true, value: res as UnwrapPromise<ReturnType<F>> }\n      })\n      .catch((err) => {\n        globalInvokeCache.delete(key)\n        return Promise.reject(err)\n      })\n    globalInvokeCache.set(key, future)\n    return future\n  }\n}\n"]},"metadata":{},"sourceType":"script"}