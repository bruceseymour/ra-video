{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PropagationAPI = void 0;\n\nvar NoopTextMapPropagator_1 = require(\"../context/propagation/NoopTextMapPropagator\");\n\nvar TextMapPropagator_1 = require(\"../context/propagation/TextMapPropagator\");\n\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\n\n\nvar PropagationAPI =\n/** @class */\nfunction () {\n  /** Empty private constructor prevents end users from constructing a new instance of the API */\n  function PropagationAPI() {}\n  /** Get the singleton instance of the Propagator API */\n\n\n  PropagationAPI.getInstance = function () {\n    if (!this._instance) {\n      this._instance = new PropagationAPI();\n    }\n\n    return this._instance;\n  };\n  /**\n   * Set the current propagator. Returns the initialized propagator\n   */\n\n\n  PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n    if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {\n      // global propagator has already been set\n      return this._getGlobalPropagator();\n    }\n\n    global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR);\n    return propagator;\n  };\n  /**\n   * Inject context into a carrier to be propagated inter-process\n   *\n   * @param context Context carrying tracing data to inject\n   * @param carrier carrier to inject context into\n   * @param setter Function used to set values on the carrier\n   */\n\n\n  PropagationAPI.prototype.inject = function (context, carrier, setter) {\n    if (setter === void 0) {\n      setter = TextMapPropagator_1.defaultTextMapSetter;\n    }\n\n    return this._getGlobalPropagator().inject(context, carrier, setter);\n  };\n  /**\n   * Extract context from a carrier\n   *\n   * @param context Context which the newly created context will inherit from\n   * @param carrier Carrier to extract context from\n   * @param getter Function used to extract keys from a carrier\n   */\n\n\n  PropagationAPI.prototype.extract = function (context, carrier, getter) {\n    if (getter === void 0) {\n      getter = TextMapPropagator_1.defaultTextMapGetter;\n    }\n\n    return this._getGlobalPropagator().extract(context, carrier, getter);\n  };\n  /** Remove the global propagator */\n\n\n  PropagationAPI.prototype.disable = function () {\n    delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];\n  };\n\n  PropagationAPI.prototype._getGlobalPropagator = function () {\n    var _a, _b;\n\n    return (_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR;\n  };\n\n  return PropagationAPI;\n}();\n\nexports.PropagationAPI = PropagationAPI;","map":{"version":3,"sources":["../../../src/api/propagation.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAGH,IAAA,uBAAA,GAAA,OAAA,CAAA,8CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,0CAAA,CAAA;;AAOA,IAAA,cAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;AAOA;;AAEG;;;AACH,IAAA,cAAA;AAAA;AAAA,YAAA;AAGE;AACA,WAAA,cAAA,GAAA,CAAwB;AAExB;;;AACc,EAAA,cAAA,CAAA,WAAA,GAAd,YAAA;AACE,QAAI,CAAC,KAAK,SAAV,EAAqB;AACnB,WAAK,SAAL,GAAiB,IAAI,cAAJ,EAAjB;AACD;;AAED,WAAO,KAAK,SAAZ;AACD,GANa;AAQd;;AAEG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,mBAAA,GAAP,UAA2B,UAA3B,EAAwD;AACtD,QAAI,cAAA,CAAA,OAAA,CAAQ,cAAA,CAAA,0BAAR,CAAJ,EAAyC;AACvC;AACA,aAAO,KAAK,oBAAL,EAAP;AACD;;AAED,IAAA,cAAA,CAAA,OAAA,CAAQ,cAAA,CAAA,0BAAR,IAAsC,cAAA,CAAA,UAAA,CACpC,cAAA,CAAA,mCADoC,EAEpC,UAFoC,EAGpC,uBAAA,CAAA,wBAHoC,CAAtC;AAMA,WAAO,UAAP;AACD,GAbM;AAeP;;;;;;AAMG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,MAAA,GAAP,UACE,OADF,EAEE,OAFF,EAGE,MAHF,EAGuD;AAArD,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAiC,mBAAA,CAAA,oBAAjC;AAAqD;;AAErD,WAAO,KAAK,oBAAL,GAA4B,MAA5B,CAAmC,OAAnC,EAA4C,OAA5C,EAAqD,MAArD,CAAP;AACD,GANM;AAQP;;;;;;AAMG;;;AACI,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAP,UACE,OADF,EAEE,OAFF,EAGE,MAHF,EAGuD;AAArD,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAiC,mBAAA,CAAA,oBAAjC;AAAqD;;AAErD,WAAO,KAAK,oBAAL,GAA4B,OAA5B,CAAoC,OAApC,EAA6C,OAA7C,EAAsD,MAAtD,CAAP;AACD,GANM;AAQP;;;AACO,EAAA,cAAA,CAAA,SAAA,CAAA,OAAA,GAAP,YAAA;AACE,WAAO,cAAA,CAAA,OAAA,CAAQ,cAAA,CAAA,0BAAR,CAAP;AACD,GAFM;;AAIC,EAAA,cAAA,CAAA,SAAA,CAAA,oBAAA,GAAR,YAAA;;;AACE,WAAO,CAAA,EAAA,GAAA,CAAA,EAAA,GACL,cAAA,CAAA,OAAA,CAAQ,cAAA,CAAA,0BAAR,CADK,MAC8B,IAD9B,IAC8B,EAAA,KAAA,KAAA,CAD9B,GAC8B,KAAA,CAD9B,GAC8B,EAAA,CAAA,IAAA,CAAnC,cAAA,CAAA,OAAmC,EACjC,cAAA,CAAA,mCADiC,CAD9B,MAEgC,IAFhC,IAEgC,EAAA,KAAA,KAAA,CAFhC,GAEgC,EAFhC,GAGA,uBAAA,CAAA,wBAHP;AAKD,GANO;;AAOV,SAAA,cAAA;AAAC,CA3ED,EAAA;;AAAa,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PropagationAPI = void 0;\nvar NoopTextMapPropagator_1 = require(\"../context/propagation/NoopTextMapPropagator\");\nvar TextMapPropagator_1 = require(\"../context/propagation/TextMapPropagator\");\nvar global_utils_1 = require(\"./global-utils\");\n/**\n * Singleton object which represents the entry point to the OpenTelemetry Propagation API\n */\nvar PropagationAPI = /** @class */ (function () {\n    /** Empty private constructor prevents end users from constructing a new instance of the API */\n    function PropagationAPI() {\n    }\n    /** Get the singleton instance of the Propagator API */\n    PropagationAPI.getInstance = function () {\n        if (!this._instance) {\n            this._instance = new PropagationAPI();\n        }\n        return this._instance;\n    };\n    /**\n     * Set the current propagator. Returns the initialized propagator\n     */\n    PropagationAPI.prototype.setGlobalPropagator = function (propagator) {\n        if (global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) {\n            // global propagator has already been set\n            return this._getGlobalPropagator();\n        }\n        global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, propagator, NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR);\n        return propagator;\n    };\n    /**\n     * Inject context into a carrier to be propagated inter-process\n     *\n     * @param context Context carrying tracing data to inject\n     * @param carrier carrier to inject context into\n     * @param setter Function used to set values on the carrier\n     */\n    PropagationAPI.prototype.inject = function (context, carrier, setter) {\n        if (setter === void 0) { setter = TextMapPropagator_1.defaultTextMapSetter; }\n        return this._getGlobalPropagator().inject(context, carrier, setter);\n    };\n    /**\n     * Extract context from a carrier\n     *\n     * @param context Context which the newly created context will inherit from\n     * @param carrier Carrier to extract context from\n     * @param getter Function used to extract keys from a carrier\n     */\n    PropagationAPI.prototype.extract = function (context, carrier, getter) {\n        if (getter === void 0) { getter = TextMapPropagator_1.defaultTextMapGetter; }\n        return this._getGlobalPropagator().extract(context, carrier, getter);\n    };\n    /** Remove the global propagator */\n    PropagationAPI.prototype.disable = function () {\n        delete global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY];\n    };\n    PropagationAPI.prototype._getGlobalPropagator = function () {\n        var _a, _b;\n        return ((_b = (_a = global_utils_1._global[global_utils_1.GLOBAL_PROPAGATION_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION)) !== null && _b !== void 0 ? _b : NoopTextMapPropagator_1.NOOP_TEXT_MAP_PROPAGATOR);\n    };\n    return PropagationAPI;\n}());\nexports.PropagationAPI = PropagationAPI;\n//# sourceMappingURL=propagation.js.map"]},"metadata":{},"sourceType":"script"}