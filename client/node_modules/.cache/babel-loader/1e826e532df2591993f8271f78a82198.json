{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst MAX_AGE_ZERO = {\n  value: 0,\n  isExpired: () => true\n};\n/* A max age wrapper. */\n\nclass MaxAge {\n  /**\n   * Returns new MaxAge with value 0.\n   *\n   * @returns {MaxAge}\n   */\n  static zero() {\n    return MAX_AGE_ZERO;\n  }\n  /**\n   * Parses a max-age header string and returns a new MaxAge instance.\n   *\n   * @param {string} str a max-age header string\n   * @returns {MaxAge}\n   */\n\n\n  static parse(string) {\n    if (!string) {\n      return MaxAge.zero();\n    }\n\n    const match = string.match(/max-age=([0-9]+)[^0-9]?/i);\n\n    if (!match) {\n      return MaxAge.zero();\n    }\n\n    return MaxAge.create(match[1]);\n  }\n  /**\n   * Creates a new MaxAge instance from a number or string.\n   *\n   * @param {Number|String} maxAge the max age in seconds\n   * @returns {MaxAge}\n   */\n\n\n  static create(maxAge) {\n    if (!Number.isInteger(maxAge)) {\n      maxAge = parseInt(maxAge, 10);\n    }\n\n    return new MaxAge(Date.now(), maxAge);\n  }\n  /**\n   * @param {Number} timestampInMs time when max-age value was received\n   * @param {Number} value max-age value in seconds\n   **/\n\n\n  static fromObject(timestampInMs, value) {\n    return new MaxAge(timestampInMs, value);\n  }\n  /**\n   * @param {Number} timestampInMs time when max-age value was received\n   * @param {Number} value max-age value in seconds\n   **/\n\n\n  constructor(timestampInMs, value) {\n    this.timestampInMs_ = timestampInMs;\n    this.value = value;\n  }\n  /**\n   * Returns true if the max-age value has expired. Uses the current time by\n   * default.\n   *\n   * @param {Number} [currentTimeInMs] optional current time.\n   * @returns {Boolean} true if expired\n   **/\n\n\n  isExpired(currentTimeInMs = Date.now()) {\n    const maxAgeInMs = this.value * 1000;\n    return this.timestampInMs_ + maxAgeInMs < currentTimeInMs;\n  }\n  /**\n   * Returns a JSON compatible representation.\n   * @returns {Object} the MaxAge data\n   */\n\n\n  toObject() {\n    return {\n      timestampInMs: this.timestampInMs_,\n      maxAge: this.maxAge\n    };\n  }\n\n}\n\nmodule.exports = MaxAge;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-core/lib/MaxAge.js"],"names":["MAX_AGE_ZERO","value","isExpired","MaxAge","zero","parse","string","match","create","maxAge","Number","isInteger","parseInt","Date","now","fromObject","timestampInMs","constructor","timestampInMs_","currentTimeInMs","maxAgeInMs","toObject","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMA,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,CADY;AAEnBC,EAAAA,SAAS,EAAE,MAAM;AAFE,CAArB;AAKA;;AACA,MAAMC,MAAN,CAAa;AACX;AACF;AACA;AACA;AACA;AACE,SAAOC,IAAP,GAAc;AACZ,WAAOJ,YAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOK,KAAP,CAAaC,MAAb,EAAqB;AACnB,QAAI,CAACA,MAAL,EAAa;AACX,aAAOH,MAAM,CAACC,IAAP,EAAP;AACD;;AACD,UAAMG,KAAK,GAAGD,MAAM,CAACC,KAAP,CAAa,0BAAb,CAAd;;AACA,QAAI,CAACA,KAAL,EAAY;AACV,aAAOJ,MAAM,CAACC,IAAP,EAAP;AACD;;AACD,WAAOD,MAAM,CAACK,MAAP,CAAcD,KAAK,CAAC,CAAD,CAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,SAAOC,MAAP,CAAcC,MAAd,EAAsB;AACpB,QAAI,CAACC,MAAM,CAACC,SAAP,CAAiBF,MAAjB,CAAL,EAA+B;AAC7BA,MAAAA,MAAM,GAAGG,QAAQ,CAACH,MAAD,EAAS,EAAT,CAAjB;AACD;;AACD,WAAO,IAAIN,MAAJ,CAAWU,IAAI,CAACC,GAAL,EAAX,EAAuBL,MAAvB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACE,SAAOM,UAAP,CAAkBC,aAAlB,EAAiCf,KAAjC,EAAwC;AACtC,WAAO,IAAIE,MAAJ,CAAWa,aAAX,EAA0Bf,KAA1B,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEgB,EAAAA,WAAW,CAACD,aAAD,EAAgBf,KAAhB,EAAuB;AAChC,SAAKiB,cAAL,GAAsBF,aAAtB;AACA,SAAKf,KAAL,GAAaA,KAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAACiB,eAAe,GAAGN,IAAI,CAACC,GAAL,EAAnB,EAA+B;AACtC,UAAMM,UAAU,GAAG,KAAKnB,KAAL,GAAa,IAAhC;AACA,WAAO,KAAKiB,cAAL,GAAsBE,UAAtB,GAAmCD,eAA1C;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,QAAQ,GAAG;AACT,WAAO;AACLL,MAAAA,aAAa,EAAE,KAAKE,cADf;AAELT,MAAAA,MAAM,EAAE,KAAKA;AAFR,KAAP;AAID;;AA9EU;;AAiFba,MAAM,CAACC,OAAP,GAAiBpB,MAAjB","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst MAX_AGE_ZERO = {\n  value: 0,\n  isExpired: () => true,\n};\n\n/* A max age wrapper. */\nclass MaxAge {\n  /**\n   * Returns new MaxAge with value 0.\n   *\n   * @returns {MaxAge}\n   */\n  static zero() {\n    return MAX_AGE_ZERO;\n  }\n\n  /**\n   * Parses a max-age header string and returns a new MaxAge instance.\n   *\n   * @param {string} str a max-age header string\n   * @returns {MaxAge}\n   */\n  static parse(string) {\n    if (!string) {\n      return MaxAge.zero();\n    }\n    const match = string.match(/max-age=([0-9]+)[^0-9]?/i);\n    if (!match) {\n      return MaxAge.zero();\n    }\n    return MaxAge.create(match[1]);\n  }\n\n  /**\n   * Creates a new MaxAge instance from a number or string.\n   *\n   * @param {Number|String} maxAge the max age in seconds\n   * @returns {MaxAge}\n   */\n  static create(maxAge) {\n    if (!Number.isInteger(maxAge)) {\n      maxAge = parseInt(maxAge, 10);\n    }\n    return new MaxAge(Date.now(), maxAge);\n  }\n\n  /**\n   * @param {Number} timestampInMs time when max-age value was received\n   * @param {Number} value max-age value in seconds\n   **/\n  static fromObject(timestampInMs, value) {\n    return new MaxAge(timestampInMs, value);\n  }\n\n  /**\n   * @param {Number} timestampInMs time when max-age value was received\n   * @param {Number} value max-age value in seconds\n   **/\n  constructor(timestampInMs, value) {\n    this.timestampInMs_ = timestampInMs;\n    this.value = value;\n  }\n\n  /**\n   * Returns true if the max-age value has expired. Uses the current time by\n   * default.\n   *\n   * @param {Number} [currentTimeInMs] optional current time.\n   * @returns {Boolean} true if expired\n   **/\n  isExpired(currentTimeInMs = Date.now()) {\n    const maxAgeInMs = this.value * 1000;\n    return this.timestampInMs_ + maxAgeInMs < currentTimeInMs;\n  }\n\n  /**\n   * Returns a JSON compatible representation.\n   * @returns {Object} the MaxAge data\n   */\n  toObject() {\n    return {\n      timestampInMs: this.timestampInMs_,\n      maxAge: this.maxAge,\n    };\n  }\n}\n\nmodule.exports = MaxAge;\n"]},"metadata":{},"sourceType":"script"}