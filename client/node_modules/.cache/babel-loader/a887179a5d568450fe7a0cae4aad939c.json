{"ast":null,"code":"\"use strict\";\n\nvar _nodeFetch = _interopRequireWildcard(require(\"node-fetch\"));\n\nfunction _getRequireWildcardCache() {\n  if (typeof WeakMap !== \"function\") return null;\n  var cache = new WeakMap();\n\n  _getRequireWildcardCache = function () {\n    return cache;\n  };\n\n  return cache;\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  }\n\n  if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n    return {\n      default: obj\n    };\n  }\n\n  var cache = _getRequireWildcardCache();\n\n  if (cache && cache.has(obj)) {\n    return cache.get(obj);\n  }\n\n  var newObj = {};\n  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) {\n      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n\n      if (desc && (desc.get || desc.set)) {\n        Object.defineProperty(newObj, key, desc);\n      } else {\n        newObj[key] = obj[key];\n      }\n    }\n  }\n\n  newObj.default = obj;\n\n  if (cache) {\n    cache.set(obj, newObj);\n  }\n\n  return newObj;\n} // Polyfill fetch() in the Node.js environment\n\n\nif (!global.fetch) {\n  global.fetch = _nodeFetch.default;\n  global.Headers = _nodeFetch.Headers;\n  global.Request = _nodeFetch.Request;\n  global.Response = _nodeFetch.Response;\n}","map":{"version":3,"sources":["../../../next-server/server/node-polyfill-fetch.js"],"names":["global","fetch","Headers","Request","Response"],"mappings":";;AAAA,IAAA,UAAA,GAAA,uBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,C,CAAA;;;AACA,IAAI,CAACA,MAAM,CAAX,KAAA,EAAmB;AACjBA,EAAAA,MAAM,CAANA,KAAAA,GAAeC,UAAAA,CAAfD,OAAAA;AACAA,EAAAA,MAAM,CAANA,OAAAA,GAAiBE,UAAAA,CAAjBF,OAAAA;AACAA,EAAAA,MAAM,CAANA,OAAAA,GAAiBG,UAAAA,CAAjBH,OAAAA;AACAA,EAAAA,MAAM,CAANA,QAAAA,GAAkBI,UAAAA,CAAlBJ,QAAAA;AACD","sourcesContent":["import fetch, { Headers, Request, Response } from 'node-fetch'\n\n// Polyfill fetch() in the Node.js environment\nif (!global.fetch) {\n  global.fetch = fetch\n  global.Headers = Headers\n  global.Request = Request\n  global.Response = Response\n}\n"]},"metadata":{},"sourceType":"script"}