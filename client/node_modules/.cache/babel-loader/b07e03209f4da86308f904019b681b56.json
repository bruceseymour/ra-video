{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getClientStyleLoader = getClientStyleLoader;\n\nvar _miniCssExtractPlugin = _interopRequireDefault(require(\"../../../../plugins/mini-css-extract-plugin\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction getClientStyleLoader({\n  isDevelopment,\n  assetPrefix\n}) {\n  return isDevelopment ? {\n    loader: require.resolve('style-loader'),\n    options: {\n      // By default, style-loader injects CSS into the bottom\n      // of <head>. This causes ordering problems between dev\n      // and prod. To fix this, we render a <noscript> tag as\n      // an anchor for the styles to be placed before. These\n      // styles will be applied _before_ <style jsx global>.\n      insert: function (element) {\n        // These elements should always exist. If they do not,\n        // this code should fail.\n        var anchorElement = document.querySelector('#__next_css__DO_NOT_USE__');\n        var parentNode = anchorElement.parentNode; // Normally <head>\n        // Each style tag should be placed right before our\n        // anchor. By inserting before and not after, we do not\n        // need to track the last inserted element.\n\n        parentNode.insertBefore(element, anchorElement);\n      }\n    }\n  } : {\n    // @ts-ignore: TODO: remove when webpack 5 is stable\n    loader: _miniCssExtractPlugin.default.loader,\n    options: {\n      publicPath: `${assetPrefix}/_next/`\n    }\n  };\n}","map":{"version":3,"sources":["../../../../../../../build/webpack/config/blocks/css/loaders/client.ts"],"names":["isDevelopment","loader","require","options","insert","anchorElement","document","parentNode","MiniCssExtractPlugin","publicPath","assetPrefix"],"mappings":";;;;;AACA,IAAA,qBAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,6CAAA,CAAA,CAAA;;;;;;AAEO;;AAAA,SAAA,oBAAA,CAA8B;AAAA,EAAA,aAAA;AAA9B,EAAA;AAA8B,CAA9B,EAMoB;AACzB,SAAOA,aAAa,GAChB;AACEC,IAAAA,MAAM,EAAEC,OAAO,CAAPA,OAAAA,CADV,cACUA,CADV;AAEEC,IAAAA,OAAO,EAAE;AACP;AACA;AACA;AACA;AACA;AACAC,MAAAA,MAAM,EAAE,UAAA,OAAA,EAAyB;AAC/B;AACA;AACA,YAAIC,aAAa,GAAGC,QAAQ,CAARA,aAAAA,CAApB,2BAAoBA,CAApB;AAGA,YAAIC,UAAU,GAAGF,aAAa,CAA9B,UAAA,CAN+B,CAMY;AAE3C;AACA;AACA;;AACAE,QAAAA,UAAU,CAAVA,YAAAA,CAAAA,OAAAA,EAAAA,aAAAA;AApBU;AAGL;AAFX,GADgB,GAwBhB;AACE;AACAN,IAAAA,MAAM,EAAEO,qBAAAA,CAAAA,OAAAA,CAFV,MAAA;AAGEL,IAAAA,OAAO,EAAE;AAAEM,MAAAA,UAAU,EAAG,GAAEC,WA3BhC;AA2Be;AAHX,GAxBJ;AA6BD","sourcesContent":["import webpack from 'webpack'\nimport MiniCssExtractPlugin from '../../../../plugins/mini-css-extract-plugin'\n\nexport function getClientStyleLoader({\n  isDevelopment,\n  assetPrefix,\n}: {\n  isDevelopment: boolean\n  assetPrefix: string\n}): webpack.RuleSetUseItem {\n  return isDevelopment\n    ? {\n        loader: require.resolve('style-loader'),\n        options: {\n          // By default, style-loader injects CSS into the bottom\n          // of <head>. This causes ordering problems between dev\n          // and prod. To fix this, we render a <noscript> tag as\n          // an anchor for the styles to be placed before. These\n          // styles will be applied _before_ <style jsx global>.\n          insert: function (element: Node) {\n            // These elements should always exist. If they do not,\n            // this code should fail.\n            var anchorElement = document.querySelector(\n              '#__next_css__DO_NOT_USE__'\n            )!\n            var parentNode = anchorElement.parentNode! // Normally <head>\n\n            // Each style tag should be placed right before our\n            // anchor. By inserting before and not after, we do not\n            // need to track the last inserted element.\n            parentNode.insertBefore(element, anchorElement)\n          },\n        },\n      }\n    : {\n        // @ts-ignore: TODO: remove when webpack 5 is stable\n        loader: MiniCssExtractPlugin.loader,\n        options: { publicPath: `${assetPrefix}/_next/` },\n      }\n}\n"]},"metadata":{},"sourceType":"script"}