{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.CssMinimizerPlugin = void 0;\n\nvar _cssnanoSimple = _interopRequireDefault(require(\"cssnano-simple\"));\n\nvar _postcssScss = _interopRequireDefault(require(\"next/dist/compiled/postcss-scss\"));\n\nvar _postcss = _interopRequireDefault(require(\"postcss\"));\n\nvar _webpack = _interopRequireDefault(require(\"webpack\"));\n\nvar _webpackSources = _interopRequireDefault(require(\"webpack-sources\"));\n\nvar _tracer = require(\"../../tracer\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // @ts-ignore: TODO: remove ignore when webpack 5 is stable\n\n\nconst {\n  RawSource,\n  SourceMapSource\n} = _webpack.default.sources || _webpackSources.default; // https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\n\nconst CSS_REGEX = /\\.css(\\?.*)?$/i;\nconst isWebpack5 = parseInt(_webpack.default.version) === 5;\n\nclass CssMinimizerPlugin {\n  constructor(options) {\n    this.__next_css_remove = true;\n    this.options = void 0;\n    this.options = options;\n  }\n\n  optimizeAsset(file, asset) {\n    const postcssOptions = { ...this.options.postcssOptions,\n      to: file,\n      from: file,\n      // We don't actually add this parser to support Sass. It can also be used\n      // for inline comment support. See the README:\n      // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss\n      parser: _postcssScss.default\n    };\n    let input;\n\n    if (postcssOptions.map && asset.sourceAndMap) {\n      const {\n        source,\n        map\n      } = asset.sourceAndMap();\n      input = source;\n      postcssOptions.map.prev = map ? map : false;\n    } else {\n      input = asset.source();\n    }\n\n    return (0, _postcss.default)([_cssnanoSimple.default]).process(input, postcssOptions).then(res => {\n      if (res.map) {\n        return new SourceMapSource(res.css, file, res.map.toJSON());\n      } else {\n        return new RawSource(res.css);\n      }\n    });\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', compilation => {\n      if (isWebpack5) {\n        const cache = compilation.getCache('CssMinimizerPlugin');\n        compilation.hooks.processAssets.tapPromise({\n          name: 'CssMinimizerPlugin',\n          // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n          stage: _webpack.default.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE\n        }, async assets => {\n          const span = _tracer.tracer.startSpan('css-minimizer-plugin', {\n            attributes: {\n              webpackVersion: 5\n            }\n          });\n\n          return (0, _tracer.traceAsyncFn)(span, async () => {\n            const files = Object.keys(assets);\n            await Promise.all(files.filter(file => CSS_REGEX.test(file)).map(async file => {\n              const assetSpan = _tracer.tracer.startSpan('minify-css', {\n                attributes: {\n                  file\n                }\n              });\n\n              return (0, _tracer.traceAsyncFn)(span, async () => {\n                const asset = assets[file];\n                const etag = cache.getLazyHashedEtag(asset);\n                const cachedResult = await cache.getPromise(file, etag);\n                assetSpan.setAttribute('cache', cachedResult ? 'HIT' : 'MISS');\n\n                if (cachedResult) {\n                  assets[file] = cachedResult;\n                  return;\n                }\n\n                const result = await this.optimizeAsset(file, asset);\n                await cache.storePromise(file, etag, result);\n                assets[file] = result;\n              });\n            }));\n          });\n        });\n        return;\n      }\n\n      compilation.hooks.optimizeChunkAssets.tapPromise('CssMinimizerPlugin', chunks => {\n        const span = _tracer.tracer.startSpan('css-minimizer-plugin', {\n          attributes: {\n            webpackVersion: 4,\n            compilationName: compilation.name\n          }\n        });\n\n        return (0, _tracer.traceAsyncFn)(span, async () => {\n          const res = await Promise.all(chunks.reduce((acc, chunk) => acc.concat(chunk.files || []), []).filter(entry => CSS_REGEX.test(entry)).map(async file => {\n            const assetSpan = _tracer.tracer.startSpan('minify-css', {\n              attributes: {\n                file\n              }\n            });\n\n            return (0, _tracer.traceAsyncFn)(assetSpan, async () => {\n              const asset = compilation.assets[file]; // Makes trace attributes the same as webpack 5\n              // When using webpack 4 the result is not cached\n\n              assetSpan.setAttribute('cache', 'MISS');\n              compilation.assets[file] = await this.optimizeAsset(file, asset);\n            });\n          }));\n          return res;\n        });\n      });\n    });\n  }\n\n}\n\nexports.CssMinimizerPlugin = CssMinimizerPlugin;","map":{"version":3,"sources":["../../../../build/webpack/plugins/css-minimizer-plugin.ts"],"names":["webpack","sources","CSS_REGEX","isWebpack5","parseInt","CssMinimizerPlugin","__next_css_remove","options","constructor","optimizeAsset","postcssOptions","to","from","parser","postcssScss","asset","input","map","cssnanoSimple","res","apply","compilation","cache","name","stage","span","tracer","attributes","webpackVersion","files","Object","Promise","file","assetSpan","assets","etag","cachedResult","result","chunks","compilationName","acc","chunk","entry"],"mappings":"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","sourcesContent":["import cssnanoSimple from 'cssnano-simple'\nimport postcssScss from 'next/dist/compiled/postcss-scss'\nimport postcss, { Parser } from 'postcss'\nimport webpack from 'webpack'\nimport sources from 'webpack-sources'\nimport { tracer, traceAsyncFn } from '../../tracer'\n\n// @ts-ignore: TODO: remove ignore when webpack 5 is stable\nconst { RawSource, SourceMapSource } = webpack.sources || sources\n\n// https://github.com/NMFR/optimize-css-assets-webpack-plugin/blob/0a410a9bf28c7b0e81a3470a13748e68ca2f50aa/src/index.js#L20\nconst CSS_REGEX = /\\.css(\\?.*)?$/i\n\ntype CssMinimizerPluginOptions = {\n  postcssOptions: {\n    map: false | { prev?: string | false; inline: boolean; annotation: boolean }\n  }\n}\n\nconst isWebpack5 = parseInt(webpack.version!) === 5\n\nexport class CssMinimizerPlugin {\n  __next_css_remove = true\n\n  private options: CssMinimizerPluginOptions\n\n  constructor(options: CssMinimizerPluginOptions) {\n    this.options = options\n  }\n\n  optimizeAsset(file: string, asset: any) {\n    const postcssOptions = {\n      ...this.options.postcssOptions,\n      to: file,\n      from: file,\n\n      // We don't actually add this parser to support Sass. It can also be used\n      // for inline comment support. See the README:\n      // https://github.com/postcss/postcss-scss/blob/master/README.md#2-inline-comments-for-postcss\n      parser: (postcssScss as any) as Parser,\n    }\n\n    let input: string\n    if (postcssOptions.map && asset.sourceAndMap) {\n      const { source, map } = asset.sourceAndMap()\n      input = source\n      postcssOptions.map.prev = map ? map : false\n    } else {\n      input = asset.source()\n    }\n\n    return postcss([cssnanoSimple])\n      .process(input, postcssOptions)\n      .then((res) => {\n        if (res.map) {\n          return new SourceMapSource(res.css, file, res.map.toJSON())\n        } else {\n          return new RawSource(res.css)\n        }\n      })\n  }\n\n  apply(compiler: webpack.Compiler) {\n    compiler.hooks.compilation.tap('CssMinimizerPlugin', (compilation: any) => {\n      if (isWebpack5) {\n        const cache = compilation.getCache('CssMinimizerPlugin')\n        compilation.hooks.processAssets.tapPromise(\n          {\n            name: 'CssMinimizerPlugin',\n            // @ts-ignore TODO: Remove ignore when webpack 5 is stable\n            stage: webpack.Compilation.PROCESS_ASSETS_STAGE_OPTIMIZE_SIZE,\n          },\n          async (assets: any) => {\n            const span = tracer.startSpan('css-minimizer-plugin', {\n              attributes: {\n                webpackVersion: 5,\n              },\n            })\n\n            return traceAsyncFn(span, async () => {\n              const files = Object.keys(assets)\n              await Promise.all(\n                files\n                  .filter((file) => CSS_REGEX.test(file))\n                  .map(async (file) => {\n                    const assetSpan = tracer.startSpan('minify-css', {\n                      attributes: {\n                        file,\n                      },\n                    })\n                    return traceAsyncFn(span, async () => {\n                      const asset = assets[file]\n\n                      const etag = cache.getLazyHashedEtag(asset)\n\n                      const cachedResult = await cache.getPromise(file, etag)\n\n                      assetSpan.setAttribute(\n                        'cache',\n                        cachedResult ? 'HIT' : 'MISS'\n                      )\n                      if (cachedResult) {\n                        assets[file] = cachedResult\n                        return\n                      }\n\n                      const result = await this.optimizeAsset(file, asset)\n                      await cache.storePromise(file, etag, result)\n                      assets[file] = result\n                    })\n                  })\n              )\n            })\n          }\n        )\n        return\n      }\n      compilation.hooks.optimizeChunkAssets.tapPromise(\n        'CssMinimizerPlugin',\n        (chunks: webpack.compilation.Chunk[]) => {\n          const span = tracer.startSpan('css-minimizer-plugin', {\n            attributes: {\n              webpackVersion: 4,\n              compilationName: compilation.name,\n            },\n          })\n\n          return traceAsyncFn(span, async () => {\n            const res = await Promise.all(\n              chunks\n                .reduce(\n                  (acc, chunk) => acc.concat(chunk.files || []),\n                  [] as string[]\n                )\n                .filter((entry) => CSS_REGEX.test(entry))\n                .map(async (file) => {\n                  const assetSpan = tracer.startSpan('minify-css', {\n                    attributes: {\n                      file,\n                    },\n                  })\n                  return traceAsyncFn(assetSpan, async () => {\n                    const asset = compilation.assets[file]\n                    // Makes trace attributes the same as webpack 5\n                    // When using webpack 4 the result is not cached\n                    assetSpan.setAttribute('cache', 'MISS')\n                    compilation.assets[file] = await this.optimizeAsset(\n                      file,\n                      asset\n                    )\n                  })\n                })\n            )\n            return res\n          })\n        }\n      )\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}