{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports._postPayload = _postPayload;\n\nvar _asyncRetry = _interopRequireDefault(require(\"next/dist/compiled/async-retry\"));\n\nvar _nodeFetch = _interopRequireDefault(require(\"node-fetch\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _postPayload(endpoint, body) {\n  return (0, _asyncRetry.default)(() => (0, _nodeFetch.default)(endpoint, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'content-type': 'application/json'\n    },\n    timeout: 5000\n  }).then(res => {\n    if (!res.ok) {\n      const err = new Error(res.statusText);\n      err.response = res;\n      throw err;\n    }\n  }), {\n    minTimeout: 500,\n    retries: 1,\n    factor: 1\n  }).catch(() => {// We swallow errors when telemetry cannot be sent\n  }) // Ensure promise is voided\n  .then(() => {}, () => {});\n}","map":{"version":3,"sources":["../../telemetry/post-payload.ts"],"names":["method","body","JSON","headers","timeout","res","err","minTimeout","retries","factor"],"mappings":";;;;;AAAA,IAAA,WAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,gCAAA,CAAA,CAAA;;AACA,IAAA,UAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,YAAA,CAAA,CAAA;;;;;;AAEO;;AAAA,SAAA,YAAA,CAAA,QAAA,EAAA,IAAA,EAAsD;AAC3D,SACE,CAAA,GAAA,WAAA,CAAA,OAAA,EACE,MACE,CAAA,GAAA,UAAA,CAAA,OAAA,EAAA,QAAA,EAAgB;AACdA,IAAAA,MAAM,EADQ,MAAA;AAEdC,IAAAA,IAAI,EAAEC,IAAI,CAAJA,SAAAA,CAFQ,IAERA,CAFQ;AAGdC,IAAAA,OAAO,EAAE;AAAE,sBAHG;AAGL,KAHK;AAIdC,IAAAA,OAAO,EAJT;AAAgB,GAAhB,EAAA,IAAA,CAKSC,GAAD,IAAS;AACf,QAAI,CAACA,GAAG,CAAR,EAAA,EAAa;AACX,YAAMC,GAAG,GAAG,IAAA,KAAA,CAAUD,GAAG,CAAzB,UAAY,CAAZ;AACEC,MAAAA,GAAD,CAAA,QAACA,GAAD,GAACA;AACF,YAAA,GAAA;AAEH;AAbL,GAEI,CAFJ,EAcE;AAAEC,IAAAA,UAAU,EAAZ,GAAA;AAAmBC,IAAAA,OAAO,EAA1B,CAAA;AAA+BC,IAAAA,MAAM,EAdvC;AAcE,GAdF,EAAA,KAAA,CAgBS,MAAM,CACX;AAjBJ,GAAA,EAmBE;AAnBF,GAAA,IAAA,CAqBI,MAAM,CArBV,CAAA,EAsBI,MAAM,CAvBZ,CACE,CADF;AA0BD","sourcesContent":["import retry from 'next/dist/compiled/async-retry'\nimport fetch from 'node-fetch'\n\nexport function _postPayload(endpoint: string, body: object) {\n  return (\n    retry(\n      () =>\n        fetch(endpoint, {\n          method: 'POST',\n          body: JSON.stringify(body),\n          headers: { 'content-type': 'application/json' },\n          timeout: 5000,\n        }).then((res) => {\n          if (!res.ok) {\n            const err = new Error(res.statusText)\n            ;(err as any).response = res\n            throw err\n          }\n        }),\n      { minTimeout: 500, retries: 1, factor: 1 }\n    )\n      .catch(() => {\n        // We swallow errors when telemetry cannot be sent\n      })\n      // Ensure promise is voided\n      .then(\n        () => {},\n        () => {}\n      )\n  )\n}\n"]},"metadata":{},"sourceType":"script"}