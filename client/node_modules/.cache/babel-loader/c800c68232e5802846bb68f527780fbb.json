{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {\n  Parser\n} = require('htmlparser2');\n\nconst {\n  DomHandler,\n  NodeWithChildren\n} = require('domhandler');\n\nconst {\n  appendAll\n} = require('./NodeUtils');\n\nconst render = require('dom-serializer').default;\n\nconst PARSER_OPTIONS = {\n  decodeEntities: false\n};\n/**\n * HTML parser and serializer. DOM nodes use htmlparser2 API with custom extensions\n * required by transformers.\n */\n\nclass TreeParser {\n  constructor(options) {\n    this.options = options;\n  }\n  /**\n   * Parses an HTML string.\n   *\n   * @param {string} html\n   * @returns {Node} root node\n   */\n\n\n  parse(html) {\n    return new Promise((resolve, reject) => {\n      const handler = new DomHandler((error, dom) => {\n        if (error) {\n          reject(error);\n        } else {\n          const root = new NodeWithChildren('root', []);\n          appendAll(root, dom);\n          resolve(root);\n        }\n      }, this.options);\n      const parser = new Parser(handler, this.options);\n      parser.write(html.trim());\n      parser.end();\n    });\n  }\n  /**\n   * Serializes a tree to an HTML string.\n   *\n   * @param {Tree} tree\n   */\n\n\n  serialize(node) {\n    return render(node, {});\n  }\n\n}\n\nmodule.exports = new TreeParser(PARSER_OPTIONS);\nmodule.exports.TreeParser = TreeParser;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/lib/TreeParser.js"],"names":["Parser","require","DomHandler","NodeWithChildren","appendAll","render","default","PARSER_OPTIONS","decodeEntities","TreeParser","constructor","options","parse","html","Promise","resolve","reject","handler","error","dom","root","parser","write","trim","end","serialize","node","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAM;AAACA,EAAAA;AAAD,IAAWC,OAAO,CAAC,aAAD,CAAxB;;AACA,MAAM;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,IAAiCF,OAAO,CAAC,YAAD,CAA9C;;AACA,MAAM;AAACG,EAAAA;AAAD,IAAcH,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,gBAAD,CAAP,CAA0BK,OAAzC;;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,cAAc,EAAE;AADK,CAAvB;AAIA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACC,IAAD,EAAO;AACV,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,OAAO,GAAG,IAAIf,UAAJ,CAAe,CAACgB,KAAD,EAAQC,GAAR,KAAgB;AAC7C,YAAID,KAAJ,EAAW;AACTF,UAAAA,MAAM,CAACE,KAAD,CAAN;AACD,SAFD,MAEO;AACL,gBAAME,IAAI,GAAG,IAAIjB,gBAAJ,CAAqB,MAArB,EAA6B,EAA7B,CAAb;AACAC,UAAAA,SAAS,CAACgB,IAAD,EAAOD,GAAP,CAAT;AACAJ,UAAAA,OAAO,CAACK,IAAD,CAAP;AACD;AACF,OARe,EAQb,KAAKT,OARQ,CAAhB;AASA,YAAMU,MAAM,GAAG,IAAIrB,MAAJ,CAAWiB,OAAX,EAAoB,KAAKN,OAAzB,CAAf;AACAU,MAAAA,MAAM,CAACC,KAAP,CAAaT,IAAI,CAACU,IAAL,EAAb;AACAF,MAAAA,MAAM,CAACG,GAAP;AACD,KAbM,CAAP;AAcD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAACC,IAAD,EAAO;AACd,WAAOrB,MAAM,CAACqB,IAAD,EAAO,EAAP,CAAb;AACD;;AAnCc;;AAsCjBC,MAAM,CAACC,OAAP,GAAiB,IAAInB,UAAJ,CAAeF,cAAf,CAAjB;AACAoB,MAAM,CAACC,OAAP,CAAenB,UAAf,GAA4BA,UAA5B","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst {Parser} = require('htmlparser2');\nconst {DomHandler, NodeWithChildren} = require('domhandler');\nconst {appendAll} = require('./NodeUtils');\nconst render = require('dom-serializer').default;\n\nconst PARSER_OPTIONS = {\n  decodeEntities: false,\n};\n\n/**\n * HTML parser and serializer. DOM nodes use htmlparser2 API with custom extensions\n * required by transformers.\n */\nclass TreeParser {\n  constructor(options) {\n    this.options = options;\n  }\n\n  /**\n   * Parses an HTML string.\n   *\n   * @param {string} html\n   * @returns {Node} root node\n   */\n  parse(html) {\n    return new Promise((resolve, reject) => {\n      const handler = new DomHandler((error, dom) => {\n        if (error) {\n          reject(error);\n        } else {\n          const root = new NodeWithChildren('root', []);\n          appendAll(root, dom);\n          resolve(root);\n        }\n      }, this.options);\n      const parser = new Parser(handler, this.options);\n      parser.write(html.trim());\n      parser.end();\n    });\n  }\n\n  /**\n   * Serializes a tree to an HTML string.\n   *\n   * @param {Tree} tree\n   */\n  serialize(node) {\n    return render(node, {});\n  }\n}\n\nmodule.exports = new TreeParser(PARSER_OPTIONS);\nmodule.exports.TreeParser = TreeParser;\n"]},"metadata":{},"sourceType":"script"}