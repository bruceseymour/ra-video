{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getScssError = getScssError;\n\nvar _codeFrame = require(\"next/dist/compiled/babel/code-frame\");\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _simpleWebpackError = require(\"./simpleWebpackError\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst chalk = new _chalk.default.constructor({\n  enabled: true\n});\nconst regexScssError = /SassError: (.+)\\n\\s+on line (\\d+) [\\s\\S]*?>> (.+)\\n\\s*(-+)\\^$/m;\n\nfunction getScssError(fileName, fileContent, err) {\n  if (err.name !== 'SassError') {\n    return false;\n  }\n\n  const res = regexScssError.exec(err.message);\n\n  if (res) {\n    var _columnString$length, _frame;\n\n    const [, reason, _lineNumer, backupFrame, columnString] = res;\n    const lineNumber = Math.max(1, parseInt(_lineNumer, 10));\n    const column = (_columnString$length = columnString == null ? void 0 : columnString.length) != null ? _columnString$length : 1;\n    let frame;\n\n    if (fileContent) {\n      try {\n        frame = (0, _codeFrame.codeFrameColumns)(fileContent, {\n          start: {\n            line: lineNumber,\n            column\n          }\n        }, {\n          forceColor: true\n        });\n      } catch (_unused) {}\n    }\n\n    return new _simpleWebpackError.SimpleWebpackError(`${chalk.cyan(fileName)}:${chalk.yellow(lineNumber.toString())}:${chalk.yellow(column.toString())}`, chalk.red.bold('Syntax error').concat(`: ${reason}\\n\\n${(_frame = frame) != null ? _frame : backupFrame}`));\n  }\n\n  return false;\n}","map":{"version":3,"sources":["../../../../../build/webpack/plugins/wellknown-errors-plugin/parseScss.ts"],"names":["chalk","Chalk","enabled","regexScssError","err","res","lineNumber","Math","parseInt","column","columnString","frame","start","line","forceColor","SimpleWebpackError","reason","backupFrame"],"mappings":";;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,qCAAA,CAAA;;AACA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;;;;;AAEA;;AAAA,MAAMA,KAAK,GAAG,IAAIC,MAAAA,CAAAA,OAAAA,CAAJ,WAAA,CAAsB;AAAEC,EAAAA,OAAO,EAA7C;AAAoC,CAAtB,CAAd;AACA,MAAMC,cAAc,GAApB,gEAAA;;AAEO,SAAA,YAAA,CAAA,QAAA,EAAA,WAAA,EAAA,GAAA,EAIuB;AAC5B,MAAIC,GAAG,CAAHA,IAAAA,KAAJ,WAAA,EAA8B;AAC5B,WAAA,KAAA;AAGF;;AAAA,QAAMC,GAAG,GAAGF,cAAc,CAAdA,IAAAA,CAAoBC,GAAG,CAAnC,OAAYD,CAAZ;;AACA,MAAA,GAAA,EAAS;AAAA,QAAA,oBAAA,EAAA,MAAA;;AACP,UAAM,GAAA,MAAA,EAAA,UAAA,EAAA,WAAA,EAAA,YAAA,IAAN,GAAA;AACA,UAAMG,UAAU,GAAGC,IAAI,CAAJA,GAAAA,CAAAA,CAAAA,EAAYC,QAAQ,CAAA,UAAA,EAAvC,EAAuC,CAApBD,CAAnB;AACA,UAAME,MAAM,GAAA,CAAA,oBAAA,GAAGC,YAAH,IAAA,IAAGA,GAAH,KAAA,CAAGA,GAAAA,YAAY,CAAf,MAAA,KAAA,IAAA,GAAA,oBAAA,GAAZ,CAAA;AAEA,QAAA,KAAA;;AACA,QAAA,WAAA,EAAiB;AACf,UAAI;AACFC,QAAAA,KAAK,GAAG,CAAA,GAAA,UAAA,CAAA,gBAAA,EAAA,WAAA,EAEN;AAAEC,UAAAA,KAAK,EAAE;AAAEC,YAAAA,IAAI,EAAN,UAAA;AAFH,YAAA;AAEG;AAAT,SAFM,EAGN;AAAEC,UAAAA,UAAU,EAHdH;AAGE,SAHM,CAARA;AAKA,OANF,CAME,OAAA,OAAA,EAAM,CACT;AAED;;AAAA,WAAO,IAAII,mBAAAA,CAAJ,kBAAA,CACJ,GAAEf,KAAK,CAALA,IAAAA,CAAAA,QAAAA,CAAqB,IAAGA,KAAK,CAALA,MAAAA,CACzBM,UAAU,CADeN,QACzBM,EADyBN,CAEzB,IAAGA,KAAK,CAALA,MAAAA,CAAaS,MAAM,CAAnBT,QAAaS,EAAbT,CAHA,EAAA,EAILA,KAAK,CAALA,GAAAA,CAAAA,IAAAA,CAAAA,cAAAA,EAAAA,MAAAA,CAEW,KAAIgB,MAAO,OAAZ,CAAA,MAAA,GAAA,KAAA,KAAA,IAAA,GAAA,MAAA,GAA2BC,WANvC,EAIEjB,CAJK,CAAP;AAUF;;AAAA,SAAA,KAAA;AACD","sourcesContent":["import { codeFrameColumns } from 'next/dist/compiled/babel/code-frame'\nimport Chalk from 'chalk'\nimport { SimpleWebpackError } from './simpleWebpackError'\n\nconst chalk = new Chalk.constructor({ enabled: true })\nconst regexScssError = /SassError: (.+)\\n\\s+on line (\\d+) [\\s\\S]*?>> (.+)\\n\\s*(-+)\\^$/m\n\nexport function getScssError(\n  fileName: string,\n  fileContent: string | null,\n  err: Error\n): SimpleWebpackError | false {\n  if (err.name !== 'SassError') {\n    return false\n  }\n\n  const res = regexScssError.exec(err.message)\n  if (res) {\n    const [, reason, _lineNumer, backupFrame, columnString] = res\n    const lineNumber = Math.max(1, parseInt(_lineNumer, 10))\n    const column = columnString?.length ?? 1\n\n    let frame: string | undefined\n    if (fileContent) {\n      try {\n        frame = codeFrameColumns(\n          fileContent,\n          { start: { line: lineNumber, column } },\n          { forceColor: true }\n        ) as string\n      } catch {}\n    }\n\n    return new SimpleWebpackError(\n      `${chalk.cyan(fileName)}:${chalk.yellow(\n        lineNumber.toString()\n      )}:${chalk.yellow(column.toString())}`,\n      chalk.red\n        .bold('Syntax error')\n        .concat(`: ${reason}\\n\\n${frame ?? backupFrame}`)\n    )\n  }\n\n  return false\n}\n"]},"metadata":{},"sourceType":"script"}