{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.base = void 0;\n\nvar _isWsl = _interopRequireDefault(require(\"next/dist/compiled/is-wsl\"));\n\nvar _lodash = _interopRequireDefault(require(\"next/dist/compiled/lodash.curry\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nconst isWindows = process.platform === 'win32' || _isWsl.default;\nconst base = (0, _lodash.default)(function base(ctx, config) {\n  config.mode = ctx.isDevelopment ? 'development' : 'production';\n  config.name = ctx.isServer ? 'server' : 'client';\n  config.target = ctx.isServer ? 'node' : 'web'; // Stop compilation early in a production build when an error is encountered.\n  // This behavior isn't desirable in development due to how the HMR system\n  // works, but is a good default for production.\n\n  config.bail = ctx.isProduction; // https://webpack.js.org/configuration/devtool/#development\n\n  if (ctx.isDevelopment) {\n    if (process.env.__NEXT_TEST_MODE && !process.env.__NEXT_TEST_WITH_DEVTOOL) {\n      config.devtool = false;\n    } else if (isWindows) {\n      // Non-eval based source maps are slow to rebuild, so we only enable\n      // them for Windows. Unfortunately, eval source maps are flagged as\n      // suspicious by Windows Defender and block HMR.\n      config.devtool = 'inline-source-map';\n    } else {\n      // `eval-source-map` provides full-fidelity source maps for the\n      // original source, including columns and original variable names.\n      // This is desirable so the in-browser debugger can correctly pause\n      // and show scoped variables with their original names.\n      config.devtool = 'eval-source-map';\n    }\n  } else {\n    // Enable browser sourcemaps:\n    if (ctx.productionBrowserSourceMaps && ctx.isClient) {\n      config.devtool = 'source-map';\n    } else {\n      config.devtool = false;\n    }\n  }\n\n  if (!config.module) {\n    config.module = {\n      rules: []\n    };\n  }\n\n  config.module.strictExportPresence = true;\n  return config;\n});\nexports.base = base;","map":{"version":3,"sources":["../../../../../build/webpack/config/blocks/base.ts"],"names":["isWindows","process","isWslBoolean","base","config","ctx","rules"],"mappings":";;;;;AAAA,IAAA,MAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,2BAAA,CAAA,CAAA;;AACA,IAAA,OAAA,GAAA,sBAAA,CAAA,OAAA,CAAA,iCAAA,CAAA,CAAA;;;;;;AAIA;;AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAPA,QAAAA,KAAAA,OAAAA,IAAgCC,MAAAA,CAAlD,OAAA;AAEO,MAAMC,IAAI,GAAG,CAAA,GAAA,OAAA,CAAA,OAAA,EAAM,SAAA,IAAA,CAAA,GAAA,EAAA,MAAA,EAGxB;AACAC,EAAAA,MAAM,CAANA,IAAAA,GAAcC,GAAG,CAAHA,aAAAA,GAAAA,aAAAA,GAAdD,YAAAA;AACAA,EAAAA,MAAM,CAANA,IAAAA,GAAcC,GAAG,CAAHA,QAAAA,GAAAA,QAAAA,GAAdD,QAAAA;AACAA,EAAAA,MAAM,CAANA,MAAAA,GAAgBC,GAAG,CAAHA,QAAAA,GAAAA,MAAAA,GAAhBD,KAAAA,CAHA,CAKA;AACA;AACA;;AACAA,EAAAA,MAAM,CAANA,IAAAA,GAAcC,GAAG,CAAjBD,YAAAA,CARA,CAUA;;AACA,MAAIC,GAAG,CAAP,aAAA,EAAuB;AACrB,QAAIJ,OAAO,CAAPA,GAAAA,CAAAA,gBAAAA,IAAgC,CAACA,OAAO,CAAPA,GAAAA,CAArC,wBAAA,EAA2E;AACzEG,MAAAA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;AADF,KAAA,MAEO,IAAA,SAAA,EAAe;AACpB;AACA;AACA;AACAA,MAAAA,MAAM,CAANA,OAAAA,GAAAA,mBAAAA;AAJK,KAAA,MAKA;AACL;AACA;AACA;AACA;AACAA,MAAAA,MAAM,CAANA,OAAAA,GAAAA,iBAAAA;AAEH;AAfD,GAAA,MAeO;AACL;AACA,QAAIC,GAAG,CAAHA,2BAAAA,IAAmCA,GAAG,CAA1C,QAAA,EAAqD;AACnDD,MAAAA,MAAM,CAANA,OAAAA,GAAAA,YAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,MAAM,CAANA,OAAAA,GAAAA,KAAAA;AAEH;AAED;;AAAA,MAAI,CAACA,MAAM,CAAX,MAAA,EAAoB;AAClBA,IAAAA,MAAM,CAANA,MAAAA,GAAgB;AAAEE,MAAAA,KAAK,EAAvBF;AAAgB,KAAhBA;AAEFA;;AAAAA,EAAAA,MAAM,CAANA,MAAAA,CAAAA,oBAAAA,GAAAA,IAAAA;AAEA,SAAA,MAAA;AA3CK,CAAa,CAAb","sourcesContent":["import isWslBoolean from 'next/dist/compiled/is-wsl'\nimport curry from 'next/dist/compiled/lodash.curry'\nimport { Configuration } from 'webpack'\nimport { ConfigurationContext } from '../utils'\n\nconst isWindows = process.platform === 'win32' || isWslBoolean\n\nexport const base = curry(function base(\n  ctx: ConfigurationContext,\n  config: Configuration\n) {\n  config.mode = ctx.isDevelopment ? 'development' : 'production'\n  config.name = ctx.isServer ? 'server' : 'client'\n  config.target = ctx.isServer ? 'node' : 'web'\n\n  // Stop compilation early in a production build when an error is encountered.\n  // This behavior isn't desirable in development due to how the HMR system\n  // works, but is a good default for production.\n  config.bail = ctx.isProduction\n\n  // https://webpack.js.org/configuration/devtool/#development\n  if (ctx.isDevelopment) {\n    if (process.env.__NEXT_TEST_MODE && !process.env.__NEXT_TEST_WITH_DEVTOOL) {\n      config.devtool = false\n    } else if (isWindows) {\n      // Non-eval based source maps are slow to rebuild, so we only enable\n      // them for Windows. Unfortunately, eval source maps are flagged as\n      // suspicious by Windows Defender and block HMR.\n      config.devtool = 'inline-source-map'\n    } else {\n      // `eval-source-map` provides full-fidelity source maps for the\n      // original source, including columns and original variable names.\n      // This is desirable so the in-browser debugger can correctly pause\n      // and show scoped variables with their original names.\n      config.devtool = 'eval-source-map'\n    }\n  } else {\n    // Enable browser sourcemaps:\n    if (ctx.productionBrowserSourceMaps && ctx.isClient) {\n      config.devtool = 'source-map'\n    } else {\n      config.devtool = false\n    }\n  }\n\n  if (!config.module) {\n    config.module = { rules: [] }\n  }\n  config.module.strictExportPresence = true\n\n  return config\n})\n"]},"metadata":{},"sourceType":"script"}