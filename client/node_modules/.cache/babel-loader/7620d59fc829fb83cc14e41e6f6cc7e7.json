{"ast":null,"code":"\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NOOP_TRACER = exports.NoopTracer = void 0;\n\nvar NoopSpan_1 = require(\"./NoopSpan\");\n\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\n\nvar context_1 = require(\"../context/context\");\n/**\n * No-op implementations of {@link Tracer}.\n */\n\n\nvar NoopTracer =\n/** @class */\nfunction () {\n  function NoopTracer() {}\n\n  NoopTracer.prototype.getCurrentSpan = function () {\n    return NoopSpan_1.NOOP_SPAN;\n  }; // startSpan starts a noop span.\n\n\n  NoopTracer.prototype.startSpan = function (name, options, context) {\n    var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n\n    if (root) {\n      return NoopSpan_1.NOOP_SPAN;\n    }\n\n    var parentFromContext = context && context_1.getParentSpanContext(context);\n\n    if (isSpanContext(parentFromContext) && spancontext_utils_1.isSpanContextValid(parentFromContext)) {\n      return new NoopSpan_1.NoopSpan(parentFromContext);\n    } else {\n      return NoopSpan_1.NOOP_SPAN;\n    }\n  };\n\n  NoopTracer.prototype.withSpan = function (span, fn) {\n    return fn();\n  };\n\n  NoopTracer.prototype.bind = function (target, _span) {\n    return target;\n  };\n\n  return NoopTracer;\n}();\n\nexports.NoopTracer = NoopTracer;\n\nfunction isSpanContext(spanContext) {\n  return typeof spanContext === 'object' && typeof spanContext['spanId'] === 'string' && typeof spanContext['traceId'] === 'string' && typeof spanContext['traceFlags'] === 'number';\n}\n\nexports.NOOP_TRACER = new NoopTracer();","map":{"version":3,"sources":["../../../src/trace/NoopTracer.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;AAcG;;;;;;;AAIH,IAAA,UAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,qBAAA,CAAA;;AACA,IAAA,SAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;AAEA;;AAEG;;;AACH,IAAA,UAAA;AAAA;AAAA,YAAA;AAAA,WAAA,UAAA,GAAA,CAkCC;;AAjCC,EAAA,UAAA,CAAA,SAAA,CAAA,cAAA,GAAA,YAAA;AACE,WAAO,UAAA,CAAA,SAAP;AACD,GAFD,CADF,CAKE;;;AACA,EAAA,UAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,IAAV,EAAwB,OAAxB,EAA+C,OAA/C,EAAgE;AAC9D,QAAM,IAAI,GAAG,OAAO,CAAC,OAAO,KAAA,IAAP,IAAA,OAAO,KAAA,KAAA,CAAP,GAAO,KAAA,CAAP,GAAA,OAAO,CAAE,IAAV,CAApB;;AACA,QAAI,IAAJ,EAAU;AACR,aAAO,UAAA,CAAA,SAAP;AACD;;AAED,QAAM,iBAAiB,GAAG,OAAO,IAAI,SAAA,CAAA,oBAAA,CAAqB,OAArB,CAArC;;AAEA,QACE,aAAa,CAAC,iBAAD,CAAb,IACA,mBAAA,CAAA,kBAAA,CAAmB,iBAAnB,CAFF,EAGE;AACA,aAAO,IAAI,UAAA,CAAA,QAAJ,CAAa,iBAAb,CAAP;AACD,KALD,MAKO;AACL,aAAO,UAAA,CAAA,SAAP;AACD;AACF,GAhBD;;AAkBA,EAAA,UAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UACE,IADF,EAEE,EAFF,EAEO;AAEL,WAAO,EAAE,EAAT;AACD,GALD;;AAOA,EAAA,UAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAQ,MAAR,EAAmB,KAAnB,EAA+B;AAC7B,WAAO,MAAP;AACD,GAFD;;AAGF,SAAA,UAAA;AAAC,CAlCD,EAAA;;AAAa,OAAA,CAAA,UAAA,GAAA,UAAA;;AAoCb,SAAS,aAAT,CAAuB,WAAvB,EAAuC;AACrC,SACE,OAAO,WAAP,KAAuB,QAAvB,IACA,OAAO,WAAW,CAAC,QAAD,CAAlB,KAAiC,QADjC,IAEA,OAAO,WAAW,CAAC,SAAD,CAAlB,KAAkC,QAFlC,IAGA,OAAO,WAAW,CAAC,YAAD,CAAlB,KAAqC,QAJvC;AAMD;;AAEY,OAAA,CAAA,WAAA,GAAc,IAAI,UAAJ,EAAd","sourceRoot":"","sourcesContent":["\"use strict\";\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.NOOP_TRACER = exports.NoopTracer = void 0;\nvar NoopSpan_1 = require(\"./NoopSpan\");\nvar spancontext_utils_1 = require(\"./spancontext-utils\");\nvar context_1 = require(\"../context/context\");\n/**\n * No-op implementations of {@link Tracer}.\n */\nvar NoopTracer = /** @class */ (function () {\n    function NoopTracer() {\n    }\n    NoopTracer.prototype.getCurrentSpan = function () {\n        return NoopSpan_1.NOOP_SPAN;\n    };\n    // startSpan starts a noop span.\n    NoopTracer.prototype.startSpan = function (name, options, context) {\n        var root = Boolean(options === null || options === void 0 ? void 0 : options.root);\n        if (root) {\n            return NoopSpan_1.NOOP_SPAN;\n        }\n        var parentFromContext = context && context_1.getParentSpanContext(context);\n        if (isSpanContext(parentFromContext) &&\n            spancontext_utils_1.isSpanContextValid(parentFromContext)) {\n            return new NoopSpan_1.NoopSpan(parentFromContext);\n        }\n        else {\n            return NoopSpan_1.NOOP_SPAN;\n        }\n    };\n    NoopTracer.prototype.withSpan = function (span, fn) {\n        return fn();\n    };\n    NoopTracer.prototype.bind = function (target, _span) {\n        return target;\n    };\n    return NoopTracer;\n}());\nexports.NoopTracer = NoopTracer;\nfunction isSpanContext(spanContext) {\n    return (typeof spanContext === 'object' &&\n        typeof spanContext['spanId'] === 'string' &&\n        typeof spanContext['traceId'] === 'string' &&\n        typeof spanContext['traceFlags'] === 'number');\n}\nexports.NOOP_TRACER = new NoopTracer();\n//# sourceMappingURL=NoopTracer.js.map"]},"metadata":{},"sourceType":"script"}