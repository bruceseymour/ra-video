{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.startedDevelopmentServer = startedDevelopmentServer;\nexports.formatAmpMessages = formatAmpMessages;\nexports.ampValidation = ampValidation;\nexports.watchCompilers = watchCompilers;\n\nvar _chalk = _interopRequireDefault(require(\"chalk\"));\n\nvar _stripAnsi = _interopRequireDefault(require(\"next/dist/compiled/strip-ansi\"));\n\nvar _textTable = _interopRequireDefault(require(\"next/dist/compiled/text-table\"));\n\nvar _unistore = _interopRequireDefault(require(\"next/dist/compiled/unistore\"));\n\nvar _formatWebpackMessages = _interopRequireDefault(require(\"../../client/dev/error-overlay/format-webpack-messages\"));\n\nvar _store = require(\"./store\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction startedDevelopmentServer(appUrl) {\n  _store.store.setState({\n    appUrl\n  });\n}\n\nlet previousClient = null;\nlet previousServer = null;\nvar WebpackStatusPhase;\n\n(function (WebpackStatusPhase) {\n  WebpackStatusPhase[WebpackStatusPhase[\"COMPILING\"] = 1] = \"COMPILING\";\n  WebpackStatusPhase[WebpackStatusPhase[\"COMPILED_WITH_ERRORS\"] = 2] = \"COMPILED_WITH_ERRORS\";\n  WebpackStatusPhase[WebpackStatusPhase[\"COMPILED_WITH_WARNINGS\"] = 4] = \"COMPILED_WITH_WARNINGS\";\n  WebpackStatusPhase[WebpackStatusPhase[\"COMPILED\"] = 5] = \"COMPILED\";\n})(WebpackStatusPhase || (WebpackStatusPhase = {}));\n\nfunction getWebpackStatusPhase(status) {\n  if (status.loading) {\n    return WebpackStatusPhase.COMPILING;\n  }\n\n  if (status.errors) {\n    return WebpackStatusPhase.COMPILED_WITH_ERRORS;\n  }\n\n  if (status.warnings) {\n    return WebpackStatusPhase.COMPILED_WITH_WARNINGS;\n  }\n\n  return WebpackStatusPhase.COMPILED;\n}\n\nfunction formatAmpMessages(amp) {\n  let output = _chalk.default.bold('Amp Validation') + '\\n\\n';\n  let messages = [];\n\n  const chalkError = _chalk.default.red('error');\n\n  function ampError(page, error) {\n    messages.push([page, chalkError, error.message, error.specUrl || '']);\n  }\n\n  const chalkWarn = _chalk.default.yellow('warn');\n\n  function ampWarn(page, warn) {\n    messages.push([page, chalkWarn, warn.message, warn.specUrl || '']);\n  }\n\n  for (const page in amp) {\n    let {\n      errors,\n      warnings\n    } = amp[page];\n\n    const devOnlyFilter = err => err.code !== 'DEV_MODE_ONLY';\n\n    errors = errors.filter(devOnlyFilter);\n    warnings = warnings.filter(devOnlyFilter);\n\n    if (!(errors.length || warnings.length)) {\n      // Skip page with no non-dev warnings\n      continue;\n    }\n\n    if (errors.length) {\n      ampError(page, errors[0]);\n\n      for (let index = 1; index < errors.length; ++index) {\n        ampError('', errors[index]);\n      }\n    }\n\n    if (warnings.length) {\n      ampWarn(errors.length ? '' : page, warnings[0]);\n\n      for (let index = 1; index < warnings.length; ++index) {\n        ampWarn('', warnings[index]);\n      }\n    }\n\n    messages.push(['', '', '', '']);\n  }\n\n  if (!messages.length) {\n    return '';\n  }\n\n  output += (0, _textTable.default)(messages, {\n    align: ['l', 'l', 'l', 'l'],\n\n    stringLength(str) {\n      return (0, _stripAnsi.default)(str).length;\n    }\n\n  });\n  return output;\n}\n\nconst buildStore = (0, _unistore.default)();\nbuildStore.subscribe(state => {\n  const {\n    amp,\n    client,\n    server\n  } = state;\n  const [{\n    status\n  }] = [{\n    status: client,\n    phase: getWebpackStatusPhase(client)\n  }, {\n    status: server,\n    phase: getWebpackStatusPhase(server)\n  }].sort((a, b) => a.phase.valueOf() - b.phase.valueOf());\n\n  const {\n    bootstrap: bootstrapping,\n    appUrl\n  } = _store.store.getState();\n\n  if (bootstrapping && status.loading) {\n    return;\n  }\n\n  let partialState = {\n    bootstrap: false,\n    appUrl: appUrl\n  };\n\n  if (status.loading) {\n    _store.store.setState({ ...partialState,\n      loading: true\n    }, true);\n  } else {\n    let {\n      errors,\n      warnings\n    } = status;\n\n    if (errors == null) {\n      if (Object.keys(amp).length > 0) {\n        warnings = (warnings || []).concat(formatAmpMessages(amp) || []);\n        if (!warnings.length) warnings = null;\n      }\n    }\n\n    _store.store.setState({ ...partialState,\n      loading: false,\n      typeChecking: false,\n      errors,\n      warnings\n    }, true);\n  }\n});\n\nfunction ampValidation(page, errors, warnings) {\n  const {\n    amp\n  } = buildStore.getState();\n\n  if (!(errors.length || warnings.length)) {\n    buildStore.setState({\n      amp: Object.keys(amp).filter(k => k !== page).sort() // eslint-disable-next-line no-sequences\n      .reduce((a, c) => (a[c] = amp[c], a), {})\n    });\n    return;\n  }\n\n  const newAmp = { ...amp,\n    [page]: {\n      errors,\n      warnings\n    }\n  };\n  buildStore.setState({\n    amp: Object.keys(newAmp).sort() // eslint-disable-next-line no-sequences\n    .reduce((a, c) => (a[c] = newAmp[c], a), {})\n  });\n}\n\nfunction watchCompilers(client, server) {\n  if (previousClient === client && previousServer === server) {\n    return;\n  }\n\n  buildStore.setState({\n    client: {\n      loading: true\n    },\n    server: {\n      loading: true\n    }\n  });\n\n  function tapCompiler(key, compiler, onEvent) {\n    compiler.hooks.invalid.tap(`NextJsInvalid-${key}`, () => {\n      onEvent({\n        loading: true\n      });\n    });\n    compiler.hooks.done.tap(`NextJsDone-${key}`, stats => {\n      buildStore.setState({\n        amp: {}\n      });\n      const {\n        errors,\n        warnings\n      } = (0, _formatWebpackMessages.default)(stats.toJson({\n        all: false,\n        warnings: true,\n        errors: true\n      }));\n      const hasErrors = !!(errors != null && errors.length);\n      const hasWarnings = !!(warnings != null && warnings.length);\n      onEvent({\n        loading: false,\n        errors: hasErrors ? errors : null,\n        warnings: hasWarnings ? warnings : null\n      });\n    });\n  }\n\n  tapCompiler('client', client, status => buildStore.setState({\n    client: status\n  }));\n  tapCompiler('server', server, status => buildStore.setState({\n    server: status\n  }));\n  previousClient = client;\n  previousServer = server;\n}","map":{"version":3,"sources":["../../../build/output/index.ts"],"names":["consoleStore","previousClient","previousServer","WebpackStatusPhase","status","output","chalk","messages","chalkError","error","chalkWarn","warn","amp","devOnlyFilter","err","errors","warnings","ampError","index","ampWarn","align","stringLength","buildStore","state","phase","getWebpackStatusPhase","a","b","bootstrap","bootstrapping","partialState","appUrl","loading","Object","formatAmpMessages","typeChecking","k","newAmp","client","server","compiler","key","onEvent","stats","all","hasErrors","hasWarnings","tapCompiler"],"mappings":"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","sourcesContent":["import chalk from 'chalk'\nimport stripAnsi from 'next/dist/compiled/strip-ansi'\nimport textTable from 'next/dist/compiled/text-table'\nimport createStore from 'next/dist/compiled/unistore'\nimport formatWebpackMessages from '../../client/dev/error-overlay/format-webpack-messages'\nimport { OutputState, store as consoleStore } from './store'\n\nexport function startedDevelopmentServer(appUrl: string) {\n  consoleStore.setState({ appUrl })\n}\n\nlet previousClient: import('webpack').Compiler | null = null\nlet previousServer: import('webpack').Compiler | null = null\n\ntype CompilerDiagnosticsWithFile = {\n  errors: { file: string | undefined; message: string }[] | null\n  warnings: { file: string | undefined; message: string }[] | null\n}\n\ntype CompilerDiagnostics = {\n  errors: string[] | null\n  warnings: string[] | null\n}\n\ntype WebpackStatus =\n  | { loading: true }\n  | ({ loading: false } & CompilerDiagnostics)\n\ntype AmpStatus = {\n  message: string\n  line: number\n  col: number\n  specUrl: string | null\n  code: string\n}\n\nexport type AmpPageStatus = {\n  [page: string]: { errors: AmpStatus[]; warnings: AmpStatus[] }\n}\n\ntype BuildStatusStore = {\n  client: WebpackStatus\n  server: WebpackStatus\n  amp: AmpPageStatus\n}\n\nenum WebpackStatusPhase {\n  COMPILING = 1,\n  COMPILED_WITH_ERRORS = 2,\n  COMPILED_WITH_WARNINGS = 4,\n  COMPILED = 5,\n}\n\nfunction getWebpackStatusPhase(status: WebpackStatus): WebpackStatusPhase {\n  if (status.loading) {\n    return WebpackStatusPhase.COMPILING\n  }\n  if (status.errors) {\n    return WebpackStatusPhase.COMPILED_WITH_ERRORS\n  }\n  if (status.warnings) {\n    return WebpackStatusPhase.COMPILED_WITH_WARNINGS\n  }\n  return WebpackStatusPhase.COMPILED\n}\n\nexport function formatAmpMessages(amp: AmpPageStatus) {\n  let output = chalk.bold('Amp Validation') + '\\n\\n'\n  let messages: string[][] = []\n\n  const chalkError = chalk.red('error')\n  function ampError(page: string, error: AmpStatus) {\n    messages.push([page, chalkError, error.message, error.specUrl || ''])\n  }\n\n  const chalkWarn = chalk.yellow('warn')\n  function ampWarn(page: string, warn: AmpStatus) {\n    messages.push([page, chalkWarn, warn.message, warn.specUrl || ''])\n  }\n\n  for (const page in amp) {\n    let { errors, warnings } = amp[page]\n\n    const devOnlyFilter = (err: AmpStatus) => err.code !== 'DEV_MODE_ONLY'\n    errors = errors.filter(devOnlyFilter)\n    warnings = warnings.filter(devOnlyFilter)\n    if (!(errors.length || warnings.length)) {\n      // Skip page with no non-dev warnings\n      continue\n    }\n\n    if (errors.length) {\n      ampError(page, errors[0])\n      for (let index = 1; index < errors.length; ++index) {\n        ampError('', errors[index])\n      }\n    }\n    if (warnings.length) {\n      ampWarn(errors.length ? '' : page, warnings[0])\n      for (let index = 1; index < warnings.length; ++index) {\n        ampWarn('', warnings[index])\n      }\n    }\n    messages.push(['', '', '', ''])\n  }\n\n  if (!messages.length) {\n    return ''\n  }\n\n  output += textTable(messages, {\n    align: ['l', 'l', 'l', 'l'],\n    stringLength(str: string) {\n      return stripAnsi(str).length\n    },\n  })\n\n  return output\n}\n\nconst buildStore = createStore<BuildStatusStore>()\n\nbuildStore.subscribe((state) => {\n  const { amp, client, server } = state\n\n  const [{ status }] = [\n    { status: client, phase: getWebpackStatusPhase(client) },\n    { status: server, phase: getWebpackStatusPhase(server) },\n  ].sort((a, b) => a.phase.valueOf() - b.phase.valueOf())\n\n  const { bootstrap: bootstrapping, appUrl } = consoleStore.getState()\n  if (bootstrapping && status.loading) {\n    return\n  }\n\n  let partialState: Partial<OutputState> = {\n    bootstrap: false,\n    appUrl: appUrl!,\n  }\n\n  if (status.loading) {\n    consoleStore.setState(\n      { ...partialState, loading: true } as OutputState,\n      true\n    )\n  } else {\n    let { errors, warnings } = status\n\n    if (errors == null) {\n      if (Object.keys(amp).length > 0) {\n        warnings = (warnings || []).concat(formatAmpMessages(amp) || [])\n        if (!warnings.length) warnings = null\n      }\n    }\n\n    consoleStore.setState(\n      {\n        ...partialState,\n        loading: false,\n        typeChecking: false,\n        errors,\n        warnings,\n      } as OutputState,\n      true\n    )\n  }\n})\n\nexport function ampValidation(\n  page: string,\n  errors: AmpStatus[],\n  warnings: AmpStatus[]\n) {\n  const { amp } = buildStore.getState()\n  if (!(errors.length || warnings.length)) {\n    buildStore.setState({\n      amp: Object.keys(amp)\n        .filter((k) => k !== page)\n        .sort()\n        // eslint-disable-next-line no-sequences\n        .reduce((a, c) => ((a[c] = amp[c]), a), {} as AmpPageStatus),\n    })\n    return\n  }\n\n  const newAmp: AmpPageStatus = { ...amp, [page]: { errors, warnings } }\n  buildStore.setState({\n    amp: Object.keys(newAmp)\n      .sort()\n      // eslint-disable-next-line no-sequences\n      .reduce((a, c) => ((a[c] = newAmp[c]), a), {} as AmpPageStatus),\n  })\n}\n\nexport function watchCompilers(\n  client: import('webpack').Compiler,\n  server: import('webpack').Compiler\n) {\n  if (previousClient === client && previousServer === server) {\n    return\n  }\n\n  buildStore.setState({\n    client: { loading: true },\n    server: { loading: true },\n  })\n\n  function tapCompiler(\n    key: string,\n    compiler: any,\n    onEvent: (status: WebpackStatus) => void\n  ) {\n    compiler.hooks.invalid.tap(`NextJsInvalid-${key}`, () => {\n      onEvent({ loading: true })\n    })\n\n    compiler.hooks.done.tap(\n      `NextJsDone-${key}`,\n      (stats: import('webpack').Stats) => {\n        buildStore.setState({ amp: {} })\n\n        const { errors, warnings } = formatWebpackMessages(\n          stats.toJson({ all: false, warnings: true, errors: true })\n        )\n\n        const hasErrors = !!errors?.length\n        const hasWarnings = !!warnings?.length\n\n        onEvent({\n          loading: false,\n          errors: hasErrors ? errors : null,\n          warnings: hasWarnings ? warnings : null,\n        })\n      }\n    )\n  }\n\n  tapCompiler('client', client, (status) =>\n    buildStore.setState({ client: status })\n  )\n  tapCompiler('server', server, (status) =>\n    buildStore.setState({ server: status })\n  )\n\n  previousClient = client\n  previousServer = server\n}\n"]},"metadata":{},"sourceType":"script"}