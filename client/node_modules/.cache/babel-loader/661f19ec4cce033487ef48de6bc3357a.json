{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nlet fetch = require('cross-fetch');\n\nconst MaxAge = require('./MaxAge.js');\n\nconst cache = new Map();\n/**\n * Implements fetch with a one-behind-caching strategy.\n *\n * @param {String|Request} input - path or Request instance\n * @param {Object} init - fetch options\n * @return Promise<Response>\n */\n\nasync function oneBehindFetch(input, init) {\n  let cachedResponse = cache.get(input);\n\n  if (!cachedResponse) {\n    cachedResponse = {\n      maxAge: Promise.resolve(MaxAge.zero())\n    };\n    cache.set(input, cachedResponse);\n  }\n\n  const maxAge = await cachedResponse.maxAge;\n\n  if (!maxAge.isExpired()) {\n    // we have to clone the response to enable multiple reads\n    const response = await cachedResponse.responsePromise;\n    return response.clone();\n  }\n\n  const staleResponsePromise = cachedResponse.responsePromise;\n  const newResponsePromise = fetch(input, init);\n  cachedResponse = {\n    responsePromise: newResponsePromise,\n    maxAge: newResponsePromise.then(response => MaxAge.parse(response.headers.get('cache-control')))\n  };\n  cache.set(input, cachedResponse);\n  const result = staleResponsePromise || newResponsePromise; // we have to clone the response to enable multiple reads\n\n  const response = await result;\n  return response.clone();\n}\n\noneBehindFetch.clearCache = () => cache.clear();\n\noneBehindFetch.setDelegate = delegate => fetch = delegate;\n\nmodule.exports = oneBehindFetch;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-core/lib/oneBehindFetch.js"],"names":["fetch","require","MaxAge","cache","Map","oneBehindFetch","input","init","cachedResponse","get","maxAge","Promise","resolve","zero","set","isExpired","response","responsePromise","clone","staleResponsePromise","newResponsePromise","then","parse","headers","result","clearCache","clear","setDelegate","delegate","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIA,KAAK,GAAGC,OAAO,CAAC,aAAD,CAAnB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,aAAD,CAAtB;;AAEA,MAAME,KAAK,GAAG,IAAIC,GAAJ,EAAd;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,cAAf,CAA8BC,KAA9B,EAAqCC,IAArC,EAA2C;AACzC,MAAIC,cAAc,GAAGL,KAAK,CAACM,GAAN,CAAUH,KAAV,CAArB;;AACA,MAAI,CAACE,cAAL,EAAqB;AACnBA,IAAAA,cAAc,GAAG;AACfE,MAAAA,MAAM,EAAEC,OAAO,CAACC,OAAR,CAAgBV,MAAM,CAACW,IAAP,EAAhB;AADO,KAAjB;AAGAV,IAAAA,KAAK,CAACW,GAAN,CAAUR,KAAV,EAAiBE,cAAjB;AACD;;AACD,QAAME,MAAM,GAAG,MAAMF,cAAc,CAACE,MAApC;;AACA,MAAI,CAACA,MAAM,CAACK,SAAP,EAAL,EAAyB;AACvB;AACA,UAAMC,QAAQ,GAAG,MAAMR,cAAc,CAACS,eAAtC;AACA,WAAOD,QAAQ,CAACE,KAAT,EAAP;AACD;;AACD,QAAMC,oBAAoB,GAAGX,cAAc,CAACS,eAA5C;AACA,QAAMG,kBAAkB,GAAGpB,KAAK,CAACM,KAAD,EAAQC,IAAR,CAAhC;AACAC,EAAAA,cAAc,GAAG;AACfS,IAAAA,eAAe,EAAEG,kBADF;AAEfV,IAAAA,MAAM,EAAEU,kBAAkB,CAACC,IAAnB,CAAyBL,QAAD,IAC9Bd,MAAM,CAACoB,KAAP,CAAaN,QAAQ,CAACO,OAAT,CAAiBd,GAAjB,CAAqB,eAArB,CAAb,CADM;AAFO,GAAjB;AAMAN,EAAAA,KAAK,CAACW,GAAN,CAAUR,KAAV,EAAiBE,cAAjB;AACA,QAAMgB,MAAM,GAAGL,oBAAoB,IAAIC,kBAAvC,CAvByC,CAwBzC;;AACA,QAAMJ,QAAQ,GAAG,MAAMQ,MAAvB;AACA,SAAOR,QAAQ,CAACE,KAAT,EAAP;AACD;;AAEDb,cAAc,CAACoB,UAAf,GAA4B,MAAMtB,KAAK,CAACuB,KAAN,EAAlC;;AACArB,cAAc,CAACsB,WAAf,GAA8BC,QAAD,IAAe5B,KAAK,GAAG4B,QAApD;;AAEAC,MAAM,CAACC,OAAP,GAAiBzB,cAAjB","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nlet fetch = require('cross-fetch');\nconst MaxAge = require('./MaxAge.js');\n\nconst cache = new Map();\n\n/**\n * Implements fetch with a one-behind-caching strategy.\n *\n * @param {String|Request} input - path or Request instance\n * @param {Object} init - fetch options\n * @return Promise<Response>\n */\nasync function oneBehindFetch(input, init) {\n  let cachedResponse = cache.get(input);\n  if (!cachedResponse) {\n    cachedResponse = {\n      maxAge: Promise.resolve(MaxAge.zero()),\n    };\n    cache.set(input, cachedResponse);\n  }\n  const maxAge = await cachedResponse.maxAge;\n  if (!maxAge.isExpired()) {\n    // we have to clone the response to enable multiple reads\n    const response = await cachedResponse.responsePromise;\n    return response.clone();\n  }\n  const staleResponsePromise = cachedResponse.responsePromise;\n  const newResponsePromise = fetch(input, init);\n  cachedResponse = {\n    responsePromise: newResponsePromise,\n    maxAge: newResponsePromise.then((response) =>\n      MaxAge.parse(response.headers.get('cache-control'))\n    ),\n  };\n  cache.set(input, cachedResponse);\n  const result = staleResponsePromise || newResponsePromise;\n  // we have to clone the response to enable multiple reads\n  const response = await result;\n  return response.clone();\n}\n\noneBehindFetch.clearCache = () => cache.clear();\noneBehindFetch.setDelegate = (delegate) => (fetch = delegate);\n\nmodule.exports = oneBehindFetch;\n"]},"metadata":{},"sourceType":"script"}