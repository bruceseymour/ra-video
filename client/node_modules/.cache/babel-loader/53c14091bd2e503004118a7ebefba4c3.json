{"ast":null,"code":"import { AST_Accessor, AST_Array, AST_Arrow, AST_Await, AST_BigInt, AST_Binary, AST_Block, AST_Break, AST_Call, AST_Case, AST_Class, AST_ClassProperty, AST_ConciseMethod, AST_Conditional, AST_Const, AST_Continue, AST_Debugger, AST_Default, AST_Defun, AST_Destructuring, AST_Directive, AST_Do, AST_Dot, AST_EmptyStatement, AST_Expansion, AST_Export, AST_False, AST_For, AST_ForIn, AST_Function, AST_Hole, AST_If, AST_Import, AST_ImportMeta, AST_Infinity, AST_LabeledStatement, AST_Let, AST_NameMapping, AST_NaN, AST_New, AST_NewTarget, AST_Node, AST_Null, AST_Number, AST_Object, AST_ObjectKeyVal, AST_ObjectGetter, AST_ObjectSetter, AST_RegExp, AST_Return, AST_Sequence, AST_String, AST_Sub, AST_Super, AST_Switch, AST_Symbol, AST_SymbolClassProperty, AST_SymbolExportForeign, AST_SymbolImportForeign, AST_SymbolRef, AST_SymbolDeclaration, AST_TemplateSegment, AST_TemplateString, AST_This, AST_Throw, AST_Toplevel, AST_True, AST_Try, AST_Catch, AST_Finally, AST_Unary, AST_Undefined, AST_Var, AST_VarDef, AST_While, AST_With, AST_Yield, walk_parent } from \"./ast.js\";\nimport { first_in_statement } from \"./utils/first_in_statement.js\";\nlet mangle_options = undefined;\n\nAST_Node.prototype.size = function (compressor, stack) {\n  mangle_options = compressor && compressor.mangle_options;\n  let size = 0;\n  walk_parent(this, (node, info) => {\n    size += node._size(info);\n  }, stack || compressor && compressor.stack); // just to save a bit of memory\n\n  mangle_options = undefined;\n  return size;\n};\n\nAST_Node.prototype._size = () => 0;\n\nAST_Debugger.prototype._size = () => 8;\n\nAST_Directive.prototype._size = function () {\n  // TODO string encoding stuff\n  return 2 + this.value.length;\n};\n\nconst list_overhead = array => array.length && array.length - 1;\n\nAST_Block.prototype._size = function () {\n  return 2 + list_overhead(this.body);\n};\n\nAST_Toplevel.prototype._size = function () {\n  return list_overhead(this.body);\n};\n\nAST_EmptyStatement.prototype._size = () => 1;\n\nAST_LabeledStatement.prototype._size = () => 2; // x:\n\n\nAST_Do.prototype._size = () => 9;\n\nAST_While.prototype._size = () => 7;\n\nAST_For.prototype._size = () => 8;\n\nAST_ForIn.prototype._size = () => 8; // AST_ForOf inherits ^\n\n\nAST_With.prototype._size = () => 6;\n\nAST_Expansion.prototype._size = () => 3;\n/*#__INLINE__*/\n\n\nconst lambda_modifiers = func => (func.is_generator ? 1 : 0) + (func.async ? 6 : 0);\n\nAST_Accessor.prototype._size = function () {\n  return lambda_modifiers(this) + 4 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Function.prototype._size = function (info) {\n  const first = !!first_in_statement(info);\n  return first * 2 + lambda_modifiers(this) + 12 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Defun.prototype._size = function () {\n  return lambda_modifiers(this) + 13 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Arrow.prototype._size = function () {\n  let args_and_arrow = 2 + list_overhead(this.argnames);\n\n  if (!(this.argnames.length === 1 && this.argnames[0] instanceof AST_Symbol)) {\n    args_and_arrow += 2;\n  }\n\n  return lambda_modifiers(this) + args_and_arrow + (Array.isArray(this.body) ? list_overhead(this.body) : this.body._size());\n};\n\nAST_Destructuring.prototype._size = () => 2;\n\nAST_TemplateString.prototype._size = function () {\n  return 2 + Math.floor(this.segments.length / 2) * 3;\n  /* \"${}\" */\n};\n\nAST_TemplateSegment.prototype._size = function () {\n  return this.value.length;\n};\n\nAST_Return.prototype._size = function () {\n  return this.value ? 7 : 6;\n};\n\nAST_Throw.prototype._size = () => 6;\n\nAST_Break.prototype._size = function () {\n  return this.label ? 6 : 5;\n};\n\nAST_Continue.prototype._size = function () {\n  return this.label ? 9 : 8;\n};\n\nAST_If.prototype._size = () => 4;\n\nAST_Switch.prototype._size = function () {\n  return 8 + list_overhead(this.body);\n};\n\nAST_Case.prototype._size = function () {\n  return 5 + list_overhead(this.body);\n};\n\nAST_Default.prototype._size = function () {\n  return 8 + list_overhead(this.body);\n};\n\nAST_Try.prototype._size = function () {\n  return 3 + list_overhead(this.body);\n};\n\nAST_Catch.prototype._size = function () {\n  let size = 7 + list_overhead(this.body);\n\n  if (this.argname) {\n    size += 2;\n  }\n\n  return size;\n};\n\nAST_Finally.prototype._size = function () {\n  return 7 + list_overhead(this.body);\n};\n/*#__INLINE__*/\n\n\nconst def_size = (size, def) => size + list_overhead(def.definitions);\n\nAST_Var.prototype._size = function () {\n  return def_size(4, this);\n};\n\nAST_Let.prototype._size = function () {\n  return def_size(4, this);\n};\n\nAST_Const.prototype._size = function () {\n  return def_size(6, this);\n};\n\nAST_VarDef.prototype._size = function () {\n  return this.value ? 1 : 0;\n};\n\nAST_NameMapping.prototype._size = function () {\n  // foreign name isn't mangled\n  return this.name ? 4 : 0;\n};\n\nAST_Import.prototype._size = function () {\n  // import\n  let size = 6;\n  if (this.imported_name) size += 1; // from\n\n  if (this.imported_name || this.imported_names) size += 5; // braces, and the commas\n\n  if (this.imported_names) {\n    size += 2 + list_overhead(this.imported_names);\n  }\n\n  return size;\n};\n\nAST_ImportMeta.prototype._size = () => 11;\n\nAST_Export.prototype._size = function () {\n  let size = 7 + (this.is_default ? 8 : 0);\n\n  if (this.exported_value) {\n    size += this.exported_value._size();\n  }\n\n  if (this.exported_names) {\n    // Braces and commas\n    size += 2 + list_overhead(this.exported_names);\n  }\n\n  if (this.module_name) {\n    // \"from \"\n    size += 5;\n  }\n\n  return size;\n};\n\nAST_Call.prototype._size = function () {\n  if (this.optional) {\n    return 4 + list_overhead(this.args);\n  }\n\n  return 2 + list_overhead(this.args);\n};\n\nAST_New.prototype._size = function () {\n  return 6 + list_overhead(this.args);\n};\n\nAST_Sequence.prototype._size = function () {\n  return list_overhead(this.expressions);\n};\n\nAST_Dot.prototype._size = function () {\n  if (this.optional) {\n    return this.property.length + 2;\n  }\n\n  return this.property.length + 1;\n};\n\nAST_Sub.prototype._size = function () {\n  return this.optional ? 4 : 2;\n};\n\nAST_Unary.prototype._size = function () {\n  if (this.operator === \"typeof\") return 7;\n  if (this.operator === \"void\") return 5;\n  return this.operator.length;\n};\n\nAST_Binary.prototype._size = function (info) {\n  if (this.operator === \"in\") return 4;\n  let size = this.operator.length;\n\n  if ((this.operator === \"+\" || this.operator === \"-\") && this.right instanceof AST_Unary && this.right.operator === this.operator) {\n    // 1+ +a > needs space between the +\n    size += 1;\n  }\n\n  if (this.needs_parens(info)) {\n    size += 2;\n  }\n\n  return size;\n};\n\nAST_Conditional.prototype._size = () => 3;\n\nAST_Array.prototype._size = function () {\n  return 2 + list_overhead(this.elements);\n};\n\nAST_Object.prototype._size = function (info) {\n  let base = 2;\n\n  if (first_in_statement(info)) {\n    base += 2; // parens\n  }\n\n  return base + list_overhead(this.properties);\n};\n/*#__INLINE__*/\n\n\nconst key_size = key => typeof key === \"string\" ? key.length : 0;\n\nAST_ObjectKeyVal.prototype._size = function () {\n  return key_size(this.key) + 1;\n};\n/*#__INLINE__*/\n\n\nconst static_size = is_static => is_static ? 7 : 0;\n\nAST_ObjectGetter.prototype._size = function () {\n  return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ObjectSetter.prototype._size = function () {\n  return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ConciseMethod.prototype._size = function () {\n  return static_size(this.static) + key_size(this.key) + lambda_modifiers(this);\n};\n\nAST_Class.prototype._size = function () {\n  return (this.name ? 8 : 7) + (this.extends ? 8 : 0);\n};\n\nAST_ClassProperty.prototype._size = function () {\n  return static_size(this.static) + (typeof this.key === \"string\" ? this.key.length + 2 : 0) + (this.value ? 1 : 0);\n};\n\nAST_Symbol.prototype._size = function () {\n  return !mangle_options || this.definition().unmangleable(mangle_options) ? this.name.length : 1;\n}; // TODO take propmangle into account\n\n\nAST_SymbolClassProperty.prototype._size = function () {\n  return this.name.length;\n};\n\nAST_SymbolRef.prototype._size = AST_SymbolDeclaration.prototype._size = function () {\n  const {\n    name,\n    thedef\n  } = this;\n  if (thedef && thedef.global) return name.length;\n  if (name === \"arguments\") return 9;\n  return AST_Symbol.prototype._size.call(this);\n};\n\nAST_NewTarget.prototype._size = () => 10;\n\nAST_SymbolImportForeign.prototype._size = function () {\n  return this.name.length;\n};\n\nAST_SymbolExportForeign.prototype._size = function () {\n  return this.name.length;\n};\n\nAST_This.prototype._size = () => 4;\n\nAST_Super.prototype._size = () => 5;\n\nAST_String.prototype._size = function () {\n  return this.value.length + 2;\n};\n\nAST_Number.prototype._size = function () {\n  const {\n    value\n  } = this;\n  if (value === 0) return 1;\n\n  if (value > 0 && Math.floor(value) === value) {\n    return Math.floor(Math.log10(value) + 1);\n  }\n\n  return value.toString().length;\n};\n\nAST_BigInt.prototype._size = function () {\n  return this.value.length;\n};\n\nAST_RegExp.prototype._size = function () {\n  return this.value.toString().length;\n};\n\nAST_Null.prototype._size = () => 4;\n\nAST_NaN.prototype._size = () => 3;\n\nAST_Undefined.prototype._size = () => 6; // \"void 0\"\n\n\nAST_Hole.prototype._size = () => 0; // comma is taken into account\n\n\nAST_Infinity.prototype._size = () => 8;\n\nAST_True.prototype._size = () => 4;\n\nAST_False.prototype._size = () => 5;\n\nAST_Await.prototype._size = () => 6;\n\nAST_Yield.prototype._size = () => 6;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-optimizer/node_modules/terser/lib/size.js"],"names":["AST_Accessor","AST_Array","AST_Arrow","AST_Await","AST_BigInt","AST_Binary","AST_Block","AST_Break","AST_Call","AST_Case","AST_Class","AST_ClassProperty","AST_ConciseMethod","AST_Conditional","AST_Const","AST_Continue","AST_Debugger","AST_Default","AST_Defun","AST_Destructuring","AST_Directive","AST_Do","AST_Dot","AST_EmptyStatement","AST_Expansion","AST_Export","AST_False","AST_For","AST_ForIn","AST_Function","AST_Hole","AST_If","AST_Import","AST_ImportMeta","AST_Infinity","AST_LabeledStatement","AST_Let","AST_NameMapping","AST_NaN","AST_New","AST_NewTarget","AST_Node","AST_Null","AST_Number","AST_Object","AST_ObjectKeyVal","AST_ObjectGetter","AST_ObjectSetter","AST_RegExp","AST_Return","AST_Sequence","AST_String","AST_Sub","AST_Super","AST_Switch","AST_Symbol","AST_SymbolClassProperty","AST_SymbolExportForeign","AST_SymbolImportForeign","AST_SymbolRef","AST_SymbolDeclaration","AST_TemplateSegment","AST_TemplateString","AST_This","AST_Throw","AST_Toplevel","AST_True","AST_Try","AST_Catch","AST_Finally","AST_Unary","AST_Undefined","AST_Var","AST_VarDef","AST_While","AST_With","AST_Yield","walk_parent","first_in_statement","mangle_options","undefined","prototype","size","compressor","stack","node","info","_size","value","length","list_overhead","array","body","lambda_modifiers","func","is_generator","async","argnames","first","args_and_arrow","Array","isArray","Math","floor","segments","label","argname","def_size","def","definitions","name","imported_name","imported_names","is_default","exported_value","exported_names","module_name","optional","args","expressions","property","operator","right","needs_parens","elements","base","properties","key_size","key","static_size","is_static","static","extends","definition","unmangleable","thedef","global","call","log10","toString"],"mappings":"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","sourcesContent":["import {\n    AST_Accessor,\n    AST_Array,\n    AST_Arrow,\n    AST_Await,\n    AST_BigInt,\n    AST_Binary,\n    AST_Block,\n    AST_Break,\n    AST_Call,\n    AST_Case,\n    AST_Class,\n    AST_ClassProperty,\n    AST_ConciseMethod,\n    AST_Conditional,\n    AST_Const,\n    AST_Continue,\n    AST_Debugger,\n    AST_Default,\n    AST_Defun,\n    AST_Destructuring,\n    AST_Directive,\n    AST_Do,\n    AST_Dot,\n    AST_EmptyStatement,\n    AST_Expansion,\n    AST_Export,\n    AST_False,\n    AST_For,\n    AST_ForIn,\n    AST_Function,\n    AST_Hole,\n    AST_If,\n    AST_Import,\n    AST_ImportMeta,\n    AST_Infinity,\n    AST_LabeledStatement,\n    AST_Let,\n    AST_NameMapping,\n    AST_NaN,\n    AST_New,\n    AST_NewTarget,\n    AST_Node,\n    AST_Null,\n    AST_Number,\n    AST_Object,\n    AST_ObjectKeyVal,\n    AST_ObjectGetter,\n    AST_ObjectSetter,\n    AST_RegExp,\n    AST_Return,\n    AST_Sequence,\n    AST_String,\n    AST_Sub,\n    AST_Super,\n    AST_Switch,\n    AST_Symbol,\n    AST_SymbolClassProperty,\n    AST_SymbolExportForeign,\n    AST_SymbolImportForeign,\n    AST_SymbolRef,\n    AST_SymbolDeclaration,\n    AST_TemplateSegment,\n    AST_TemplateString,\n    AST_This,\n    AST_Throw,\n    AST_Toplevel,\n    AST_True,\n    AST_Try,\n    AST_Catch,\n    AST_Finally,\n    AST_Unary,\n    AST_Undefined,\n    AST_Var,\n    AST_VarDef,\n    AST_While,\n    AST_With,\n    AST_Yield,\n    walk_parent\n} from \"./ast.js\";\nimport { first_in_statement } from \"./utils/first_in_statement.js\";\n\nlet mangle_options = undefined;\nAST_Node.prototype.size = function (compressor, stack) {\n    mangle_options = compressor && compressor.mangle_options;\n\n    let size = 0;\n    walk_parent(this, (node, info) => {\n        size += node._size(info);\n    }, stack || (compressor && compressor.stack));\n\n    // just to save a bit of memory\n    mangle_options = undefined;\n\n    return size;\n};\n\nAST_Node.prototype._size = () => 0;\n\nAST_Debugger.prototype._size = () => 8;\n\nAST_Directive.prototype._size = function () {\n    // TODO string encoding stuff\n    return 2 + this.value.length;\n};\n\nconst list_overhead = (array) => array.length && array.length - 1;\n\nAST_Block.prototype._size = function () {\n    return 2 + list_overhead(this.body);\n};\n\nAST_Toplevel.prototype._size = function() {\n    return list_overhead(this.body);\n};\n\nAST_EmptyStatement.prototype._size = () => 1;\n\nAST_LabeledStatement.prototype._size = () => 2;  // x:\n\nAST_Do.prototype._size = () => 9;\n\nAST_While.prototype._size = () => 7;\n\nAST_For.prototype._size = () => 8;\n\nAST_ForIn.prototype._size = () => 8;\n// AST_ForOf inherits ^\n\nAST_With.prototype._size = () => 6;\n\nAST_Expansion.prototype._size = () => 3;\n\n/*#__INLINE__*/\nconst lambda_modifiers = func =>\n    (func.is_generator ? 1 : 0) + (func.async ? 6 : 0);\n\nAST_Accessor.prototype._size = function () {\n    return lambda_modifiers(this) + 4 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Function.prototype._size = function (info) {\n    const first = !!first_in_statement(info);\n    return (first * 2) + lambda_modifiers(this) + 12 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Defun.prototype._size = function () {\n    return lambda_modifiers(this) + 13 + list_overhead(this.argnames) + list_overhead(this.body);\n};\n\nAST_Arrow.prototype._size = function () {\n    let args_and_arrow = 2 + list_overhead(this.argnames);\n\n    if (\n        !(\n            this.argnames.length === 1\n            && this.argnames[0] instanceof AST_Symbol\n        )\n    ) {\n        args_and_arrow += 2;\n    }\n\n    return lambda_modifiers(this) + args_and_arrow + (Array.isArray(this.body) ? list_overhead(this.body) : this.body._size());\n};\n\nAST_Destructuring.prototype._size = () => 2;\n\nAST_TemplateString.prototype._size = function () {\n    return 2 + (Math.floor(this.segments.length / 2) * 3);  /* \"${}\" */\n};\n\nAST_TemplateSegment.prototype._size = function () {\n    return this.value.length;\n};\n\nAST_Return.prototype._size = function () {\n    return this.value ? 7 : 6;\n};\n\nAST_Throw.prototype._size = () => 6;\n\nAST_Break.prototype._size = function () {\n    return this.label ? 6 : 5;\n};\n\nAST_Continue.prototype._size = function () {\n    return this.label ? 9 : 8;\n};\n\nAST_If.prototype._size = () => 4;\n\nAST_Switch.prototype._size = function () {\n    return 8 + list_overhead(this.body);\n};\n\nAST_Case.prototype._size = function () {\n    return 5 + list_overhead(this.body);\n};\n\nAST_Default.prototype._size = function () {\n    return 8 + list_overhead(this.body);\n};\n\nAST_Try.prototype._size = function () {\n    return 3 + list_overhead(this.body);\n};\n\nAST_Catch.prototype._size = function () {\n    let size = 7 + list_overhead(this.body);\n    if (this.argname) {\n        size += 2;\n    }\n    return size;\n};\n\nAST_Finally.prototype._size = function () {\n    return 7 + list_overhead(this.body);\n};\n\n/*#__INLINE__*/\nconst def_size = (size, def) => size + list_overhead(def.definitions);\n\nAST_Var.prototype._size = function () {\n    return def_size(4, this);\n};\n\nAST_Let.prototype._size = function () {\n    return def_size(4, this);\n};\n\nAST_Const.prototype._size = function () {\n    return def_size(6, this);\n};\n\nAST_VarDef.prototype._size = function () {\n    return this.value ? 1 : 0;\n};\n\nAST_NameMapping.prototype._size = function () {\n    // foreign name isn't mangled\n    return this.name ? 4 : 0;\n};\n\nAST_Import.prototype._size = function () {\n    // import\n    let size = 6;\n\n    if (this.imported_name) size += 1;\n\n    // from\n    if (this.imported_name || this.imported_names) size += 5;\n\n    // braces, and the commas\n    if (this.imported_names) {\n        size += 2 + list_overhead(this.imported_names);\n    }\n\n    return size;\n};\n\nAST_ImportMeta.prototype._size = () => 11;\n\nAST_Export.prototype._size = function () {\n    let size = 7 + (this.is_default ? 8 : 0);\n\n    if (this.exported_value) {\n        size += this.exported_value._size();\n    }\n\n    if (this.exported_names) {\n        // Braces and commas\n        size += 2 + list_overhead(this.exported_names);\n    }\n\n    if (this.module_name) {\n        // \"from \"\n        size += 5;\n    }\n\n    return size;\n};\n\nAST_Call.prototype._size = function () {\n    if (this.optional) {\n        return 4 + list_overhead(this.args);\n    }\n    return 2 + list_overhead(this.args);\n};\n\nAST_New.prototype._size = function () {\n    return 6 + list_overhead(this.args);\n};\n\nAST_Sequence.prototype._size = function () {\n    return list_overhead(this.expressions);\n};\n\nAST_Dot.prototype._size = function () {\n    if (this.optional) {\n        return this.property.length + 2;\n    }\n    return this.property.length + 1;\n};\n\nAST_Sub.prototype._size = function () {\n    return this.optional ? 4 : 2;\n};\n\nAST_Unary.prototype._size = function () {\n    if (this.operator === \"typeof\") return 7;\n    if (this.operator === \"void\") return 5;\n    return this.operator.length;\n};\n\nAST_Binary.prototype._size = function (info) {\n    if (this.operator === \"in\") return 4;\n\n    let size = this.operator.length;\n\n    if (\n        (this.operator === \"+\" || this.operator === \"-\")\n        && this.right instanceof AST_Unary && this.right.operator === this.operator\n    ) {\n        // 1+ +a > needs space between the +\n        size += 1;\n    }\n\n    if (this.needs_parens(info)) {\n        size += 2;\n    }\n\n    return size;\n};\n\nAST_Conditional.prototype._size = () => 3;\n\nAST_Array.prototype._size = function () {\n    return 2 + list_overhead(this.elements);\n};\n\nAST_Object.prototype._size = function (info) {\n    let base = 2;\n    if (first_in_statement(info)) {\n        base += 2; // parens\n    }\n    return base + list_overhead(this.properties);\n};\n\n/*#__INLINE__*/\nconst key_size = key =>\n    typeof key === \"string\" ? key.length : 0;\n\nAST_ObjectKeyVal.prototype._size = function () {\n    return key_size(this.key) + 1;\n};\n\n/*#__INLINE__*/\nconst static_size = is_static => is_static ? 7 : 0;\n\nAST_ObjectGetter.prototype._size = function () {\n    return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ObjectSetter.prototype._size = function () {\n    return 5 + static_size(this.static) + key_size(this.key);\n};\n\nAST_ConciseMethod.prototype._size = function () {\n    return static_size(this.static) + key_size(this.key) + lambda_modifiers(this);\n};\n\nAST_Class.prototype._size = function () {\n    return (\n        (this.name ? 8 : 7)\n        + (this.extends ? 8 : 0)\n    );\n};\n\nAST_ClassProperty.prototype._size = function () {\n    return (\n        static_size(this.static)\n        + (typeof this.key === \"string\" ? this.key.length + 2 : 0)\n        + (this.value ? 1 : 0)\n    );\n};\n\nAST_Symbol.prototype._size = function () {\n    return !mangle_options || this.definition().unmangleable(mangle_options)\n        ? this.name.length\n        : 1;\n};\n\n// TODO take propmangle into account\nAST_SymbolClassProperty.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_SymbolRef.prototype._size = AST_SymbolDeclaration.prototype._size = function () {\n    const { name, thedef } = this;\n\n    if (thedef && thedef.global) return name.length;\n\n    if (name === \"arguments\") return 9;\n\n    return AST_Symbol.prototype._size.call(this);\n};\n\nAST_NewTarget.prototype._size = () => 10;\n\nAST_SymbolImportForeign.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_SymbolExportForeign.prototype._size = function () {\n    return this.name.length;\n};\n\nAST_This.prototype._size = () => 4;\n\nAST_Super.prototype._size = () => 5;\n\nAST_String.prototype._size = function () {\n    return this.value.length + 2;\n};\n\nAST_Number.prototype._size = function () {\n    const { value } = this;\n    if (value === 0) return 1;\n    if (value > 0 && Math.floor(value) === value) {\n        return Math.floor(Math.log10(value) + 1);\n    }\n    return value.toString().length;\n};\n\nAST_BigInt.prototype._size = function () {\n    return this.value.length;\n};\n\nAST_RegExp.prototype._size = function () {\n    return this.value.toString().length;\n};\n\nAST_Null.prototype._size = () => 4;\n\nAST_NaN.prototype._size = () => 3;\n\nAST_Undefined.prototype._size = () => 6; // \"void 0\"\n\nAST_Hole.prototype._size = () => 0;  // comma is taken into account\n\nAST_Infinity.prototype._size = () => 8;\n\nAST_True.prototype._size = () => 4;\n\nAST_False.prototype._size = () => 5;\n\nAST_Await.prototype._size = () => 6;\n\nAST_Yield.prototype._size = () => 6;\n"]},"metadata":{},"sourceType":"module"}