{"ast":null,"code":"/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst log = require('@ampproject/toolbox-core').log.tag('AMP Runtime Version');\n\nconst AMP_CACHE_HOST = 'https://cdn.ampproject.org';\nconst RUNTIME_METADATA_PATH = '/rtv/metadata';\nconst VERSION_TXT_PATH = '/version.txt';\n/**\n * @typedef {number} ReleaseType\n */\n\n/**\n * Release type \"enumeration\"\n *\n * @enum {ReleaseType}\n */\n\nconst ReleaseType = {\n  canary: 0,\n  prod: 1,\n  lts: 2\n};\n/**\n * Queries <host>/rtv/metadata for the latest AMP runtime version. If version is not available from\n * this endpoint, falls back to <host>/version.txt and manually prepends config code. Uses a\n * stale-while-revalidate caching strategy to avoid refreshing the version.\n *\n * /rtv/metadata endpoint details:\n *\n * <pre>\n * {\n *   \"ampRuntimeVersion\": \"CURRENT_PROD\",\n *   \"ampCssUrl\": \"https://cdn.ampproject.org/rtv/CURRENT_PROD/v0.css\",\n *   \"canaryPercentage\": \"0.1\",\n *   \"diversions\": [\n *     \"CURRENT_OPTIN\",\n *     \"CURRENT_1%\",\n *     \"CURRENT_CONTROL\"\n *   ],\n *   \"ltsRuntimeVersion\": \"CURRENT_LTS\",\n *   \"ltsCssUrl\": \"https://cdn.ampproject.org/rtv/CURRENT_LTS/v0.css\"\n * }\n * </pre>\n *\n * where:\n *\n * <ul>\n *   <li> CURRENT_OPTIN: is when you go to https://cdn.ampproject.org/experiments.html and toggle \"dev-channel\". It's the earliest possible time to get new code.</li>\n *   <li> CURRENT_1%: 1% is the same code as opt-in that we're now comfortable releasing to 1% of the population.</li>\n *   <li> CURRENT_CONTROL is the same thing as production, but with a different URL. This is to compare experiments against, since prod's immutable caching would affect metrics.</li>\n * </ul>\n */\n\nclass RuntimeVersion {\n  constructor(fetch) {\n    this.fetch_ = fetch;\n  }\n  /**\n   * Returns the version of the current AMP runtime release. Pass\n   * <code>{canary: true}</code> to get the latest canary version.\n   *\n   * @param {object} options - the options.\n   * @param {boolean} options.canary - true if canary should be returned.\n   * @param {boolean} options.lts - true if lts should be returned.\n   * @param {string} options.ampUrlPrefix - the domain & path to an AMP runtime.\n   * @returns {Promise<string>} a promise containing the current version.\n   */\n\n\n  async currentVersion(options = {}) {\n    if (options.ampUrlPrefix && !this.isAbsoluteUrl_(options.ampUrlPrefix)) {\n      throw new Error('host must be an absolute URL');\n    }\n\n    if (options.canary && options.lts) {\n      throw new Error('lts flag is not compatible with canary flag');\n    }\n\n    let releaseType = ReleaseType.prod;\n\n    if (options.canary) {\n      releaseType = ReleaseType.canary;\n    } else if (options.lts) {\n      releaseType = ReleaseType.lts;\n    }\n\n    const host = options.ampUrlPrefix ? options.ampUrlPrefix.replace(/\\/$/, '') : AMP_CACHE_HOST;\n    let rtv = await this.getVersionFromRuntimeMetadata_(host, releaseType);\n\n    if (!rtv && releaseType === ReleaseType.prod) {\n      rtv = await this.getVersionFromVersionTxt_(host, releaseType);\n    }\n\n    return rtv;\n  }\n  /* PRIVATE */\n\n  /**\n   * Get runtime version from <host>/rtv/metadata\n   *\n   * @param {string} host - runtime host.\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {Promise<string>} a promise containing the runtime version.\n   */\n\n\n  async getVersionFromRuntimeMetadata_(host, releaseType) {\n    const runtimeMetaUrl = host + RUNTIME_METADATA_PATH;\n    log.debug(`Fetching version from ${runtimeMetaUrl}`);\n    let response;\n\n    try {\n      response = await this.fetch_(runtimeMetaUrl);\n    } catch (ex) {// Avoid exception to give fallback mechanism getVersionFromVersionTxt_()\n      // a chance to lookup version, and to gracefully return 'undefined' if no\n      // version is ultimately found.\n    }\n\n    if (!response || !response.ok) {\n      log.debug('RTV metadata endpoint did not respond with a successful status code');\n      return;\n    }\n\n    let data;\n\n    try {\n      data = await response.json();\n    } catch (ex) {\n      log.debug('RTV metadata JSON malformed');\n      return;\n    }\n\n    let rtv;\n\n    if (releaseType === ReleaseType.canary) {\n      if (Array.isArray(data.diversions) && data.diversions[0] && data.diversions[0].startsWith(this.getRtvConfigCode_(releaseType))) {\n        rtv = data.diversions[0];\n      }\n\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, canary version not in diversions array');\n      }\n    } else if (releaseType === ReleaseType.lts) {\n      rtv = data.ltsRuntimeVersion;\n\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, lts version not in ltsRuntimeVersion');\n      }\n    } else if (releaseType === ReleaseType.prod) {\n      rtv = data.ampRuntimeVersion;\n\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, production version not in ampRuntimeVersion');\n      }\n    }\n\n    return rtv;\n  }\n  /**\n   * Get runtime version from <host>/version.txt, manually prepending\n   * production release code '01'. This method cannot be used to detect\n   * canary or lts releases.\n   *\n   * @param {string} host - runtime host.\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {Promise<string>} a promise containing the runtime version.\n   */\n\n\n  async getVersionFromVersionTxt_(host, releaseType) {\n    if (releaseType !== ReleaseType.prod) {\n      log.debug(`version.txt lookup only supported for prod releases`);\n      return;\n    }\n\n    let versionTxtUrl = host + VERSION_TXT_PATH;\n    log.debug(`Falling back to ${versionTxtUrl}`);\n    let response;\n\n    try {\n      response = await this.fetch_(versionTxtUrl);\n    } catch (ex) {// Prefer gracefully returning 'undefined' version to throwing.\n    }\n\n    if (!response || !response.ok) {\n      log.debug('version.txt endpoint did not respond with a successful status code');\n      return;\n    }\n\n    let version;\n\n    try {\n      version = (await response.text()).trim();\n\n      if (version !== encodeURIComponent(version)) {\n        throw new Error();\n      }\n    } catch (ex) {\n      log.debug('Version string malformed, not URL compatible');\n      return;\n    }\n\n    return this.getRtvConfigCode_(releaseType) + version;\n  }\n  /**\n   * Get config code corresponding to release type\n   *\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {string}\n   */\n\n\n  getRtvConfigCode_(releaseType) {\n    if (releaseType === ReleaseType.canary) {\n      return '00';\n    }\n\n    return '01';\n  }\n  /**\n   * Determine whether a URL is absolute.\n   *\n   * @param {string} url - URL to test.\n   * @returns {boolean}\n   */\n\n\n  isAbsoluteUrl_(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n\n}\n\nmodule.exports = RuntimeVersion;","map":{"version":3,"sources":["/Users/bruceseymour/ra-video/client/node_modules/@ampproject/toolbox-runtime-version/lib/RuntimeVersion.js"],"names":["log","require","tag","AMP_CACHE_HOST","RUNTIME_METADATA_PATH","VERSION_TXT_PATH","ReleaseType","canary","prod","lts","RuntimeVersion","constructor","fetch","fetch_","currentVersion","options","ampUrlPrefix","isAbsoluteUrl_","Error","releaseType","host","replace","rtv","getVersionFromRuntimeMetadata_","getVersionFromVersionTxt_","runtimeMetaUrl","debug","response","ex","ok","data","json","Array","isArray","diversions","startsWith","getRtvConfigCode_","ltsRuntimeVersion","ampRuntimeVersion","versionTxtUrl","version","text","trim","encodeURIComponent","url","URL","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 The AMP HTML Authors. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS-IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n'use strict';\n\nconst log = require('@ampproject/toolbox-core').log.tag('AMP Runtime Version');\n\nconst AMP_CACHE_HOST = 'https://cdn.ampproject.org';\nconst RUNTIME_METADATA_PATH = '/rtv/metadata';\nconst VERSION_TXT_PATH = '/version.txt';\n\n/**\n * @typedef {number} ReleaseType\n */\n\n/**\n * Release type \"enumeration\"\n *\n * @enum {ReleaseType}\n */\nconst ReleaseType = {\n  canary: 0,\n  prod: 1,\n  lts: 2,\n};\n\n/**\n * Queries <host>/rtv/metadata for the latest AMP runtime version. If version is not available from\n * this endpoint, falls back to <host>/version.txt and manually prepends config code. Uses a\n * stale-while-revalidate caching strategy to avoid refreshing the version.\n *\n * /rtv/metadata endpoint details:\n *\n * <pre>\n * {\n *   \"ampRuntimeVersion\": \"CURRENT_PROD\",\n *   \"ampCssUrl\": \"https://cdn.ampproject.org/rtv/CURRENT_PROD/v0.css\",\n *   \"canaryPercentage\": \"0.1\",\n *   \"diversions\": [\n *     \"CURRENT_OPTIN\",\n *     \"CURRENT_1%\",\n *     \"CURRENT_CONTROL\"\n *   ],\n *   \"ltsRuntimeVersion\": \"CURRENT_LTS\",\n *   \"ltsCssUrl\": \"https://cdn.ampproject.org/rtv/CURRENT_LTS/v0.css\"\n * }\n * </pre>\n *\n * where:\n *\n * <ul>\n *   <li> CURRENT_OPTIN: is when you go to https://cdn.ampproject.org/experiments.html and toggle \"dev-channel\". It's the earliest possible time to get new code.</li>\n *   <li> CURRENT_1%: 1% is the same code as opt-in that we're now comfortable releasing to 1% of the population.</li>\n *   <li> CURRENT_CONTROL is the same thing as production, but with a different URL. This is to compare experiments against, since prod's immutable caching would affect metrics.</li>\n * </ul>\n */\nclass RuntimeVersion {\n  constructor(fetch) {\n    this.fetch_ = fetch;\n  }\n\n  /**\n   * Returns the version of the current AMP runtime release. Pass\n   * <code>{canary: true}</code> to get the latest canary version.\n   *\n   * @param {object} options - the options.\n   * @param {boolean} options.canary - true if canary should be returned.\n   * @param {boolean} options.lts - true if lts should be returned.\n   * @param {string} options.ampUrlPrefix - the domain & path to an AMP runtime.\n   * @returns {Promise<string>} a promise containing the current version.\n   */\n  async currentVersion(options = {}) {\n    if (options.ampUrlPrefix && !this.isAbsoluteUrl_(options.ampUrlPrefix)) {\n      throw new Error('host must be an absolute URL');\n    }\n    if (options.canary && options.lts) {\n      throw new Error('lts flag is not compatible with canary flag');\n    }\n\n    let releaseType = ReleaseType.prod;\n    if (options.canary) {\n      releaseType = ReleaseType.canary;\n    } else if (options.lts) {\n      releaseType = ReleaseType.lts;\n    }\n\n    const host = options.ampUrlPrefix ? options.ampUrlPrefix.replace(/\\/$/, '') : AMP_CACHE_HOST;\n\n    let rtv = await this.getVersionFromRuntimeMetadata_(host, releaseType);\n    if (!rtv && releaseType === ReleaseType.prod) {\n      rtv = await this.getVersionFromVersionTxt_(host, releaseType);\n    }\n\n    return rtv;\n  }\n\n  /* PRIVATE */\n\n  /**\n   * Get runtime version from <host>/rtv/metadata\n   *\n   * @param {string} host - runtime host.\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {Promise<string>} a promise containing the runtime version.\n   */\n  async getVersionFromRuntimeMetadata_(host, releaseType) {\n    const runtimeMetaUrl = host + RUNTIME_METADATA_PATH;\n    log.debug(`Fetching version from ${runtimeMetaUrl}`);\n\n    let response;\n    try {\n      response = await this.fetch_(runtimeMetaUrl);\n    } catch (ex) {\n      // Avoid exception to give fallback mechanism getVersionFromVersionTxt_()\n      // a chance to lookup version, and to gracefully return 'undefined' if no\n      // version is ultimately found.\n    }\n    if (!response || !response.ok) {\n      log.debug('RTV metadata endpoint did not respond with a successful status code');\n      return;\n    }\n\n    let data;\n    try {\n      data = await response.json();\n    } catch (ex) {\n      log.debug('RTV metadata JSON malformed');\n      return;\n    }\n\n    let rtv;\n    if (releaseType === ReleaseType.canary) {\n      if (\n        Array.isArray(data.diversions) &&\n        data.diversions[0] &&\n        data.diversions[0].startsWith(this.getRtvConfigCode_(releaseType))\n      ) {\n        rtv = data.diversions[0];\n      }\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, canary version not in diversions array');\n      }\n    } else if (releaseType === ReleaseType.lts) {\n      rtv = data.ltsRuntimeVersion;\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, lts version not in ltsRuntimeVersion');\n      }\n    } else if (releaseType === ReleaseType.prod) {\n      rtv = data.ampRuntimeVersion;\n      if (!rtv) {\n        log.debug('RTV metadata JSON malformed, production version not in ampRuntimeVersion');\n      }\n    }\n\n    return rtv;\n  }\n\n  /**\n   * Get runtime version from <host>/version.txt, manually prepending\n   * production release code '01'. This method cannot be used to detect\n   * canary or lts releases.\n   *\n   * @param {string} host - runtime host.\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {Promise<string>} a promise containing the runtime version.\n   */\n  async getVersionFromVersionTxt_(host, releaseType) {\n    if (releaseType !== ReleaseType.prod) {\n      log.debug(`version.txt lookup only supported for prod releases`);\n      return;\n    }\n\n    let versionTxtUrl = host + VERSION_TXT_PATH;\n    log.debug(`Falling back to ${versionTxtUrl}`);\n\n    let response;\n    try {\n      response = await this.fetch_(versionTxtUrl);\n    } catch (ex) {\n      // Prefer gracefully returning 'undefined' version to throwing.\n    }\n    if (!response || !response.ok) {\n      log.debug('version.txt endpoint did not respond with a successful status code');\n      return;\n    }\n\n    let version;\n    try {\n      version = (await response.text()).trim();\n      if (version !== encodeURIComponent(version)) {\n        throw new Error();\n      }\n    } catch (ex) {\n      log.debug('Version string malformed, not URL compatible');\n      return;\n    }\n\n    return this.getRtvConfigCode_(releaseType) + version;\n  }\n\n  /**\n   * Get config code corresponding to release type\n   *\n   * @param {ReleaseType} releaseType - release type.\n   * @returns {string}\n   */\n  getRtvConfigCode_(releaseType) {\n    if (releaseType === ReleaseType.canary) {\n      return '00';\n    }\n    return '01';\n  }\n\n  /**\n   * Determine whether a URL is absolute.\n   *\n   * @param {string} url - URL to test.\n   * @returns {boolean}\n   */\n  isAbsoluteUrl_(url) {\n    try {\n      new URL(url);\n      return true;\n    } catch (ex) {\n      return false;\n    }\n  }\n}\n\nmodule.exports = RuntimeVersion;\n"]},"metadata":{},"sourceType":"script"}