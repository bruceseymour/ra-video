{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.getFontDefinitionFromNetwork = getFontDefinitionFromNetwork;\nexports.getFontDefinitionFromManifest = getFontDefinitionFromManifest;\n\nconst https = require('https');\n\nconst CHROME_UA = 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36';\nconst IE_UA = 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko';\n\nfunction getFontForUA(url, UA) {\n  return new Promise(resolve => {\n    let rawData = '';\n    https.get(url, {\n      headers: {\n        'user-agent': UA\n      }\n    }, res => {\n      res.on('data', chunk => {\n        rawData += chunk;\n      });\n      res.on('end', () => {\n        resolve(rawData.toString('utf8'));\n      });\n    });\n  });\n}\n\nasync function getFontDefinitionFromNetwork(url) {\n  let result = '';\n  /**\n  * The order of IE -> Chrome is important, other wise chrome starts loading woff1.\n  * CSS cascading 🤷‍♂️.\n  */\n\n  result += await getFontForUA(url, IE_UA);\n  result += await getFontForUA(url, CHROME_UA);\n  return result;\n}\n\nfunction getFontDefinitionFromManifest(url, manifest) {\n  var _manifest$find;\n\n  return ((_manifest$find = manifest.find(font => {\n    if (font && font.url === url) {\n      return true;\n    }\n\n    return false;\n  })) == null ? void 0 : _manifest$find.content) || '';\n}","map":{"version":3,"sources":["../../../next-server/server/font-utils.ts"],"names":["https","require","CHROME_UA","IE_UA","resolve","rawData","headers","res","chunk","result","getFontForUA","font"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,CAArB,OAAqB,CAArB;;AAEA,MAAMC,SAAS,GAAf,0HAAA;AAEA,MAAMC,KAAK,GAAX,gEAAA;;AAOA,SAAA,YAAA,CAAA,GAAA,EAAA,EAAA,EAAgE;AAC9D,SAAO,IAAA,OAAA,CAAaC,OAAD,IAAa;AAC9B,QAAIC,OAAY,GAAhB,EAAA;AACAL,IAAAA,KAAK,CAALA,GAAAA,CAAAA,GAAAA,EAEE;AACEM,MAAAA,OAAO,EAAE;AACP,sBAJNN;AAGa;AADX,KAFFA,EAOGO,GAAD,IAAc;AACZA,MAAAA,GAAG,CAAHA,EAAAA,CAAAA,MAAAA,EAAgBC,KAAD,IAAgB;AAC7BH,QAAAA,OAAO,IAAPA,KAAAA;AADFE,OAAAA;AAGAA,MAAAA,GAAG,CAAHA,EAAAA,CAAAA,KAAAA,EAAc,MAAM;AAClBH,QAAAA,OAAO,CAACC,OAAO,CAAPA,QAAAA,CAARD,MAAQC,CAAD,CAAPD;AADFG,OAAAA;AAXJP,KAAAA;AAFF,GAAO,CAAP;AAqBK;;AAAA,eAAA,4BAAA,CAAA,GAAA,EAEY;AACjB,MAAIS,MAAM,GAAV,EAAA;AACA;AACF;AACA;AACA;;AACEA,EAAAA,MAAM,IAAI,MAAMC,YAAY,CAAA,GAAA,EAA5BD,KAA4B,CAA5BA;AACAA,EAAAA,MAAM,IAAI,MAAMC,YAAY,CAAA,GAAA,EAA5BD,SAA4B,CAA5BA;AACA,SAAA,MAAA;AAGK;;AAAA,SAAA,6BAAA,CAAA,GAAA,EAAA,QAAA,EAGG;AAAA,MAAA,cAAA;;AACR,SACE,CAAA,CAAA,cAAA,GAAA,QAAQ,CAAR,IAAA,CAAeE,IAAD,IAAU;AACtB,QAAIA,IAAI,IAAIA,IAAI,CAAJA,GAAAA,KAAZ,GAAA,EAA8B;AAC5B,aAAA,IAAA;AAEF;;AAAA,WAAA,KAAA;AAJF,GAAA,CAAA,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,OAAA,KADF,EAAA;AAQD","sourcesContent":["const https = require('https')\n\nconst CHROME_UA =\n  'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.61 Safari/537.36'\nconst IE_UA = 'Mozilla/5.0 (Windows NT 10.0; Trident/7.0; rv:11.0) like Gecko'\n\nexport type FontManifest = Array<{\n  url: string\n  content: string\n}>\n\nfunction getFontForUA(url: string, UA: string): Promise<String> {\n  return new Promise((resolve) => {\n    let rawData: any = ''\n    https.get(\n      url,\n      {\n        headers: {\n          'user-agent': UA,\n        },\n      },\n      (res: any) => {\n        res.on('data', (chunk: any) => {\n          rawData += chunk\n        })\n        res.on('end', () => {\n          resolve(rawData.toString('utf8'))\n        })\n      }\n    )\n  })\n}\n\nexport async function getFontDefinitionFromNetwork(\n  url: string\n): Promise<string> {\n  let result = ''\n  /**\n   * The order of IE -> Chrome is important, other wise chrome starts loading woff1.\n   * CSS cascading 🤷‍♂️.\n   */\n  result += await getFontForUA(url, IE_UA)\n  result += await getFontForUA(url, CHROME_UA)\n  return result\n}\n\nexport function getFontDefinitionFromManifest(\n  url: string,\n  manifest: FontManifest\n): string {\n  return (\n    manifest.find((font) => {\n      if (font && font.url === url) {\n        return true\n      }\n      return false\n    })?.content || ''\n  )\n}\n"]},"metadata":{},"sourceType":"script"}